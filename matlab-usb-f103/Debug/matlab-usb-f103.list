
matlab-usb-f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008854  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08008960  08008960  00018960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089d4  080089d4  000201cc  2**0
                  CONTENTS
  4 .ARM          00000000  080089d4  080089d4  000201cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080089d4  080089d4  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089d4  080089d4  000189d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089d8  080089d8  000189d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  080089dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001438  200001cc  08008ba8  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  20001604  08008ba8  00021604  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201f5  2**0
                  CONTENTS, READONLY
 13 .debug_info   000168c9  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ccc  00000000  00000000  00036b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001480  00000000  00000000  0003a7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fa8  00000000  00000000  0003bc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b782  00000000  00000000  0003cbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a99f  00000000  00000000  0005837a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090f8b  00000000  00000000  00072d19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000056f0  00000000  00000000  00103ca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  00109394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001cc 	.word	0x200001cc
 8000128:	00000000 	.word	0x00000000
 800012c:	08008948 	.word	0x08008948

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d0 	.word	0x200001d0
 8000148:	08008948 	.word	0x08008948

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_f2uiz>:
 80002b4:	0042      	lsls	r2, r0, #1
 80002b6:	d20e      	bcs.n	80002d6 <__aeabi_f2uiz+0x22>
 80002b8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80002bc:	d30b      	bcc.n	80002d6 <__aeabi_f2uiz+0x22>
 80002be:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80002c2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80002c6:	d409      	bmi.n	80002dc <__aeabi_f2uiz+0x28>
 80002c8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80002cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80002d0:	fa23 f002 	lsr.w	r0, r3, r2
 80002d4:	4770      	bx	lr
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	4770      	bx	lr
 80002dc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80002e0:	d101      	bne.n	80002e6 <__aeabi_f2uiz+0x32>
 80002e2:	0242      	lsls	r2, r0, #9
 80002e4:	d102      	bne.n	80002ec <__aeabi_f2uiz+0x38>
 80002e6:	f04f 30ff 	mov.w	r0, #4294967295
 80002ea:	4770      	bx	lr
 80002ec:	f04f 0000 	mov.w	r0, #0
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop

080002f4 <buttonInit>:
 */

#include "button.h"
#include "stdlib.h"

Button_Handle_t* buttonInit(float debounce_time_s, float sample_freq_hz) {
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b084      	sub	sp, #16
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	6039      	str	r1, [r7, #0]
	Button_Handle_t *button = (Button_Handle_t*)malloc(sizeof(Button_Handle_t));
 80002fe:	200c      	movs	r0, #12
 8000300:	f008 fa2a 	bl	8008758 <malloc>
 8000304:	4603      	mov	r3, r0
 8000306:	60fb      	str	r3, [r7, #12]
	button->maximum = (unsigned int) (debounce_time_s * sample_freq_hz);
 8000308:	6839      	ldr	r1, [r7, #0]
 800030a:	6878      	ldr	r0, [r7, #4]
 800030c:	f7ff ff1e 	bl	800014c <__aeabi_fmul>
 8000310:	4603      	mov	r3, r0
 8000312:	4618      	mov	r0, r3
 8000314:	f7ff ffce 	bl	80002b4 <__aeabi_f2uiz>
 8000318:	4602      	mov	r2, r0
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	601a      	str	r2, [r3, #0]
	return button;
 800031e:	68fb      	ldr	r3, [r7, #12]
}
 8000320:	4618      	mov	r0, r3
 8000322:	3710      	adds	r7, #16
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}

08000328 <getDebouncedButton>:

unsigned int getDebouncedButton(Button_Handle_t *button, unsigned char input) {
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
 8000330:	460b      	mov	r3, r1
 8000332:	70fb      	strb	r3, [r7, #3]
	/* Step 1: Update the integrator based on the input signal.  Note that the
	 integrator follows the input, decreasing or increasing towards the limits as
	 determined by the input state (0 or 1). */

	if (input == 0) {
 8000334:	78fb      	ldrb	r3, [r7, #3]
 8000336:	2b00      	cmp	r3, #0
 8000338:	d109      	bne.n	800034e <getDebouncedButton+0x26>
		if (button->integrator > 0)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	685b      	ldr	r3, [r3, #4]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d010      	beq.n	8000364 <getDebouncedButton+0x3c>
			button->integrator--;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	685b      	ldr	r3, [r3, #4]
 8000346:	1e5a      	subs	r2, r3, #1
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	605a      	str	r2, [r3, #4]
 800034c:	e00a      	b.n	8000364 <getDebouncedButton+0x3c>
	} else if (button->integrator < button->maximum)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	685a      	ldr	r2, [r3, #4]
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	429a      	cmp	r2, r3
 8000358:	d204      	bcs.n	8000364 <getDebouncedButton+0x3c>
		button->integrator++;
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	685b      	ldr	r3, [r3, #4]
 800035e:	1c5a      	adds	r2, r3, #1
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	605a      	str	r2, [r3, #4]

	/* Step 2: Update the output state based on the integrator.  Note that the
	 output will only change states if the integrator has reached a limit, either
	 0 or MAXIMUM. */

	if (button->integrator == 0)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	685b      	ldr	r3, [r3, #4]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d103      	bne.n	8000374 <getDebouncedButton+0x4c>
		button->output = 0;
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	2200      	movs	r2, #0
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	e00c      	b.n	800038e <getDebouncedButton+0x66>
	else if (button->integrator >= button->maximum) {
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	685a      	ldr	r2, [r3, #4]
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	429a      	cmp	r2, r3
 800037e:	d306      	bcc.n	800038e <getDebouncedButton+0x66>
		button->output = 1;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	2201      	movs	r2, #1
 8000384:	609a      	str	r2, [r3, #8]
		button->integrator = button->maximum; /* defensive code if integrator got corrupted */
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681a      	ldr	r2, [r3, #0]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	605a      	str	r2, [r3, #4]
	}
	return button->output;
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	689b      	ldr	r3, [r3, #8]
}
 8000392:	4618      	mov	r0, r3
 8000394:	370c      	adds	r7, #12
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr

0800039c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b088      	sub	sp, #32
 80003a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003a2:	f107 0310 	add.w	r3, r7, #16
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	605a      	str	r2, [r3, #4]
 80003ac:	609a      	str	r2, [r3, #8]
 80003ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b0:	4b2a      	ldr	r3, [pc, #168]	; (800045c <MX_GPIO_Init+0xc0>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	4a29      	ldr	r2, [pc, #164]	; (800045c <MX_GPIO_Init+0xc0>)
 80003b6:	f043 0310 	orr.w	r3, r3, #16
 80003ba:	6193      	str	r3, [r2, #24]
 80003bc:	4b27      	ldr	r3, [pc, #156]	; (800045c <MX_GPIO_Init+0xc0>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	f003 0310 	and.w	r3, r3, #16
 80003c4:	60fb      	str	r3, [r7, #12]
 80003c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003c8:	4b24      	ldr	r3, [pc, #144]	; (800045c <MX_GPIO_Init+0xc0>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a23      	ldr	r2, [pc, #140]	; (800045c <MX_GPIO_Init+0xc0>)
 80003ce:	f043 0320 	orr.w	r3, r3, #32
 80003d2:	6193      	str	r3, [r2, #24]
 80003d4:	4b21      	ldr	r3, [pc, #132]	; (800045c <MX_GPIO_Init+0xc0>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f003 0320 	and.w	r3, r3, #32
 80003dc:	60bb      	str	r3, [r7, #8]
 80003de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e0:	4b1e      	ldr	r3, [pc, #120]	; (800045c <MX_GPIO_Init+0xc0>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	4a1d      	ldr	r2, [pc, #116]	; (800045c <MX_GPIO_Init+0xc0>)
 80003e6:	f043 0304 	orr.w	r3, r3, #4
 80003ea:	6193      	str	r3, [r2, #24]
 80003ec:	4b1b      	ldr	r3, [pc, #108]	; (800045c <MX_GPIO_Init+0xc0>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	f003 0304 	and.w	r3, r3, #4
 80003f4:	607b      	str	r3, [r7, #4]
 80003f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f8:	4b18      	ldr	r3, [pc, #96]	; (800045c <MX_GPIO_Init+0xc0>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	4a17      	ldr	r2, [pc, #92]	; (800045c <MX_GPIO_Init+0xc0>)
 80003fe:	f043 0308 	orr.w	r3, r3, #8
 8000402:	6193      	str	r3, [r2, #24]
 8000404:	4b15      	ldr	r3, [pc, #84]	; (800045c <MX_GPIO_Init+0xc0>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	f003 0308 	and.w	r3, r3, #8
 800040c:	603b      	str	r3, [r7, #0]
 800040e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000416:	4812      	ldr	r0, [pc, #72]	; (8000460 <MX_GPIO_Init+0xc4>)
 8000418:	f000 fe2b 	bl	8001072 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800041c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000420:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000422:	2301      	movs	r3, #1
 8000424:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000426:	2300      	movs	r3, #0
 8000428:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800042a:	2302      	movs	r3, #2
 800042c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800042e:	f107 0310 	add.w	r3, r7, #16
 8000432:	4619      	mov	r1, r3
 8000434:	480a      	ldr	r0, [pc, #40]	; (8000460 <MX_GPIO_Init+0xc4>)
 8000436:	f000 fc81 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT_Pin;
 800043a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800043e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000440:	2300      	movs	r3, #0
 8000442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000444:	2301      	movs	r3, #1
 8000446:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUT_GPIO_Port, &GPIO_InitStruct);
 8000448:	f107 0310 	add.w	r3, r7, #16
 800044c:	4619      	mov	r1, r3
 800044e:	4804      	ldr	r0, [pc, #16]	; (8000460 <MX_GPIO_Init+0xc4>)
 8000450:	f000 fc74 	bl	8000d3c <HAL_GPIO_Init>

}
 8000454:	bf00      	nop
 8000456:	3720      	adds	r7, #32
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	40021000 	.word	0x40021000
 8000460:	40011000 	.word	0x40011000

08000464 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000468:	f000 faf8 	bl	8000a5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800046c:	f000 f810 	bl	8000490 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000470:	f7ff ff94 	bl	800039c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000474:	f007 fcbe 	bl	8007df4 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8000478:	f000 fa54 	bl	8000924 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800047c:	f000 f868 	bl	8000550 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000480:	f000 f9da 	bl	8000838 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1);
 8000484:	4801      	ldr	r0, [pc, #4]	; (800048c <main+0x28>)
 8000486:	f003 f915 	bl	80036b4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800048a:	e7fe      	b.n	800048a <main+0x26>
 800048c:	2000024c 	.word	0x2000024c

08000490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b094      	sub	sp, #80	; 0x50
 8000494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000496:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800049a:	2228      	movs	r2, #40	; 0x28
 800049c:	2100      	movs	r1, #0
 800049e:	4618      	mov	r0, r3
 80004a0:	f008 fa0e 	bl	80088c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a4:	f107 0314 	add.w	r3, r7, #20
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	605a      	str	r2, [r3, #4]
 80004ae:	609a      	str	r2, [r3, #8]
 80004b0:	60da      	str	r2, [r3, #12]
 80004b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]
 80004bc:	609a      	str	r2, [r3, #8]
 80004be:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004c0:	2301      	movs	r3, #1
 80004c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004ca:	2300      	movs	r3, #0
 80004cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ce:	2301      	movs	r3, #1
 80004d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004d2:	2302      	movs	r3, #2
 80004d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80004e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004e6:	4618      	mov	r0, r3
 80004e8:	f002 fb4a 	bl	8002b80 <HAL_RCC_OscConfig>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80004f2:	f000 f828 	bl	8000546 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f6:	230f      	movs	r3, #15
 80004f8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004fa:	2302      	movs	r3, #2
 80004fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004fe:	2300      	movs	r3, #0
 8000500:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000506:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000508:	2300      	movs	r3, #0
 800050a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800050c:	f107 0314 	add.w	r3, r7, #20
 8000510:	2101      	movs	r1, #1
 8000512:	4618      	mov	r0, r3
 8000514:	f002 fdb6 	bl	8003084 <HAL_RCC_ClockConfig>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800051e:	f000 f812 	bl	8000546 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000522:	2310      	movs	r3, #16
 8000524:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000526:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800052a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	4618      	mov	r0, r3
 8000530:	f002 ff36 	bl	80033a0 <HAL_RCCEx_PeriphCLKConfig>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800053a:	f000 f804 	bl	8000546 <Error_Handler>
  }
}
 800053e:	bf00      	nop
 8000540:	3750      	adds	r7, #80	; 0x50
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}

08000546 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800054a:	b672      	cpsid	i
}
 800054c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800054e:	e7fe      	b.n	800054e <Error_Handler+0x8>

08000550 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000554:	4b17      	ldr	r3, [pc, #92]	; (80005b4 <MX_SPI1_Init+0x64>)
 8000556:	4a18      	ldr	r2, [pc, #96]	; (80005b8 <MX_SPI1_Init+0x68>)
 8000558:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800055a:	4b16      	ldr	r3, [pc, #88]	; (80005b4 <MX_SPI1_Init+0x64>)
 800055c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000560:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000562:	4b14      	ldr	r3, [pc, #80]	; (80005b4 <MX_SPI1_Init+0x64>)
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000568:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <MX_SPI1_Init+0x64>)
 800056a:	2200      	movs	r2, #0
 800056c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800056e:	4b11      	ldr	r3, [pc, #68]	; (80005b4 <MX_SPI1_Init+0x64>)
 8000570:	2200      	movs	r2, #0
 8000572:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000574:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <MX_SPI1_Init+0x64>)
 8000576:	2200      	movs	r2, #0
 8000578:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800057a:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <MX_SPI1_Init+0x64>)
 800057c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000580:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000582:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <MX_SPI1_Init+0x64>)
 8000584:	2230      	movs	r2, #48	; 0x30
 8000586:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000588:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <MX_SPI1_Init+0x64>)
 800058a:	2200      	movs	r2, #0
 800058c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800058e:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <MX_SPI1_Init+0x64>)
 8000590:	2200      	movs	r2, #0
 8000592:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000594:	4b07      	ldr	r3, [pc, #28]	; (80005b4 <MX_SPI1_Init+0x64>)
 8000596:	2200      	movs	r2, #0
 8000598:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <MX_SPI1_Init+0x64>)
 800059c:	220a      	movs	r2, #10
 800059e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005a0:	4804      	ldr	r0, [pc, #16]	; (80005b4 <MX_SPI1_Init+0x64>)
 80005a2:	f002 ffb3 	bl	800350c <HAL_SPI_Init>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80005ac:	f7ff ffcb 	bl	8000546 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	200001e8 	.word	0x200001e8
 80005b8:	40013000 	.word	0x40013000

080005bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08a      	sub	sp, #40	; 0x28
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c4:	f107 0314 	add.w	r3, r7, #20
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a1c      	ldr	r2, [pc, #112]	; (8000648 <HAL_SPI_MspInit+0x8c>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d131      	bne.n	8000640 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005dc:	4b1b      	ldr	r3, [pc, #108]	; (800064c <HAL_SPI_MspInit+0x90>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	4a1a      	ldr	r2, [pc, #104]	; (800064c <HAL_SPI_MspInit+0x90>)
 80005e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005e6:	6193      	str	r3, [r2, #24]
 80005e8:	4b18      	ldr	r3, [pc, #96]	; (800064c <HAL_SPI_MspInit+0x90>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005f0:	613b      	str	r3, [r7, #16]
 80005f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <HAL_SPI_MspInit+0x90>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a14      	ldr	r2, [pc, #80]	; (800064c <HAL_SPI_MspInit+0x90>)
 80005fa:	f043 0308 	orr.w	r3, r3, #8
 80005fe:	6193      	str	r3, [r2, #24]
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <HAL_SPI_MspInit+0x90>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	f003 0308 	and.w	r3, r3, #8
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800060c:	2328      	movs	r3, #40	; 0x28
 800060e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000610:	2302      	movs	r3, #2
 8000612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000614:	2303      	movs	r3, #3
 8000616:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	4619      	mov	r1, r3
 800061e:	480c      	ldr	r0, [pc, #48]	; (8000650 <HAL_SPI_MspInit+0x94>)
 8000620:	f000 fb8c 	bl	8000d3c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8000624:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <HAL_SPI_MspInit+0x98>)
 8000626:	685b      	ldr	r3, [r3, #4]
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
 800062a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800062c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
 8000632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	627b      	str	r3, [r7, #36]	; 0x24
 800063a:	4a06      	ldr	r2, [pc, #24]	; (8000654 <HAL_SPI_MspInit+0x98>)
 800063c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800063e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000640:	bf00      	nop
 8000642:	3728      	adds	r7, #40	; 0x28
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40013000 	.word	0x40013000
 800064c:	40021000 	.word	0x40021000
 8000650:	40010c00 	.word	0x40010c00
 8000654:	40010000 	.word	0x40010000

08000658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800065e:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <HAL_MspInit+0x5c>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	4a14      	ldr	r2, [pc, #80]	; (80006b4 <HAL_MspInit+0x5c>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6193      	str	r3, [r2, #24]
 800066a:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <HAL_MspInit+0x5c>)
 800066c:	699b      	ldr	r3, [r3, #24]
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000676:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <HAL_MspInit+0x5c>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	4a0e      	ldr	r2, [pc, #56]	; (80006b4 <HAL_MspInit+0x5c>)
 800067c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000680:	61d3      	str	r3, [r2, #28]
 8000682:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <HAL_MspInit+0x5c>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800068e:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <HAL_MspInit+0x60>)
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	4a04      	ldr	r2, [pc, #16]	; (80006b8 <HAL_MspInit+0x60>)
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006aa:	bf00      	nop
 80006ac:	3714      	adds	r7, #20
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr
 80006b4:	40021000 	.word	0x40021000
 80006b8:	40010000 	.word	0x40010000

080006bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006c0:	e7fe      	b.n	80006c0 <NMI_Handler+0x4>

080006c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c6:	e7fe      	b.n	80006c6 <HardFault_Handler+0x4>

080006c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006cc:	e7fe      	b.n	80006cc <MemManage_Handler+0x4>

080006ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006d2:	e7fe      	b.n	80006d2 <BusFault_Handler+0x4>

080006d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <UsageFault_Handler+0x4>

080006da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr

080006e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ea:	bf00      	nop
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr

080006f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f6:	bf00      	nop
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc80      	pop	{r7}
 80006fc:	4770      	bx	lr

080006fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000702:	f000 f9f1 	bl	8000ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000710:	4802      	ldr	r0, [pc, #8]	; (800071c <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000712:	f000 fdeb 	bl	80012ec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000fac 	.word	0x20000fac

08000720 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000724:	4802      	ldr	r0, [pc, #8]	; (8000730 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000726:	f000 fde1 	bl	80012ec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000fac 	.word	0x20000fac

08000734 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000734:	b598      	push	{r3, r4, r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	if (!init_flag){
 8000738:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <TIM1_UP_IRQHandler+0x70>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d109      	bne.n	8000754 <TIM1_UP_IRQHandler+0x20>
		button = buttonInit(0.05, 500);
 8000740:	4919      	ldr	r1, [pc, #100]	; (80007a8 <TIM1_UP_IRQHandler+0x74>)
 8000742:	481a      	ldr	r0, [pc, #104]	; (80007ac <TIM1_UP_IRQHandler+0x78>)
 8000744:	f7ff fdd6 	bl	80002f4 <buttonInit>
 8000748:	4603      	mov	r3, r0
 800074a:	4a19      	ldr	r2, [pc, #100]	; (80007b0 <TIM1_UP_IRQHandler+0x7c>)
 800074c:	6013      	str	r3, [r2, #0]
		init_flag = 1;
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <TIM1_UP_IRQHandler+0x70>)
 8000750:	2201      	movs	r2, #1
 8000752:	701a      	strb	r2, [r3, #0]
	}

	button_state = !getDebouncedButton(button, HAL_GPIO_ReadPin(BUT_GPIO_Port, BUT_Pin));
 8000754:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <TIM1_UP_IRQHandler+0x7c>)
 8000756:	681c      	ldr	r4, [r3, #0]
 8000758:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800075c:	4815      	ldr	r0, [pc, #84]	; (80007b4 <TIM1_UP_IRQHandler+0x80>)
 800075e:	f000 fc71 	bl	8001044 <HAL_GPIO_ReadPin>
 8000762:	4603      	mov	r3, r0
 8000764:	4619      	mov	r1, r3
 8000766:	4620      	mov	r0, r4
 8000768:	f7ff fdde 	bl	8000328 <getDebouncedButton>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	bf0c      	ite	eq
 8000772:	2301      	moveq	r3, #1
 8000774:	2300      	movne	r3, #0
 8000776:	b2db      	uxtb	r3, r3
 8000778:	461a      	mov	r2, r3
 800077a:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <TIM1_UP_IRQHandler+0x84>)
 800077c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, !button_state);
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <TIM1_UP_IRQHandler+0x84>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	bf0c      	ite	eq
 8000786:	2301      	moveq	r3, #1
 8000788:	2300      	movne	r3, #0
 800078a:	b2db      	uxtb	r3, r3
 800078c:	461a      	mov	r2, r3
 800078e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000792:	4808      	ldr	r0, [pc, #32]	; (80007b4 <TIM1_UP_IRQHandler+0x80>)
 8000794:	f000 fc6d 	bl	8001072 <HAL_GPIO_WritePin>

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000798:	4808      	ldr	r0, [pc, #32]	; (80007bc <TIM1_UP_IRQHandler+0x88>)
 800079a:	f002 ffdd 	bl	8003758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	bd98      	pop	{r3, r4, r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000244 	.word	0x20000244
 80007a8:	43fa0000 	.word	0x43fa0000
 80007ac:	3d4ccccd 	.word	0x3d4ccccd
 80007b0:	20000240 	.word	0x20000240
 80007b4:	40011000 	.word	0x40011000
 80007b8:	20000245 	.word	0x20000245
 80007bc:	2000024c 	.word	0x2000024c

080007c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007c8:	4a14      	ldr	r2, [pc, #80]	; (800081c <_sbrk+0x5c>)
 80007ca:	4b15      	ldr	r3, [pc, #84]	; (8000820 <_sbrk+0x60>)
 80007cc:	1ad3      	subs	r3, r2, r3
 80007ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007d4:	4b13      	ldr	r3, [pc, #76]	; (8000824 <_sbrk+0x64>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d102      	bne.n	80007e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <_sbrk+0x64>)
 80007de:	4a12      	ldr	r2, [pc, #72]	; (8000828 <_sbrk+0x68>)
 80007e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <_sbrk+0x64>)
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4413      	add	r3, r2
 80007ea:	693a      	ldr	r2, [r7, #16]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d207      	bcs.n	8000800 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007f0:	f008 f87e 	bl	80088f0 <__errno>
 80007f4:	4603      	mov	r3, r0
 80007f6:	220c      	movs	r2, #12
 80007f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007fa:	f04f 33ff 	mov.w	r3, #4294967295
 80007fe:	e009      	b.n	8000814 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <_sbrk+0x64>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000806:	4b07      	ldr	r3, [pc, #28]	; (8000824 <_sbrk+0x64>)
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4413      	add	r3, r2
 800080e:	4a05      	ldr	r2, [pc, #20]	; (8000824 <_sbrk+0x64>)
 8000810:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000812:	68fb      	ldr	r3, [r7, #12]
}
 8000814:	4618      	mov	r0, r3
 8000816:	3718      	adds	r7, #24
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20005000 	.word	0x20005000
 8000820:	00000400 	.word	0x00000400
 8000824:	20000248 	.word	0x20000248
 8000828:	20001608 	.word	0x20001608

0800082c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr

08000838 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800083e:	f107 0308 	add.w	r3, r7, #8
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800084c:	463b      	mov	r3, r7
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000854:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <MX_TIM1_Init+0x98>)
 8000856:	4a1f      	ldr	r2, [pc, #124]	; (80008d4 <MX_TIM1_Init+0x9c>)
 8000858:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000-1;
 800085a:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <MX_TIM1_Init+0x98>)
 800085c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000860:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000862:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <MX_TIM1_Init+0x98>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 96-1;
 8000868:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <MX_TIM1_Init+0x98>)
 800086a:	225f      	movs	r2, #95	; 0x5f
 800086c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800086e:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <MX_TIM1_Init+0x98>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000874:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <MX_TIM1_Init+0x98>)
 8000876:	2200      	movs	r2, #0
 8000878:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087a:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <MX_TIM1_Init+0x98>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000880:	4813      	ldr	r0, [pc, #76]	; (80008d0 <MX_TIM1_Init+0x98>)
 8000882:	f002 fec7 	bl	8003614 <HAL_TIM_Base_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800088c:	f7ff fe5b 	bl	8000546 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000894:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000896:	f107 0308 	add.w	r3, r7, #8
 800089a:	4619      	mov	r1, r3
 800089c:	480c      	ldr	r0, [pc, #48]	; (80008d0 <MX_TIM1_Init+0x98>)
 800089e:	f003 f863 	bl	8003968 <HAL_TIM_ConfigClockSource>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80008a8:	f7ff fe4d 	bl	8000546 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ac:	2300      	movs	r3, #0
 80008ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008b4:	463b      	mov	r3, r7
 80008b6:	4619      	mov	r1, r3
 80008b8:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_TIM1_Init+0x98>)
 80008ba:	f003 fa41 	bl	8003d40 <HAL_TIMEx_MasterConfigSynchronization>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80008c4:	f7ff fe3f 	bl	8000546 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	3718      	adds	r7, #24
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	2000024c 	.word	0x2000024c
 80008d4:	40012c00 	.word	0x40012c00

080008d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a0d      	ldr	r2, [pc, #52]	; (800091c <HAL_TIM_Base_MspInit+0x44>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d113      	bne.n	8000912 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008ea:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <HAL_TIM_Base_MspInit+0x48>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	4a0c      	ldr	r2, [pc, #48]	; (8000920 <HAL_TIM_Base_MspInit+0x48>)
 80008f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008f4:	6193      	str	r3, [r2, #24]
 80008f6:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <HAL_TIM_Base_MspInit+0x48>)
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	2019      	movs	r0, #25
 8000908:	f000 f9e1 	bl	8000cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800090c:	2019      	movs	r0, #25
 800090e:	f000 f9fa 	bl	8000d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000912:	bf00      	nop
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40012c00 	.word	0x40012c00
 8000920:	40021000 	.word	0x40021000

08000924 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 800092a:	4a12      	ldr	r2, [pc, #72]	; (8000974 <MX_USART1_UART_Init+0x50>)
 800092c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 8000930:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000934:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 800094a:	220c      	movs	r2, #12
 800094c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_USART1_UART_Init+0x4c>)
 800095c:	f003 fa60 	bl	8003e20 <HAL_UART_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000966:	f7ff fdee 	bl	8000546 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000294 	.word	0x20000294
 8000974:	40013800 	.word	0x40013800

08000978 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b088      	sub	sp, #32
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0310 	add.w	r3, r7, #16
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a1c      	ldr	r2, [pc, #112]	; (8000a04 <HAL_UART_MspInit+0x8c>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d131      	bne.n	80009fc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000998:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <HAL_UART_MspInit+0x90>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	4a1a      	ldr	r2, [pc, #104]	; (8000a08 <HAL_UART_MspInit+0x90>)
 800099e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a2:	6193      	str	r3, [r2, #24]
 80009a4:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <HAL_UART_MspInit+0x90>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b0:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <HAL_UART_MspInit+0x90>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	4a14      	ldr	r2, [pc, #80]	; (8000a08 <HAL_UART_MspInit+0x90>)
 80009b6:	f043 0304 	orr.w	r3, r3, #4
 80009ba:	6193      	str	r3, [r2, #24]
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <HAL_UART_MspInit+0x90>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	f003 0304 	and.w	r3, r3, #4
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d2:	2303      	movs	r3, #3
 80009d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	f107 0310 	add.w	r3, r7, #16
 80009da:	4619      	mov	r1, r3
 80009dc:	480b      	ldr	r0, [pc, #44]	; (8000a0c <HAL_UART_MspInit+0x94>)
 80009de:	f000 f9ad 	bl	8000d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f0:	f107 0310 	add.w	r3, r7, #16
 80009f4:	4619      	mov	r1, r3
 80009f6:	4805      	ldr	r0, [pc, #20]	; (8000a0c <HAL_UART_MspInit+0x94>)
 80009f8:	f000 f9a0 	bl	8000d3c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80009fc:	bf00      	nop
 80009fe:	3720      	adds	r7, #32
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40013800 	.word	0x40013800
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	40010800 	.word	0x40010800

08000a10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a10:	f7ff ff0c 	bl	800082c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a14:	480b      	ldr	r0, [pc, #44]	; (8000a44 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a16:	490c      	ldr	r1, [pc, #48]	; (8000a48 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a18:	4a0c      	ldr	r2, [pc, #48]	; (8000a4c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a1c:	e002      	b.n	8000a24 <LoopCopyDataInit>

08000a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a22:	3304      	adds	r3, #4

08000a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a28:	d3f9      	bcc.n	8000a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2a:	4a09      	ldr	r2, [pc, #36]	; (8000a50 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a2c:	4c09      	ldr	r4, [pc, #36]	; (8000a54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a30:	e001      	b.n	8000a36 <LoopFillZerobss>

08000a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a34:	3204      	adds	r2, #4

08000a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a38:	d3fb      	bcc.n	8000a32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a3a:	f007 ff5f 	bl	80088fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a3e:	f7ff fd11 	bl	8000464 <main>
  bx lr
 8000a42:	4770      	bx	lr
  ldr r0, =_sdata
 8000a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a48:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8000a4c:	080089dc 	.word	0x080089dc
  ldr r2, =_sbss
 8000a50:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8000a54:	20001604 	.word	0x20001604

08000a58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a58:	e7fe      	b.n	8000a58 <ADC1_2_IRQHandler>
	...

08000a5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a60:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <HAL_Init+0x28>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a07      	ldr	r2, [pc, #28]	; (8000a84 <HAL_Init+0x28>)
 8000a66:	f043 0310 	orr.w	r3, r3, #16
 8000a6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a6c:	2003      	movs	r0, #3
 8000a6e:	f000 f923 	bl	8000cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a72:	200f      	movs	r0, #15
 8000a74:	f000 f808 	bl	8000a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a78:	f7ff fdee 	bl	8000658 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40022000 	.word	0x40022000

08000a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <HAL_InitTick+0x54>)
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <HAL_InitTick+0x58>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	4619      	mov	r1, r3
 8000a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 f93b 	bl	8000d22 <HAL_SYSTICK_Config>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e00e      	b.n	8000ad4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2b0f      	cmp	r3, #15
 8000aba:	d80a      	bhi.n	8000ad2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000abc:	2200      	movs	r2, #0
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	f000 f903 	bl	8000cce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac8:	4a06      	ldr	r2, [pc, #24]	; (8000ae4 <HAL_InitTick+0x5c>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e000      	b.n	8000ad4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000000 	.word	0x20000000
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	20000004 	.word	0x20000004

08000ae8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aec:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <HAL_IncTick+0x1c>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <HAL_IncTick+0x20>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4413      	add	r3, r2
 8000af8:	4a03      	ldr	r2, [pc, #12]	; (8000b08 <HAL_IncTick+0x20>)
 8000afa:	6013      	str	r3, [r2, #0]
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr
 8000b04:	20000008 	.word	0x20000008
 8000b08:	200002dc 	.word	0x200002dc

08000b0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b10:	4b02      	ldr	r3, [pc, #8]	; (8000b1c <HAL_GetTick+0x10>)
 8000b12:	681b      	ldr	r3, [r3, #0]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr
 8000b1c:	200002dc 	.word	0x200002dc

08000b20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f003 0307 	and.w	r3, r3, #7
 8000b2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <__NVIC_SetPriorityGrouping+0x44>)
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b36:	68ba      	ldr	r2, [r7, #8]
 8000b38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b52:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <__NVIC_SetPriorityGrouping+0x44>)
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	60d3      	str	r3, [r2, #12]
}
 8000b58:	bf00      	nop
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b6c:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <__NVIC_GetPriorityGrouping+0x18>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	0a1b      	lsrs	r3, r3, #8
 8000b72:	f003 0307 	and.w	r3, r3, #7
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	db0b      	blt.n	8000bae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	f003 021f 	and.w	r2, r3, #31
 8000b9c:	4906      	ldr	r1, [pc, #24]	; (8000bb8 <__NVIC_EnableIRQ+0x34>)
 8000b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba2:	095b      	lsrs	r3, r3, #5
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8000baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr
 8000bb8:	e000e100 	.word	0xe000e100

08000bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	db0a      	blt.n	8000be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	490c      	ldr	r1, [pc, #48]	; (8000c08 <__NVIC_SetPriority+0x4c>)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	0112      	lsls	r2, r2, #4
 8000bdc:	b2d2      	uxtb	r2, r2
 8000bde:	440b      	add	r3, r1
 8000be0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be4:	e00a      	b.n	8000bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	4908      	ldr	r1, [pc, #32]	; (8000c0c <__NVIC_SetPriority+0x50>)
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	f003 030f 	and.w	r3, r3, #15
 8000bf2:	3b04      	subs	r3, #4
 8000bf4:	0112      	lsls	r2, r2, #4
 8000bf6:	b2d2      	uxtb	r2, r2
 8000bf8:	440b      	add	r3, r1
 8000bfa:	761a      	strb	r2, [r3, #24]
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000e100 	.word	0xe000e100
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b089      	sub	sp, #36	; 0x24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	f1c3 0307 	rsb	r3, r3, #7
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	bf28      	it	cs
 8000c2e:	2304      	movcs	r3, #4
 8000c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3304      	adds	r3, #4
 8000c36:	2b06      	cmp	r3, #6
 8000c38:	d902      	bls.n	8000c40 <NVIC_EncodePriority+0x30>
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3b03      	subs	r3, #3
 8000c3e:	e000      	b.n	8000c42 <NVIC_EncodePriority+0x32>
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	f04f 32ff 	mov.w	r2, #4294967295
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	43da      	mvns	r2, r3
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	401a      	ands	r2, r3
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c58:	f04f 31ff 	mov.w	r1, #4294967295
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c62:	43d9      	mvns	r1, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	4313      	orrs	r3, r2
         );
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3724      	adds	r7, #36	; 0x24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c84:	d301      	bcc.n	8000c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c86:	2301      	movs	r3, #1
 8000c88:	e00f      	b.n	8000caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <SysTick_Config+0x40>)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c92:	210f      	movs	r1, #15
 8000c94:	f04f 30ff 	mov.w	r0, #4294967295
 8000c98:	f7ff ff90 	bl	8000bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <SysTick_Config+0x40>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca2:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <SysTick_Config+0x40>)
 8000ca4:	2207      	movs	r2, #7
 8000ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	e000e010 	.word	0xe000e010

08000cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff ff2d 	bl	8000b20 <__NVIC_SetPriorityGrouping>
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b086      	sub	sp, #24
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	60b9      	str	r1, [r7, #8]
 8000cd8:	607a      	str	r2, [r7, #4]
 8000cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce0:	f7ff ff42 	bl	8000b68 <__NVIC_GetPriorityGrouping>
 8000ce4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	68b9      	ldr	r1, [r7, #8]
 8000cea:	6978      	ldr	r0, [r7, #20]
 8000cec:	f7ff ff90 	bl	8000c10 <NVIC_EncodePriority>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ff5f 	bl	8000bbc <__NVIC_SetPriority>
}
 8000cfe:	bf00      	nop
 8000d00:	3718      	adds	r7, #24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ff35 	bl	8000b84 <__NVIC_EnableIRQ>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f7ff ffa2 	bl	8000c74 <SysTick_Config>
 8000d30:	4603      	mov	r3, r0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b08b      	sub	sp, #44	; 0x2c
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d46:	2300      	movs	r3, #0
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d4e:	e169      	b.n	8001024 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d50:	2201      	movs	r2, #1
 8000d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	69fa      	ldr	r2, [r7, #28]
 8000d60:	4013      	ands	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	f040 8158 	bne.w	800101e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	4a9a      	ldr	r2, [pc, #616]	; (8000fdc <HAL_GPIO_Init+0x2a0>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d05e      	beq.n	8000e36 <HAL_GPIO_Init+0xfa>
 8000d78:	4a98      	ldr	r2, [pc, #608]	; (8000fdc <HAL_GPIO_Init+0x2a0>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d875      	bhi.n	8000e6a <HAL_GPIO_Init+0x12e>
 8000d7e:	4a98      	ldr	r2, [pc, #608]	; (8000fe0 <HAL_GPIO_Init+0x2a4>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d058      	beq.n	8000e36 <HAL_GPIO_Init+0xfa>
 8000d84:	4a96      	ldr	r2, [pc, #600]	; (8000fe0 <HAL_GPIO_Init+0x2a4>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d86f      	bhi.n	8000e6a <HAL_GPIO_Init+0x12e>
 8000d8a:	4a96      	ldr	r2, [pc, #600]	; (8000fe4 <HAL_GPIO_Init+0x2a8>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d052      	beq.n	8000e36 <HAL_GPIO_Init+0xfa>
 8000d90:	4a94      	ldr	r2, [pc, #592]	; (8000fe4 <HAL_GPIO_Init+0x2a8>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d869      	bhi.n	8000e6a <HAL_GPIO_Init+0x12e>
 8000d96:	4a94      	ldr	r2, [pc, #592]	; (8000fe8 <HAL_GPIO_Init+0x2ac>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d04c      	beq.n	8000e36 <HAL_GPIO_Init+0xfa>
 8000d9c:	4a92      	ldr	r2, [pc, #584]	; (8000fe8 <HAL_GPIO_Init+0x2ac>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d863      	bhi.n	8000e6a <HAL_GPIO_Init+0x12e>
 8000da2:	4a92      	ldr	r2, [pc, #584]	; (8000fec <HAL_GPIO_Init+0x2b0>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d046      	beq.n	8000e36 <HAL_GPIO_Init+0xfa>
 8000da8:	4a90      	ldr	r2, [pc, #576]	; (8000fec <HAL_GPIO_Init+0x2b0>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d85d      	bhi.n	8000e6a <HAL_GPIO_Init+0x12e>
 8000dae:	2b12      	cmp	r3, #18
 8000db0:	d82a      	bhi.n	8000e08 <HAL_GPIO_Init+0xcc>
 8000db2:	2b12      	cmp	r3, #18
 8000db4:	d859      	bhi.n	8000e6a <HAL_GPIO_Init+0x12e>
 8000db6:	a201      	add	r2, pc, #4	; (adr r2, 8000dbc <HAL_GPIO_Init+0x80>)
 8000db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dbc:	08000e37 	.word	0x08000e37
 8000dc0:	08000e11 	.word	0x08000e11
 8000dc4:	08000e23 	.word	0x08000e23
 8000dc8:	08000e65 	.word	0x08000e65
 8000dcc:	08000e6b 	.word	0x08000e6b
 8000dd0:	08000e6b 	.word	0x08000e6b
 8000dd4:	08000e6b 	.word	0x08000e6b
 8000dd8:	08000e6b 	.word	0x08000e6b
 8000ddc:	08000e6b 	.word	0x08000e6b
 8000de0:	08000e6b 	.word	0x08000e6b
 8000de4:	08000e6b 	.word	0x08000e6b
 8000de8:	08000e6b 	.word	0x08000e6b
 8000dec:	08000e6b 	.word	0x08000e6b
 8000df0:	08000e6b 	.word	0x08000e6b
 8000df4:	08000e6b 	.word	0x08000e6b
 8000df8:	08000e6b 	.word	0x08000e6b
 8000dfc:	08000e6b 	.word	0x08000e6b
 8000e00:	08000e19 	.word	0x08000e19
 8000e04:	08000e2d 	.word	0x08000e2d
 8000e08:	4a79      	ldr	r2, [pc, #484]	; (8000ff0 <HAL_GPIO_Init+0x2b4>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d013      	beq.n	8000e36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e0e:	e02c      	b.n	8000e6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	623b      	str	r3, [r7, #32]
          break;
 8000e16:	e029      	b.n	8000e6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	623b      	str	r3, [r7, #32]
          break;
 8000e20:	e024      	b.n	8000e6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	68db      	ldr	r3, [r3, #12]
 8000e26:	3308      	adds	r3, #8
 8000e28:	623b      	str	r3, [r7, #32]
          break;
 8000e2a:	e01f      	b.n	8000e6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	330c      	adds	r3, #12
 8000e32:	623b      	str	r3, [r7, #32]
          break;
 8000e34:	e01a      	b.n	8000e6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d102      	bne.n	8000e44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e3e:	2304      	movs	r3, #4
 8000e40:	623b      	str	r3, [r7, #32]
          break;
 8000e42:	e013      	b.n	8000e6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d105      	bne.n	8000e58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e4c:	2308      	movs	r3, #8
 8000e4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	69fa      	ldr	r2, [r7, #28]
 8000e54:	611a      	str	r2, [r3, #16]
          break;
 8000e56:	e009      	b.n	8000e6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e58:	2308      	movs	r3, #8
 8000e5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	69fa      	ldr	r2, [r7, #28]
 8000e60:	615a      	str	r2, [r3, #20]
          break;
 8000e62:	e003      	b.n	8000e6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e64:	2300      	movs	r3, #0
 8000e66:	623b      	str	r3, [r7, #32]
          break;
 8000e68:	e000      	b.n	8000e6c <HAL_GPIO_Init+0x130>
          break;
 8000e6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	2bff      	cmp	r3, #255	; 0xff
 8000e70:	d801      	bhi.n	8000e76 <HAL_GPIO_Init+0x13a>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	e001      	b.n	8000e7a <HAL_GPIO_Init+0x13e>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	2bff      	cmp	r3, #255	; 0xff
 8000e80:	d802      	bhi.n	8000e88 <HAL_GPIO_Init+0x14c>
 8000e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	e002      	b.n	8000e8e <HAL_GPIO_Init+0x152>
 8000e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8a:	3b08      	subs	r3, #8
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	210f      	movs	r1, #15
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	6a39      	ldr	r1, [r7, #32]
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea8:	431a      	orrs	r2, r3
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	f000 80b1 	beq.w	800101e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ebc:	4b4d      	ldr	r3, [pc, #308]	; (8000ff4 <HAL_GPIO_Init+0x2b8>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	4a4c      	ldr	r2, [pc, #304]	; (8000ff4 <HAL_GPIO_Init+0x2b8>)
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	6193      	str	r3, [r2, #24]
 8000ec8:	4b4a      	ldr	r3, [pc, #296]	; (8000ff4 <HAL_GPIO_Init+0x2b8>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ed4:	4a48      	ldr	r2, [pc, #288]	; (8000ff8 <HAL_GPIO_Init+0x2bc>)
 8000ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed8:	089b      	lsrs	r3, r3, #2
 8000eda:	3302      	adds	r3, #2
 8000edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee4:	f003 0303 	and.w	r3, r3, #3
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	220f      	movs	r2, #15
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a40      	ldr	r2, [pc, #256]	; (8000ffc <HAL_GPIO_Init+0x2c0>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d013      	beq.n	8000f28 <HAL_GPIO_Init+0x1ec>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a3f      	ldr	r2, [pc, #252]	; (8001000 <HAL_GPIO_Init+0x2c4>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d00d      	beq.n	8000f24 <HAL_GPIO_Init+0x1e8>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a3e      	ldr	r2, [pc, #248]	; (8001004 <HAL_GPIO_Init+0x2c8>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d007      	beq.n	8000f20 <HAL_GPIO_Init+0x1e4>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a3d      	ldr	r2, [pc, #244]	; (8001008 <HAL_GPIO_Init+0x2cc>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d101      	bne.n	8000f1c <HAL_GPIO_Init+0x1e0>
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e006      	b.n	8000f2a <HAL_GPIO_Init+0x1ee>
 8000f1c:	2304      	movs	r3, #4
 8000f1e:	e004      	b.n	8000f2a <HAL_GPIO_Init+0x1ee>
 8000f20:	2302      	movs	r3, #2
 8000f22:	e002      	b.n	8000f2a <HAL_GPIO_Init+0x1ee>
 8000f24:	2301      	movs	r3, #1
 8000f26:	e000      	b.n	8000f2a <HAL_GPIO_Init+0x1ee>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f2c:	f002 0203 	and.w	r2, r2, #3
 8000f30:	0092      	lsls	r2, r2, #2
 8000f32:	4093      	lsls	r3, r2
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f3a:	492f      	ldr	r1, [pc, #188]	; (8000ff8 <HAL_GPIO_Init+0x2bc>)
 8000f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3e:	089b      	lsrs	r3, r3, #2
 8000f40:	3302      	adds	r3, #2
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d006      	beq.n	8000f62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f54:	4b2d      	ldr	r3, [pc, #180]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	492c      	ldr	r1, [pc, #176]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	608b      	str	r3, [r1, #8]
 8000f60:	e006      	b.n	8000f70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f62:	4b2a      	ldr	r3, [pc, #168]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000f64:	689a      	ldr	r2, [r3, #8]
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	4928      	ldr	r1, [pc, #160]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d006      	beq.n	8000f8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f7c:	4b23      	ldr	r3, [pc, #140]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000f7e:	68da      	ldr	r2, [r3, #12]
 8000f80:	4922      	ldr	r1, [pc, #136]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	60cb      	str	r3, [r1, #12]
 8000f88:	e006      	b.n	8000f98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f8a:	4b20      	ldr	r3, [pc, #128]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000f8c:	68da      	ldr	r2, [r3, #12]
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	43db      	mvns	r3, r3
 8000f92:	491e      	ldr	r1, [pc, #120]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000f94:	4013      	ands	r3, r2
 8000f96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d006      	beq.n	8000fb2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fa4:	4b19      	ldr	r3, [pc, #100]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000fa6:	685a      	ldr	r2, [r3, #4]
 8000fa8:	4918      	ldr	r1, [pc, #96]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	604b      	str	r3, [r1, #4]
 8000fb0:	e006      	b.n	8000fc0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fb2:	4b16      	ldr	r3, [pc, #88]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000fb4:	685a      	ldr	r2, [r3, #4]
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	4914      	ldr	r1, [pc, #80]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d021      	beq.n	8001010 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	490e      	ldr	r1, [pc, #56]	; (800100c <HAL_GPIO_Init+0x2d0>)
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	600b      	str	r3, [r1, #0]
 8000fd8:	e021      	b.n	800101e <HAL_GPIO_Init+0x2e2>
 8000fda:	bf00      	nop
 8000fdc:	10320000 	.word	0x10320000
 8000fe0:	10310000 	.word	0x10310000
 8000fe4:	10220000 	.word	0x10220000
 8000fe8:	10210000 	.word	0x10210000
 8000fec:	10120000 	.word	0x10120000
 8000ff0:	10110000 	.word	0x10110000
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	40010000 	.word	0x40010000
 8000ffc:	40010800 	.word	0x40010800
 8001000:	40010c00 	.word	0x40010c00
 8001004:	40011000 	.word	0x40011000
 8001008:	40011400 	.word	0x40011400
 800100c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001010:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <HAL_GPIO_Init+0x304>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	43db      	mvns	r3, r3
 8001018:	4909      	ldr	r1, [pc, #36]	; (8001040 <HAL_GPIO_Init+0x304>)
 800101a:	4013      	ands	r3, r2
 800101c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800101e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001020:	3301      	adds	r3, #1
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102a:	fa22 f303 	lsr.w	r3, r2, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	f47f ae8e 	bne.w	8000d50 <HAL_GPIO_Init+0x14>
  }
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	372c      	adds	r7, #44	; 0x2c
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr
 8001040:	40010400 	.word	0x40010400

08001044 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689a      	ldr	r2, [r3, #8]
 8001054:	887b      	ldrh	r3, [r7, #2]
 8001056:	4013      	ands	r3, r2
 8001058:	2b00      	cmp	r3, #0
 800105a:	d002      	beq.n	8001062 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800105c:	2301      	movs	r3, #1
 800105e:	73fb      	strb	r3, [r7, #15]
 8001060:	e001      	b.n	8001066 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001062:	2300      	movs	r3, #0
 8001064:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001066:	7bfb      	ldrb	r3, [r7, #15]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr

08001072 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	460b      	mov	r3, r1
 800107c:	807b      	strh	r3, [r7, #2]
 800107e:	4613      	mov	r3, r2
 8001080:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001082:	787b      	ldrb	r3, [r7, #1]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d003      	beq.n	8001090 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001088:	887a      	ldrh	r2, [r7, #2]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800108e:	e003      	b.n	8001098 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001090:	887b      	ldrh	r3, [r7, #2]
 8001092:	041a      	lsls	r2, r3, #16
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	611a      	str	r2, [r3, #16]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr

080010a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010a4:	b08b      	sub	sp, #44	; 0x2c
 80010a6:	af06      	add	r7, sp, #24
 80010a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d101      	bne.n	80010b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e0f1      	b.n	8001298 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d106      	bne.n	80010ce <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f007 f893 	bl	80081f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2203      	movs	r2, #3
 80010d2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f002 ffa4 	bl	8004028 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	603b      	str	r3, [r7, #0]
 80010e6:	687e      	ldr	r6, [r7, #4]
 80010e8:	466d      	mov	r5, sp
 80010ea:	f106 0410 	add.w	r4, r6, #16
 80010ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010f2:	6823      	ldr	r3, [r4, #0]
 80010f4:	602b      	str	r3, [r5, #0]
 80010f6:	1d33      	adds	r3, r6, #4
 80010f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010fa:	6838      	ldr	r0, [r7, #0]
 80010fc:	f002 ff6e 	bl	8003fdc <USB_CoreInit>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d005      	beq.n	8001112 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2202      	movs	r2, #2
 800110a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e0c2      	b.n	8001298 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f002 ff9f 	bl	800405c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800111e:	2300      	movs	r3, #0
 8001120:	73fb      	strb	r3, [r7, #15]
 8001122:	e040      	b.n	80011a6 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	1c5a      	adds	r2, r3, #1
 800112a:	4613      	mov	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4413      	add	r3, r2
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	440b      	add	r3, r1
 8001134:	3301      	adds	r3, #1
 8001136:	2201      	movs	r2, #1
 8001138:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	6879      	ldr	r1, [r7, #4]
 800113e:	1c5a      	adds	r2, r3, #1
 8001140:	4613      	mov	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	440b      	add	r3, r1
 800114a:	7bfa      	ldrb	r2, [r7, #15]
 800114c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	6879      	ldr	r1, [r7, #4]
 8001152:	1c5a      	adds	r2, r3, #1
 8001154:	4613      	mov	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	440b      	add	r3, r1
 800115e:	3303      	adds	r3, #3
 8001160:	2200      	movs	r2, #0
 8001162:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001164:	7bfa      	ldrb	r2, [r7, #15]
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	4613      	mov	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	440b      	add	r3, r1
 8001172:	3338      	adds	r3, #56	; 0x38
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001178:	7bfa      	ldrb	r2, [r7, #15]
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	4613      	mov	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	440b      	add	r3, r1
 8001186:	333c      	adds	r3, #60	; 0x3c
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800118c:	7bfa      	ldrb	r2, [r7, #15]
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	4613      	mov	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	4413      	add	r3, r2
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	440b      	add	r3, r1
 800119a:	3340      	adds	r3, #64	; 0x40
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	3301      	adds	r3, #1
 80011a4:	73fb      	strb	r3, [r7, #15]
 80011a6:	7bfa      	ldrb	r2, [r7, #15]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d3b9      	bcc.n	8001124 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011b0:	2300      	movs	r3, #0
 80011b2:	73fb      	strb	r3, [r7, #15]
 80011b4:	e044      	b.n	8001240 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011b6:	7bfa      	ldrb	r2, [r7, #15]
 80011b8:	6879      	ldr	r1, [r7, #4]
 80011ba:	4613      	mov	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	440b      	add	r3, r1
 80011c4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011cc:	7bfa      	ldrb	r2, [r7, #15]
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	4613      	mov	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4413      	add	r3, r2
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	440b      	add	r3, r1
 80011da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80011de:	7bfa      	ldrb	r2, [r7, #15]
 80011e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011e2:	7bfa      	ldrb	r2, [r7, #15]
 80011e4:	6879      	ldr	r1, [r7, #4]
 80011e6:	4613      	mov	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4413      	add	r3, r2
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	440b      	add	r3, r1
 80011f0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011f8:	7bfa      	ldrb	r2, [r7, #15]
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	4613      	mov	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	440b      	add	r3, r1
 8001206:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800120e:	7bfa      	ldrb	r2, [r7, #15]
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	4613      	mov	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4413      	add	r3, r2
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	440b      	add	r3, r1
 800121c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001224:	7bfa      	ldrb	r2, [r7, #15]
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	4613      	mov	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4413      	add	r3, r2
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	440b      	add	r3, r1
 8001232:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800123a:	7bfb      	ldrb	r3, [r7, #15]
 800123c:	3301      	adds	r3, #1
 800123e:	73fb      	strb	r3, [r7, #15]
 8001240:	7bfa      	ldrb	r2, [r7, #15]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	429a      	cmp	r2, r3
 8001248:	d3b5      	bcc.n	80011b6 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	603b      	str	r3, [r7, #0]
 8001250:	687e      	ldr	r6, [r7, #4]
 8001252:	466d      	mov	r5, sp
 8001254:	f106 0410 	add.w	r4, r6, #16
 8001258:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800125a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800125c:	6823      	ldr	r3, [r4, #0]
 800125e:	602b      	str	r3, [r5, #0]
 8001260:	1d33      	adds	r3, r6, #4
 8001262:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001264:	6838      	ldr	r0, [r7, #0]
 8001266:	f002 ff05 	bl	8004074 <USB_DevInit>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d005      	beq.n	800127c <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2202      	movs	r2, #2
 8001274:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e00d      	b.n	8001298 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2201      	movs	r2, #1
 8001288:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f005 f986 	bl	80065a2 <USB_DevDisconnect>

  return HAL_OK;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012a0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d101      	bne.n	80012b6 <HAL_PCD_Start+0x16>
 80012b2:	2302      	movs	r3, #2
 80012b4:	e016      	b.n	80012e4 <HAL_PCD_Start+0x44>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2201      	movs	r2, #1
 80012ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f002 fe9a 	bl	8003ffc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80012c8:	2101      	movs	r1, #1
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f007 fa0d 	bl	80086ea <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f005 f95a 	bl	800658e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f005 f95c 	bl	80065b6 <USB_ReadInterrupts>
 80012fe:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f000 fb1b 	bl	8001946 <PCD_EP_ISR_Handler>

    return;
 8001310:	e119      	b.n	8001546 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001318:	2b00      	cmp	r3, #0
 800131a:	d013      	beq.n	8001344 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001324:	b29a      	uxth	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800132e:	b292      	uxth	r2, r2
 8001330:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f006 ffe0 	bl	80082fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800133a:	2100      	movs	r1, #0
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f000 f905 	bl	800154c <HAL_PCD_SetAddress>

    return;
 8001342:	e100      	b.n	8001546 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00c      	beq.n	8001368 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001356:	b29a      	uxth	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001360:	b292      	uxth	r2, r2
 8001362:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001366:	e0ee      	b.n	8001546 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d00c      	beq.n	800138c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800137a:	b29a      	uxth	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001384:	b292      	uxth	r2, r2
 8001386:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800138a:	e0dc      	b.n	8001546 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d027      	beq.n	80013e6 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800139e:	b29a      	uxth	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f022 0204 	bic.w	r2, r2, #4
 80013a8:	b292      	uxth	r2, r2
 80013aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 0208 	bic.w	r2, r2, #8
 80013c0:	b292      	uxth	r2, r2
 80013c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f006 ffd0 	bl	800836c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80013de:	b292      	uxth	r2, r2
 80013e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80013e4:	e0af      	b.n	8001546 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 8083 	beq.w	80014f8 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80013f2:	2300      	movs	r3, #0
 80013f4:	77fb      	strb	r3, [r7, #31]
 80013f6:	e010      	b.n	800141a <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	7ffb      	ldrb	r3, [r7, #31]
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	441a      	add	r2, r3
 8001404:	7ffb      	ldrb	r3, [r7, #31]
 8001406:	8812      	ldrh	r2, [r2, #0]
 8001408:	b292      	uxth	r2, r2
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	3320      	adds	r3, #32
 800140e:	443b      	add	r3, r7
 8001410:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001414:	7ffb      	ldrb	r3, [r7, #31]
 8001416:	3301      	adds	r3, #1
 8001418:	77fb      	strb	r3, [r7, #31]
 800141a:	7ffb      	ldrb	r3, [r7, #31]
 800141c:	2b07      	cmp	r3, #7
 800141e:	d9eb      	bls.n	80013f8 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001428:	b29a      	uxth	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f042 0201 	orr.w	r2, r2, #1
 8001432:	b292      	uxth	r2, r2
 8001434:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001440:	b29a      	uxth	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f022 0201 	bic.w	r2, r2, #1
 800144a:	b292      	uxth	r2, r2
 800144c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001450:	bf00      	nop
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800145a:	b29b      	uxth	r3, r3
 800145c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0f6      	beq.n	8001452 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800146c:	b29a      	uxth	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001476:	b292      	uxth	r2, r2
 8001478:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800147c:	2300      	movs	r3, #0
 800147e:	77fb      	strb	r3, [r7, #31]
 8001480:	e00f      	b.n	80014a2 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001482:	7ffb      	ldrb	r3, [r7, #31]
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	6812      	ldr	r2, [r2, #0]
 8001488:	4611      	mov	r1, r2
 800148a:	7ffa      	ldrb	r2, [r7, #31]
 800148c:	0092      	lsls	r2, r2, #2
 800148e:	440a      	add	r2, r1
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	3320      	adds	r3, #32
 8001494:	443b      	add	r3, r7
 8001496:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800149a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800149c:	7ffb      	ldrb	r3, [r7, #31]
 800149e:	3301      	adds	r3, #1
 80014a0:	77fb      	strb	r3, [r7, #31]
 80014a2:	7ffb      	ldrb	r3, [r7, #31]
 80014a4:	2b07      	cmp	r3, #7
 80014a6:	d9ec      	bls.n	8001482 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f042 0208 	orr.w	r2, r2, #8
 80014ba:	b292      	uxth	r2, r2
 80014bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014d2:	b292      	uxth	r2, r2
 80014d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f042 0204 	orr.w	r2, r2, #4
 80014ea:	b292      	uxth	r2, r2
 80014ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f006 ff21 	bl	8008338 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80014f6:	e026      	b.n	8001546 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d00f      	beq.n	8001522 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800150a:	b29a      	uxth	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001514:	b292      	uxth	r2, r2
 8001516:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f006 fedf 	bl	80082de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001520:	e011      	b.n	8001546 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001528:	2b00      	cmp	r3, #0
 800152a:	d00c      	beq.n	8001546 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001534:	b29a      	uxth	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800153e:	b292      	uxth	r2, r2
 8001540:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001544:	bf00      	nop
  }
}
 8001546:	3720      	adds	r7, #32
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800155e:	2b01      	cmp	r3, #1
 8001560:	d101      	bne.n	8001566 <HAL_PCD_SetAddress+0x1a>
 8001562:	2302      	movs	r3, #2
 8001564:	e013      	b.n	800158e <HAL_PCD_SetAddress+0x42>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2201      	movs	r2, #1
 800156a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	78fa      	ldrb	r2, [r7, #3]
 8001572:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	78fa      	ldrb	r2, [r7, #3]
 800157c:	4611      	mov	r1, r2
 800157e:	4618      	mov	r0, r3
 8001580:	f004 fff2 	bl	8006568 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b084      	sub	sp, #16
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
 800159e:	4608      	mov	r0, r1
 80015a0:	4611      	mov	r1, r2
 80015a2:	461a      	mov	r2, r3
 80015a4:	4603      	mov	r3, r0
 80015a6:	70fb      	strb	r3, [r7, #3]
 80015a8:	460b      	mov	r3, r1
 80015aa:	803b      	strh	r3, [r7, #0]
 80015ac:	4613      	mov	r3, r2
 80015ae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80015b0:	2300      	movs	r3, #0
 80015b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80015b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	da0e      	bge.n	80015da <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015bc:	78fb      	ldrb	r3, [r7, #3]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	1c5a      	adds	r2, r3, #1
 80015c4:	4613      	mov	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	4413      	add	r3, r2
 80015d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2201      	movs	r2, #1
 80015d6:	705a      	strb	r2, [r3, #1]
 80015d8:	e00e      	b.n	80015f8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015da:	78fb      	ldrb	r3, [r7, #3]
 80015dc:	f003 0207 	and.w	r2, r3, #7
 80015e0:	4613      	mov	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	4413      	add	r3, r2
 80015f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2200      	movs	r2, #0
 80015f6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80015f8:	78fb      	ldrb	r3, [r7, #3]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001604:	883a      	ldrh	r2, [r7, #0]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	78ba      	ldrb	r2, [r7, #2]
 800160e:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001610:	78bb      	ldrb	r3, [r7, #2]
 8001612:	2b02      	cmp	r3, #2
 8001614:	d102      	bne.n	800161c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2200      	movs	r2, #0
 800161a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001622:	2b01      	cmp	r3, #1
 8001624:	d101      	bne.n	800162a <HAL_PCD_EP_Open+0x94>
 8001626:	2302      	movs	r3, #2
 8001628:	e00e      	b.n	8001648 <HAL_PCD_EP_Open+0xb2>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68f9      	ldr	r1, [r7, #12]
 8001638:	4618      	mov	r0, r3
 800163a:	f002 fd3b 	bl	80040b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001646:	7afb      	ldrb	r3, [r7, #11]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800165c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001660:	2b00      	cmp	r3, #0
 8001662:	da0e      	bge.n	8001682 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001664:	78fb      	ldrb	r3, [r7, #3]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	1c5a      	adds	r2, r3, #1
 800166c:	4613      	mov	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	4413      	add	r3, r2
 8001678:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2201      	movs	r2, #1
 800167e:	705a      	strb	r2, [r3, #1]
 8001680:	e00e      	b.n	80016a0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001682:	78fb      	ldrb	r3, [r7, #3]
 8001684:	f003 0207 	and.w	r2, r3, #7
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	4413      	add	r3, r2
 8001698:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2200      	movs	r2, #0
 800169e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80016a0:	78fb      	ldrb	r3, [r7, #3]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d101      	bne.n	80016ba <HAL_PCD_EP_Close+0x6a>
 80016b6:	2302      	movs	r3, #2
 80016b8:	e00e      	b.n	80016d8 <HAL_PCD_EP_Close+0x88>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2201      	movs	r2, #1
 80016be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68f9      	ldr	r1, [r7, #12]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f003 f8b3 	bl	8004834 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	607a      	str	r2, [r7, #4]
 80016ea:	603b      	str	r3, [r7, #0]
 80016ec:	460b      	mov	r3, r1
 80016ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016f0:	7afb      	ldrb	r3, [r7, #11]
 80016f2:	f003 0207 	and.w	r2, r3, #7
 80016f6:	4613      	mov	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	4413      	add	r3, r2
 8001706:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	2200      	movs	r2, #0
 8001718:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	2200      	movs	r2, #0
 800171e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001720:	7afb      	ldrb	r3, [r7, #11]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	b2da      	uxtb	r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6979      	ldr	r1, [r7, #20]
 8001732:	4618      	mov	r0, r3
 8001734:	f003 fa6a 	bl	8004c0c <USB_EPStartXfer>

  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
 800174a:	460b      	mov	r3, r1
 800174c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800174e:	78fb      	ldrb	r3, [r7, #3]
 8001750:	f003 0207 	and.w	r2, r3, #7
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	440b      	add	r3, r1
 8001760:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001764:	681b      	ldr	r3, [r3, #0]
}
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr

08001770 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	607a      	str	r2, [r7, #4]
 800177a:	603b      	str	r3, [r7, #0]
 800177c:	460b      	mov	r3, r1
 800177e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001780:	7afb      	ldrb	r3, [r7, #11]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	4413      	add	r3, r2
 8001794:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	2201      	movs	r2, #1
 80017a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	2200      	movs	r2, #0
 80017b4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	2201      	movs	r2, #1
 80017ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017bc:	7afb      	ldrb	r3, [r7, #11]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6979      	ldr	r1, [r7, #20]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f003 fa1c 	bl	8004c0c <USB_EPStartXfer>

  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b084      	sub	sp, #16
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	460b      	mov	r3, r1
 80017e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80017ea:	78fb      	ldrb	r3, [r7, #3]
 80017ec:	f003 0207 	and.w	r2, r3, #7
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d901      	bls.n	80017fc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e04c      	b.n	8001896 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80017fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001800:	2b00      	cmp	r3, #0
 8001802:	da0e      	bge.n	8001822 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001804:	78fb      	ldrb	r3, [r7, #3]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	1c5a      	adds	r2, r3, #1
 800180c:	4613      	mov	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	4413      	add	r3, r2
 8001818:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2201      	movs	r2, #1
 800181e:	705a      	strb	r2, [r3, #1]
 8001820:	e00c      	b.n	800183c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001822:	78fa      	ldrb	r2, [r7, #3]
 8001824:	4613      	mov	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	4413      	add	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2200      	movs	r2, #0
 800183a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2201      	movs	r2, #1
 8001840:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001842:	78fb      	ldrb	r3, [r7, #3]
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	b2da      	uxtb	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001854:	2b01      	cmp	r3, #1
 8001856:	d101      	bne.n	800185c <HAL_PCD_EP_SetStall+0x7e>
 8001858:	2302      	movs	r3, #2
 800185a:	e01c      	b.n	8001896 <HAL_PCD_EP_SetStall+0xb8>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68f9      	ldr	r1, [r7, #12]
 800186a:	4618      	mov	r0, r3
 800186c:	f004 fd7f 	bl	800636e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001870:	78fb      	ldrb	r3, [r7, #3]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	2b00      	cmp	r3, #0
 8001878:	d108      	bne.n	800188c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001884:	4619      	mov	r1, r3
 8001886:	4610      	mov	r0, r2
 8001888:	f004 fea4 	bl	80065d4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b084      	sub	sp, #16
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	460b      	mov	r3, r1
 80018a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80018aa:	78fb      	ldrb	r3, [r7, #3]
 80018ac:	f003 020f 	and.w	r2, r3, #15
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d901      	bls.n	80018bc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e040      	b.n	800193e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80018bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	da0e      	bge.n	80018e2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018c4:	78fb      	ldrb	r3, [r7, #3]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	1c5a      	adds	r2, r3, #1
 80018cc:	4613      	mov	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	4413      	add	r3, r2
 80018d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2201      	movs	r2, #1
 80018de:	705a      	strb	r2, [r3, #1]
 80018e0:	e00e      	b.n	8001900 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018e2:	78fb      	ldrb	r3, [r7, #3]
 80018e4:	f003 0207 	and.w	r2, r3, #7
 80018e8:	4613      	mov	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	4413      	add	r3, r2
 80018f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2200      	movs	r2, #0
 80018fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2200      	movs	r2, #0
 8001904:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001906:	78fb      	ldrb	r3, [r7, #3]
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	b2da      	uxtb	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001918:	2b01      	cmp	r3, #1
 800191a:	d101      	bne.n	8001920 <HAL_PCD_EP_ClrStall+0x82>
 800191c:	2302      	movs	r3, #2
 800191e:	e00e      	b.n	800193e <HAL_PCD_EP_ClrStall+0xa0>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68f9      	ldr	r1, [r7, #12]
 800192e:	4618      	mov	r0, r3
 8001930:	f004 fd6d 	bl	800640e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b096      	sub	sp, #88	; 0x58
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800194e:	e3bf      	b.n	80020d0 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001958:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800195c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001960:	b2db      	uxtb	r3, r3
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800196a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800196e:	2b00      	cmp	r3, #0
 8001970:	f040 8179 	bne.w	8001c66 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001974:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001978:	f003 0310 	and.w	r3, r3, #16
 800197c:	2b00      	cmp	r3, #0
 800197e:	d152      	bne.n	8001a26 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	b29b      	uxth	r3, r3
 8001988:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800198c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001990:	81fb      	strh	r3, [r7, #14]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	89fb      	ldrh	r3, [r7, #14]
 8001998:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800199c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3328      	adds	r3, #40	; 0x28
 80019a8:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	461a      	mov	r2, r3
 80019b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	4413      	add	r3, r2
 80019be:	3302      	adds	r3, #2
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6812      	ldr	r2, [r2, #0]
 80019c6:	4413      	add	r3, r2
 80019c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019d4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80019d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019d8:	695a      	ldr	r2, [r3, #20]
 80019da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	441a      	add	r2, r3
 80019e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019e2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80019e4:	2100      	movs	r1, #0
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f006 fc5f 	bl	80082aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 836b 	beq.w	80020d0 <PCD_EP_ISR_Handler+0x78a>
 80019fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f040 8366 	bne.w	80020d0 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	b292      	uxth	r2, r2
 8001a18:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001a24:	e354      	b.n	80020d0 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a2c:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001a38:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d034      	beq.n	8001aae <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	461a      	mov	r2, r3
 8001a50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	4413      	add	r3, r2
 8001a58:	3306      	adds	r3, #6
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6812      	ldr	r2, [r2, #0]
 8001a60:	4413      	add	r3, r2
 8001a62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a6e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6818      	ldr	r0, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a7c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a80:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	f004 fdf6 	bl	8006674 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a94:	4013      	ands	r3, r2
 8001a96:	823b      	strh	r3, [r7, #16]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	8a3a      	ldrh	r2, [r7, #16]
 8001a9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001aa2:	b292      	uxth	r2, r2
 8001aa4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f006 fbd2 	bl	8008250 <HAL_PCD_SetupStageCallback>
 8001aac:	e310      	b.n	80020d0 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001aae:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f280 830c 	bge.w	80020d0 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	881b      	ldrh	r3, [r3, #0]
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	83fb      	strh	r3, [r7, #30]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	8bfa      	ldrh	r2, [r7, #30]
 8001ace:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ad2:	b292      	uxth	r2, r2
 8001ad4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	4413      	add	r3, r2
 8001aea:	3306      	adds	r3, #6
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6812      	ldr	r2, [r2, #0]
 8001af2:	4413      	add	r3, r2
 8001af4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001af8:	881b      	ldrh	r3, [r3, #0]
 8001afa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001afe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b00:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001b02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d019      	beq.n	8001b3e <PCD_EP_ISR_Handler+0x1f8>
 8001b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d015      	beq.n	8001b3e <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6818      	ldr	r0, [r3, #0]
 8001b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b18:	6959      	ldr	r1, [r3, #20]
 8001b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b1c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b20:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	f004 fda6 	bl	8006674 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001b28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b2a:	695a      	ldr	r2, [r3, #20]
 8001b2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	441a      	add	r2, r3
 8001b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b34:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001b36:	2100      	movs	r1, #0
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f006 fb9b 	bl	8008274 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001b48:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f040 82bd 	bne.w	80020d0 <PCD_EP_ISR_Handler+0x78a>
 8001b56:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b5a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001b5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001b62:	f000 82b5 	beq.w	80020d0 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	61bb      	str	r3, [r7, #24]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	461a      	mov	r2, r3
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	801a      	strh	r2, [r3, #0]
 8001b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	2b3e      	cmp	r3, #62	; 0x3e
 8001b9c:	d91d      	bls.n	8001bda <PCD_EP_ISR_Handler+0x294>
 8001b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	095b      	lsrs	r3, r3, #5
 8001ba4:	647b      	str	r3, [r7, #68]	; 0x44
 8001ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	f003 031f 	and.w	r3, r3, #31
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d102      	bne.n	8001bb8 <PCD_EP_ISR_Handler+0x272>
 8001bb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	647b      	str	r3, [r7, #68]	; 0x44
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	029b      	lsls	r3, r3, #10
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	801a      	strh	r2, [r3, #0]
 8001bd8:	e026      	b.n	8001c28 <PCD_EP_ISR_Handler+0x2e2>
 8001bda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10a      	bne.n	8001bf8 <PCD_EP_ISR_Handler+0x2b2>
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	801a      	strh	r2, [r3, #0]
 8001bf6:	e017      	b.n	8001c28 <PCD_EP_ISR_Handler+0x2e2>
 8001bf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	085b      	lsrs	r3, r3, #1
 8001bfe:	647b      	str	r3, [r7, #68]	; 0x44
 8001c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d002      	beq.n	8001c12 <PCD_EP_ISR_Handler+0x2cc>
 8001c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c0e:	3301      	adds	r3, #1
 8001c10:	647b      	str	r3, [r7, #68]	; 0x44
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	029b      	lsls	r3, r3, #10
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	4313      	orrs	r3, r2
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c38:	827b      	strh	r3, [r7, #18]
 8001c3a:	8a7b      	ldrh	r3, [r7, #18]
 8001c3c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001c40:	827b      	strh	r3, [r7, #18]
 8001c42:	8a7b      	ldrh	r3, [r7, #18]
 8001c44:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001c48:	827b      	strh	r3, [r7, #18]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	8a7b      	ldrh	r3, [r7, #18]
 8001c50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	8013      	strh	r3, [r2, #0]
 8001c64:	e234      	b.n	80020d0 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	881b      	ldrh	r3, [r3, #0]
 8001c76:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c7a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f280 80fc 	bge.w	8001e7c <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4413      	add	r3, r2
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001cb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cb6:	b292      	uxth	r2, r2
 8001cb8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001cba:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	4413      	add	r3, r2
 8001cce:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001cd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cd2:	7b1b      	ldrb	r3, [r3, #12]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d125      	bne.n	8001d24 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	4413      	add	r3, r2
 8001cec:	3306      	adds	r3, #6
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6812      	ldr	r2, [r2, #0]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d00:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001d04:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f000 8092 	beq.w	8001e32 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6818      	ldr	r0, [r3, #0]
 8001d12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d14:	6959      	ldr	r1, [r3, #20]
 8001d16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d18:	88da      	ldrh	r2, [r3, #6]
 8001d1a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d1e:	f004 fca9 	bl	8006674 <USB_ReadPMA>
 8001d22:	e086      	b.n	8001e32 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d26:	78db      	ldrb	r3, [r3, #3]
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d10a      	bne.n	8001d42 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001d2c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d30:	461a      	mov	r2, r3
 8001d32:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f9d9 	bl	80020ec <HAL_PCD_EP_DB_Receive>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001d40:	e077      	b.n	8001e32 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	461a      	mov	r2, r3
 8001d48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d5c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	461a      	mov	r2, r3
 8001d66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	441a      	add	r2, r3
 8001d6e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001d72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d024      	beq.n	8001dea <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	461a      	mov	r2, r3
 8001dac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	4413      	add	r3, r2
 8001db4:	3302      	adds	r3, #2
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dc2:	881b      	ldrh	r3, [r3, #0]
 8001dc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dc8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001dcc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d02e      	beq.n	8001e32 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6818      	ldr	r0, [r3, #0]
 8001dd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dda:	6959      	ldr	r1, [r3, #20]
 8001ddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dde:	891a      	ldrh	r2, [r3, #8]
 8001de0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001de4:	f004 fc46 	bl	8006674 <USB_ReadPMA>
 8001de8:	e023      	b.n	8001e32 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	461a      	mov	r2, r3
 8001df6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3306      	adds	r3, #6
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6812      	ldr	r2, [r2, #0]
 8001e06:	4413      	add	r3, r2
 8001e08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e0c:	881b      	ldrh	r3, [r3, #0]
 8001e0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e12:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001e16:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d009      	beq.n	8001e32 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6818      	ldr	r0, [r3, #0]
 8001e22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e24:	6959      	ldr	r1, [r3, #20]
 8001e26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e28:	895a      	ldrh	r2, [r3, #10]
 8001e2a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e2e:	f004 fc21 	bl	8006674 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001e32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e34:	69da      	ldr	r2, [r3, #28]
 8001e36:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e3a:	441a      	add	r2, r3
 8001e3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e3e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001e40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e42:	695a      	ldr	r2, [r3, #20]
 8001e44:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e48:	441a      	add	r2, r3
 8001e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e4c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d005      	beq.n	8001e62 <PCD_EP_ISR_Handler+0x51c>
 8001e56:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d206      	bcs.n	8001e70 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001e62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	4619      	mov	r1, r3
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f006 fa03 	bl	8008274 <HAL_PCD_DataOutStageCallback>
 8001e6e:	e005      	b.n	8001e7c <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001e76:	4618      	mov	r0, r3
 8001e78:	f002 fec8 	bl	8004c0c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001e7c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 8123 	beq.w	80020d0 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001e8a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001e8e:	1c5a      	adds	r2, r3, #1
 8001e90:	4613      	mov	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eb8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	441a      	add	r2, r3
 8001eca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001ece:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ed2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001eda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001edc:	78db      	ldrb	r3, [r3, #3]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	f040 80a2 	bne.w	8002028 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8001ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001eea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eec:	7b1b      	ldrb	r3, [r3, #12]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 8093 	beq.w	800201a <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ef4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d046      	beq.n	8001f8e <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f02:	785b      	ldrb	r3, [r3, #1]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d126      	bne.n	8001f56 <PCD_EP_ISR_Handler+0x610>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	461a      	mov	r2, r3
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	4413      	add	r3, r2
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	011a      	lsls	r2, r3, #4
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	4413      	add	r3, r2
 8001f2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001f2e:	623b      	str	r3, [r7, #32]
 8001f30:	6a3b      	ldr	r3, [r7, #32]
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	6a3b      	ldr	r3, [r7, #32]
 8001f3e:	801a      	strh	r2, [r3, #0]
 8001f40:	6a3b      	ldr	r3, [r7, #32]
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	6a3b      	ldr	r3, [r7, #32]
 8001f52:	801a      	strh	r2, [r3, #0]
 8001f54:	e061      	b.n	800201a <PCD_EP_ISR_Handler+0x6d4>
 8001f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f58:	785b      	ldrb	r3, [r3, #1]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d15d      	bne.n	800201a <PCD_EP_ISR_Handler+0x6d4>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	461a      	mov	r2, r3
 8001f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f72:	4413      	add	r3, r2
 8001f74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	011a      	lsls	r2, r3, #4
 8001f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f7e:	4413      	add	r3, r2
 8001f80:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f88:	2200      	movs	r2, #0
 8001f8a:	801a      	strh	r2, [r3, #0]
 8001f8c:	e045      	b.n	800201a <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f96:	785b      	ldrb	r3, [r3, #1]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d126      	bne.n	8001fea <PCD_EP_ISR_Handler+0x6a4>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	637b      	str	r3, [r7, #52]	; 0x34
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	461a      	mov	r2, r3
 8001fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fb0:	4413      	add	r3, r2
 8001fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8001fb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	011a      	lsls	r2, r3, #4
 8001fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001fc2:	633b      	str	r3, [r7, #48]	; 0x30
 8001fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd2:	801a      	strh	r2, [r3, #0]
 8001fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe6:	801a      	strh	r2, [r3, #0]
 8001fe8:	e017      	b.n	800201a <PCD_EP_ISR_Handler+0x6d4>
 8001fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fec:	785b      	ldrb	r3, [r3, #1]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d113      	bne.n	800201a <PCD_EP_ISR_Handler+0x6d4>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002000:	4413      	add	r3, r2
 8002002:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002004:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	011a      	lsls	r2, r3, #4
 800200a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800200c:	4413      	add	r3, r2
 800200e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002012:	63bb      	str	r3, [r7, #56]	; 0x38
 8002014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002016:	2200      	movs	r2, #0
 8002018:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800201a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	4619      	mov	r1, r3
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f006 f942 	bl	80082aa <HAL_PCD_DataInStageCallback>
 8002026:	e053      	b.n	80020d0 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002028:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800202c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002030:	2b00      	cmp	r3, #0
 8002032:	d146      	bne.n	80020c2 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800203c:	b29b      	uxth	r3, r3
 800203e:	461a      	mov	r2, r3
 8002040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4413      	add	r3, r2
 8002048:	3302      	adds	r3, #2
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	4413      	add	r3, r2
 8002052:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800205c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002062:	699a      	ldr	r2, [r3, #24]
 8002064:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002068:	429a      	cmp	r2, r3
 800206a:	d907      	bls.n	800207c <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 800206c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800206e:	699a      	ldr	r2, [r3, #24]
 8002070:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002074:	1ad2      	subs	r2, r2, r3
 8002076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002078:	619a      	str	r2, [r3, #24]
 800207a:	e002      	b.n	8002082 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 800207c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800207e:	2200      	movs	r2, #0
 8002080:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002082:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d106      	bne.n	8002098 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800208a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	4619      	mov	r1, r3
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f006 f90a 	bl	80082aa <HAL_PCD_DataInStageCallback>
 8002096:	e01b      	b.n	80020d0 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002098:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800209a:	695a      	ldr	r2, [r3, #20]
 800209c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80020a0:	441a      	add	r2, r3
 80020a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020a4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80020a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020a8:	69da      	ldr	r2, [r3, #28]
 80020aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80020ae:	441a      	add	r2, r3
 80020b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020b2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80020ba:	4618      	mov	r0, r3
 80020bc:	f002 fda6 	bl	8004c0c <USB_EPStartXfer>
 80020c0:	e006      	b.n	80020d0 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80020c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80020c6:	461a      	mov	r2, r3
 80020c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f91b 	bl	8002306 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020d8:	b29b      	uxth	r3, r3
 80020da:	b21b      	sxth	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f6ff ac37 	blt.w	8001950 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3758      	adds	r7, #88	; 0x58
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	4613      	mov	r3, r2
 80020f8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80020fa:	88fb      	ldrh	r3, [r7, #6]
 80020fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d07e      	beq.n	8002202 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800210c:	b29b      	uxth	r3, r3
 800210e:	461a      	mov	r2, r3
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	4413      	add	r3, r2
 8002118:	3302      	adds	r3, #2
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	6812      	ldr	r2, [r2, #0]
 8002120:	4413      	add	r3, r2
 8002122:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800212c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	699a      	ldr	r2, [r3, #24]
 8002132:	8b7b      	ldrh	r3, [r7, #26]
 8002134:	429a      	cmp	r2, r3
 8002136:	d306      	bcc.n	8002146 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	699a      	ldr	r2, [r3, #24]
 800213c:	8b7b      	ldrh	r3, [r7, #26]
 800213e:	1ad2      	subs	r2, r2, r3
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	619a      	str	r2, [r3, #24]
 8002144:	e002      	b.n	800214c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	2200      	movs	r2, #0
 800214a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d123      	bne.n	800219c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	461a      	mov	r2, r3
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	b29b      	uxth	r3, r3
 8002166:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800216a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800216e:	833b      	strh	r3, [r7, #24]
 8002170:	8b3b      	ldrh	r3, [r7, #24]
 8002172:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002176:	833b      	strh	r3, [r7, #24]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	461a      	mov	r2, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	441a      	add	r2, r3
 8002186:	8b3b      	ldrh	r3, [r7, #24]
 8002188:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800218c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002190:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002198:	b29b      	uxth	r3, r3
 800219a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800219c:	88fb      	ldrh	r3, [r7, #6]
 800219e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d01f      	beq.n	80021e6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021c0:	82fb      	strh	r3, [r7, #22]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	461a      	mov	r2, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	441a      	add	r2, r3
 80021d0:	8afb      	ldrh	r3, [r7, #22]
 80021d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80021e6:	8b7b      	ldrh	r3, [r7, #26]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 8087 	beq.w	80022fc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6818      	ldr	r0, [r3, #0]
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	6959      	ldr	r1, [r3, #20]
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	891a      	ldrh	r2, [r3, #8]
 80021fa:	8b7b      	ldrh	r3, [r7, #26]
 80021fc:	f004 fa3a 	bl	8006674 <USB_ReadPMA>
 8002200:	e07c      	b.n	80022fc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800220a:	b29b      	uxth	r3, r3
 800220c:	461a      	mov	r2, r3
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4413      	add	r3, r2
 8002216:	3306      	adds	r3, #6
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	6812      	ldr	r2, [r2, #0]
 800221e:	4413      	add	r3, r2
 8002220:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002224:	881b      	ldrh	r3, [r3, #0]
 8002226:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800222a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	699a      	ldr	r2, [r3, #24]
 8002230:	8b7b      	ldrh	r3, [r7, #26]
 8002232:	429a      	cmp	r2, r3
 8002234:	d306      	bcc.n	8002244 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	699a      	ldr	r2, [r3, #24]
 800223a:	8b7b      	ldrh	r3, [r7, #26]
 800223c:	1ad2      	subs	r2, r2, r3
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	619a      	str	r2, [r3, #24]
 8002242:	e002      	b.n	800224a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	2200      	movs	r2, #0
 8002248:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d123      	bne.n	800229a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	b29b      	uxth	r3, r3
 8002264:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800226c:	83fb      	strh	r3, [r7, #30]
 800226e:	8bfb      	ldrh	r3, [r7, #30]
 8002270:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002274:	83fb      	strh	r3, [r7, #30]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	441a      	add	r2, r3
 8002284:	8bfb      	ldrh	r3, [r7, #30]
 8002286:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800228a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800228e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002296:	b29b      	uxth	r3, r3
 8002298:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800229a:	88fb      	ldrh	r3, [r7, #6]
 800229c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d11f      	bne.n	80022e4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	461a      	mov	r2, r3
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022be:	83bb      	strh	r3, [r7, #28]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	461a      	mov	r2, r3
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	441a      	add	r2, r3
 80022ce:	8bbb      	ldrh	r3, [r7, #28]
 80022d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80022e4:	8b7b      	ldrh	r3, [r7, #26]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d008      	beq.n	80022fc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6818      	ldr	r0, [r3, #0]
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	6959      	ldr	r1, [r3, #20]
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	895a      	ldrh	r2, [r3, #10]
 80022f6:	8b7b      	ldrh	r3, [r7, #26]
 80022f8:	f004 f9bc 	bl	8006674 <USB_ReadPMA>
    }
  }

  return count;
 80022fc:	8b7b      	ldrh	r3, [r7, #26]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3720      	adds	r7, #32
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b0a4      	sub	sp, #144	; 0x90
 800230a:	af00      	add	r7, sp, #0
 800230c:	60f8      	str	r0, [r7, #12]
 800230e:	60b9      	str	r1, [r7, #8]
 8002310:	4613      	mov	r3, r2
 8002312:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002314:	88fb      	ldrh	r3, [r7, #6]
 8002316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 81dd 	beq.w	80026da <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002328:	b29b      	uxth	r3, r3
 800232a:	461a      	mov	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	4413      	add	r3, r2
 8002334:	3302      	adds	r3, #2
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	6812      	ldr	r2, [r2, #0]
 800233c:	4413      	add	r3, r2
 800233e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002348:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	699a      	ldr	r2, [r3, #24]
 8002350:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002354:	429a      	cmp	r2, r3
 8002356:	d907      	bls.n	8002368 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	699a      	ldr	r2, [r3, #24]
 800235c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002360:	1ad2      	subs	r2, r2, r3
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	619a      	str	r2, [r3, #24]
 8002366:	e002      	b.n	800236e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2200      	movs	r2, #0
 800236c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	2b00      	cmp	r3, #0
 8002374:	f040 80b9 	bne.w	80024ea <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	785b      	ldrb	r3, [r3, #1]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d126      	bne.n	80023ce <HAL_PCD_EP_DB_Transmit+0xc8>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800238e:	b29b      	uxth	r3, r3
 8002390:	461a      	mov	r2, r3
 8002392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002394:	4413      	add	r3, r2
 8002396:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	011a      	lsls	r2, r3, #4
 800239e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a0:	4413      	add	r3, r2
 80023a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80023a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80023a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023aa:	881b      	ldrh	r3, [r3, #0]
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b6:	801a      	strh	r2, [r3, #0]
 80023b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	b29b      	uxth	r3, r3
 80023be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ca:	801a      	strh	r2, [r3, #0]
 80023cc:	e01a      	b.n	8002404 <HAL_PCD_EP_DB_Transmit+0xfe>
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	785b      	ldrb	r3, [r3, #1]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d116      	bne.n	8002404 <HAL_PCD_EP_DB_Transmit+0xfe>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	637b      	str	r3, [r7, #52]	; 0x34
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	461a      	mov	r2, r3
 80023e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ea:	4413      	add	r3, r2
 80023ec:	637b      	str	r3, [r7, #52]	; 0x34
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	011a      	lsls	r2, r3, #4
 80023f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f6:	4413      	add	r3, r2
 80023f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80023fc:	633b      	str	r3, [r7, #48]	; 0x30
 80023fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002400:	2200      	movs	r2, #0
 8002402:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	785b      	ldrb	r3, [r3, #1]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d126      	bne.n	8002460 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	61fb      	str	r3, [r7, #28]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002420:	b29b      	uxth	r3, r3
 8002422:	461a      	mov	r2, r3
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	4413      	add	r3, r2
 8002428:	61fb      	str	r3, [r7, #28]
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	011a      	lsls	r2, r3, #4
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	4413      	add	r3, r2
 8002434:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002438:	61bb      	str	r3, [r7, #24]
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	b29b      	uxth	r3, r3
 8002440:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002444:	b29a      	uxth	r2, r3
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	801a      	strh	r2, [r3, #0]
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	881b      	ldrh	r3, [r3, #0]
 800244e:	b29b      	uxth	r3, r3
 8002450:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002454:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002458:	b29a      	uxth	r2, r3
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	801a      	strh	r2, [r3, #0]
 800245e:	e017      	b.n	8002490 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	785b      	ldrb	r3, [r3, #1]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d113      	bne.n	8002490 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002470:	b29b      	uxth	r3, r3
 8002472:	461a      	mov	r2, r3
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	4413      	add	r3, r2
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	011a      	lsls	r2, r3, #4
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	4413      	add	r3, r2
 8002484:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002488:	623b      	str	r3, [r7, #32]
 800248a:	6a3b      	ldr	r3, [r7, #32]
 800248c:	2200      	movs	r2, #0
 800248e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	4619      	mov	r1, r3
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f005 ff07 	bl	80082aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800249c:	88fb      	ldrh	r3, [r7, #6]
 800249e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 82fc 	beq.w	8002aa0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	461a      	mov	r2, r3
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	881b      	ldrh	r3, [r3, #0]
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024c2:	82fb      	strh	r3, [r7, #22]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	461a      	mov	r2, r3
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	441a      	add	r2, r3
 80024d2:	8afb      	ldrh	r3, [r7, #22]
 80024d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	8013      	strh	r3, [r2, #0]
 80024e8:	e2da      	b.n	8002aa0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80024ea:	88fb      	ldrh	r3, [r7, #6]
 80024ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d021      	beq.n	8002538 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	461a      	mov	r2, r3
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	881b      	ldrh	r3, [r3, #0]
 8002504:	b29b      	uxth	r3, r3
 8002506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800250a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800250e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	441a      	add	r2, r3
 8002520:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002524:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002528:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800252c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002534:	b29b      	uxth	r3, r3
 8002536:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800253e:	2b01      	cmp	r3, #1
 8002540:	f040 82ae 	bne.w	8002aa0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	695a      	ldr	r2, [r3, #20]
 8002548:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800254c:	441a      	add	r2, r3
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	69da      	ldr	r2, [r3, #28]
 8002556:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800255a:	441a      	add	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	6a1a      	ldr	r2, [r3, #32]
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	429a      	cmp	r2, r3
 800256a:	d30b      	bcc.n	8002584 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	6a1a      	ldr	r2, [r3, #32]
 8002578:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800257c:	1ad2      	subs	r2, r2, r3
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	621a      	str	r2, [r3, #32]
 8002582:	e017      	b.n	80025b4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d108      	bne.n	800259e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800258c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002590:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800259c:	e00a      	b.n	80025b4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2200      	movs	r2, #0
 80025b2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	785b      	ldrb	r3, [r3, #1]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d165      	bne.n	8002688 <HAL_PCD_EP_DB_Transmit+0x382>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	461a      	mov	r2, r3
 80025ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025d0:	4413      	add	r3, r2
 80025d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	011a      	lsls	r2, r3, #4
 80025da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025dc:	4413      	add	r3, r2
 80025de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80025e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e6:	881b      	ldrh	r3, [r3, #0]
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f2:	801a      	strh	r2, [r3, #0]
 80025f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025f8:	2b3e      	cmp	r3, #62	; 0x3e
 80025fa:	d91d      	bls.n	8002638 <HAL_PCD_EP_DB_Transmit+0x332>
 80025fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002600:	095b      	lsrs	r3, r3, #5
 8002602:	64bb      	str	r3, [r7, #72]	; 0x48
 8002604:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002608:	f003 031f 	and.w	r3, r3, #31
 800260c:	2b00      	cmp	r3, #0
 800260e:	d102      	bne.n	8002616 <HAL_PCD_EP_DB_Transmit+0x310>
 8002610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002612:	3b01      	subs	r3, #1
 8002614:	64bb      	str	r3, [r7, #72]	; 0x48
 8002616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	b29a      	uxth	r2, r3
 800261c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800261e:	b29b      	uxth	r3, r3
 8002620:	029b      	lsls	r3, r3, #10
 8002622:	b29b      	uxth	r3, r3
 8002624:	4313      	orrs	r3, r2
 8002626:	b29b      	uxth	r3, r3
 8002628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800262c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002630:	b29a      	uxth	r2, r3
 8002632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002634:	801a      	strh	r2, [r3, #0]
 8002636:	e044      	b.n	80026c2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002638:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10a      	bne.n	8002656 <HAL_PCD_EP_DB_Transmit+0x350>
 8002640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	b29b      	uxth	r3, r3
 8002646:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800264a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800264e:	b29a      	uxth	r2, r3
 8002650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002652:	801a      	strh	r2, [r3, #0]
 8002654:	e035      	b.n	80026c2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002656:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800265a:	085b      	lsrs	r3, r3, #1
 800265c:	64bb      	str	r3, [r7, #72]	; 0x48
 800265e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d002      	beq.n	8002670 <HAL_PCD_EP_DB_Transmit+0x36a>
 800266a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800266c:	3301      	adds	r3, #1
 800266e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	b29a      	uxth	r2, r3
 8002676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002678:	b29b      	uxth	r3, r3
 800267a:	029b      	lsls	r3, r3, #10
 800267c:	b29b      	uxth	r3, r3
 800267e:	4313      	orrs	r3, r2
 8002680:	b29a      	uxth	r2, r3
 8002682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002684:	801a      	strh	r2, [r3, #0]
 8002686:	e01c      	b.n	80026c2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	785b      	ldrb	r3, [r3, #1]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d118      	bne.n	80026c2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	647b      	str	r3, [r7, #68]	; 0x44
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800269e:	b29b      	uxth	r3, r3
 80026a0:	461a      	mov	r2, r3
 80026a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026a4:	4413      	add	r3, r2
 80026a6:	647b      	str	r3, [r7, #68]	; 0x44
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	011a      	lsls	r2, r3, #4
 80026ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026b0:	4413      	add	r3, r2
 80026b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026b6:	643b      	str	r3, [r7, #64]	; 0x40
 80026b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026bc:	b29a      	uxth	r2, r3
 80026be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026c0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6818      	ldr	r0, [r3, #0]
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	6959      	ldr	r1, [r3, #20]
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	891a      	ldrh	r2, [r3, #8]
 80026ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	f003 ff89 	bl	80065ea <USB_WritePMA>
 80026d8:	e1e2      	b.n	8002aa0 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	461a      	mov	r2, r3
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	4413      	add	r3, r2
 80026ee:	3306      	adds	r3, #6
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	6812      	ldr	r2, [r2, #0]
 80026f6:	4413      	add	r3, r2
 80026f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026fc:	881b      	ldrh	r3, [r3, #0]
 80026fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002702:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	699a      	ldr	r2, [r3, #24]
 800270a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800270e:	429a      	cmp	r2, r3
 8002710:	d307      	bcc.n	8002722 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	699a      	ldr	r2, [r3, #24]
 8002716:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800271a:	1ad2      	subs	r2, r2, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	619a      	str	r2, [r3, #24]
 8002720:	e002      	b.n	8002728 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2200      	movs	r2, #0
 8002726:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	2b00      	cmp	r3, #0
 800272e:	f040 80c0 	bne.w	80028b2 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	785b      	ldrb	r3, [r3, #1]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d126      	bne.n	8002788 <HAL_PCD_EP_DB_Transmit+0x482>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002748:	b29b      	uxth	r3, r3
 800274a:	461a      	mov	r2, r3
 800274c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800274e:	4413      	add	r3, r2
 8002750:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	011a      	lsls	r2, r3, #4
 8002758:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800275a:	4413      	add	r3, r2
 800275c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002760:	67bb      	str	r3, [r7, #120]	; 0x78
 8002762:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	b29b      	uxth	r3, r3
 8002768:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800276c:	b29a      	uxth	r2, r3
 800276e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002770:	801a      	strh	r2, [r3, #0]
 8002772:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002774:	881b      	ldrh	r3, [r3, #0]
 8002776:	b29b      	uxth	r3, r3
 8002778:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800277c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002780:	b29a      	uxth	r2, r3
 8002782:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002784:	801a      	strh	r2, [r3, #0]
 8002786:	e01a      	b.n	80027be <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	785b      	ldrb	r3, [r3, #1]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d116      	bne.n	80027be <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	667b      	str	r3, [r7, #100]	; 0x64
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800279e:	b29b      	uxth	r3, r3
 80027a0:	461a      	mov	r2, r3
 80027a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027a4:	4413      	add	r3, r2
 80027a6:	667b      	str	r3, [r7, #100]	; 0x64
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	011a      	lsls	r2, r3, #4
 80027ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027b0:	4413      	add	r3, r2
 80027b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027b6:	663b      	str	r3, [r7, #96]	; 0x60
 80027b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027ba:	2200      	movs	r2, #0
 80027bc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	677b      	str	r3, [r7, #116]	; 0x74
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	785b      	ldrb	r3, [r3, #1]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d12b      	bne.n	8002824 <HAL_PCD_EP_DB_Transmit+0x51e>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027da:	b29b      	uxth	r3, r3
 80027dc:	461a      	mov	r2, r3
 80027de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027e0:	4413      	add	r3, r2
 80027e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	011a      	lsls	r2, r3, #4
 80027ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ec:	4413      	add	r3, r2
 80027ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80027f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002802:	b29a      	uxth	r2, r3
 8002804:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002808:	801a      	strh	r2, [r3, #0]
 800280a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800280e:	881b      	ldrh	r3, [r3, #0]
 8002810:	b29b      	uxth	r3, r3
 8002812:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002816:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800281a:	b29a      	uxth	r2, r3
 800281c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002820:	801a      	strh	r2, [r3, #0]
 8002822:	e017      	b.n	8002854 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	785b      	ldrb	r3, [r3, #1]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d113      	bne.n	8002854 <HAL_PCD_EP_DB_Transmit+0x54e>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002834:	b29b      	uxth	r3, r3
 8002836:	461a      	mov	r2, r3
 8002838:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800283a:	4413      	add	r3, r2
 800283c:	677b      	str	r3, [r7, #116]	; 0x74
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	011a      	lsls	r2, r3, #4
 8002844:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002846:	4413      	add	r3, r2
 8002848:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800284c:	673b      	str	r3, [r7, #112]	; 0x70
 800284e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002850:	2200      	movs	r2, #0
 8002852:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	4619      	mov	r1, r3
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f005 fd25 	bl	80082aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002860:	88fb      	ldrh	r3, [r7, #6]
 8002862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002866:	2b00      	cmp	r3, #0
 8002868:	f040 811a 	bne.w	8002aa0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	461a      	mov	r2, r3
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	b29b      	uxth	r3, r3
 800287e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002886:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	441a      	add	r2, r3
 8002898:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800289c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	8013      	strh	r3, [r2, #0]
 80028b0:	e0f6      	b.n	8002aa0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80028b2:	88fb      	ldrh	r3, [r7, #6]
 80028b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d121      	bne.n	8002900 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	461a      	mov	r2, r3
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	461a      	mov	r2, r3
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	441a      	add	r2, r3
 80028e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002906:	2b01      	cmp	r3, #1
 8002908:	f040 80ca 	bne.w	8002aa0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	695a      	ldr	r2, [r3, #20]
 8002910:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002914:	441a      	add	r2, r3
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	69da      	ldr	r2, [r3, #28]
 800291e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002922:	441a      	add	r2, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	6a1a      	ldr	r2, [r3, #32]
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	429a      	cmp	r2, r3
 8002932:	d30b      	bcc.n	800294c <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	6a1a      	ldr	r2, [r3, #32]
 8002940:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002944:	1ad2      	subs	r2, r2, r3
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	621a      	str	r2, [r3, #32]
 800294a:	e017      	b.n	800297c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d108      	bne.n	8002966 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002954:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002958:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002964:	e00a      	b.n	800297c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2200      	movs	r2, #0
 8002972:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	657b      	str	r3, [r7, #84]	; 0x54
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	785b      	ldrb	r3, [r3, #1]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d165      	bne.n	8002a56 <HAL_PCD_EP_DB_Transmit+0x750>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002998:	b29b      	uxth	r3, r3
 800299a:	461a      	mov	r2, r3
 800299c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800299e:	4413      	add	r3, r2
 80029a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	011a      	lsls	r2, r3, #4
 80029a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029aa:	4413      	add	r3, r2
 80029ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80029b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029b4:	881b      	ldrh	r3, [r3, #0]
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029bc:	b29a      	uxth	r2, r3
 80029be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029c0:	801a      	strh	r2, [r3, #0]
 80029c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029c6:	2b3e      	cmp	r3, #62	; 0x3e
 80029c8:	d91d      	bls.n	8002a06 <HAL_PCD_EP_DB_Transmit+0x700>
 80029ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029ce:	095b      	lsrs	r3, r3, #5
 80029d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80029d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029d6:	f003 031f 	and.w	r3, r3, #31
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d102      	bne.n	80029e4 <HAL_PCD_EP_DB_Transmit+0x6de>
 80029de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029e0:	3b01      	subs	r3, #1
 80029e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80029e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	029b      	lsls	r3, r3, #10
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	4313      	orrs	r3, r2
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a02:	801a      	strh	r2, [r3, #0]
 8002a04:	e041      	b.n	8002a8a <HAL_PCD_EP_DB_Transmit+0x784>
 8002a06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10a      	bne.n	8002a24 <HAL_PCD_EP_DB_Transmit+0x71e>
 8002a0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a20:	801a      	strh	r2, [r3, #0]
 8002a22:	e032      	b.n	8002a8a <HAL_PCD_EP_DB_Transmit+0x784>
 8002a24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a28:	085b      	lsrs	r3, r3, #1
 8002a2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d002      	beq.n	8002a3e <HAL_PCD_EP_DB_Transmit+0x738>
 8002a38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a40:	881b      	ldrh	r3, [r3, #0]
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	029b      	lsls	r3, r3, #10
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a52:	801a      	strh	r2, [r3, #0]
 8002a54:	e019      	b.n	8002a8a <HAL_PCD_EP_DB_Transmit+0x784>
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	785b      	ldrb	r3, [r3, #1]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d115      	bne.n	8002a8a <HAL_PCD_EP_DB_Transmit+0x784>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	461a      	mov	r2, r3
 8002a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a6c:	4413      	add	r3, r2
 8002a6e:	657b      	str	r3, [r7, #84]	; 0x54
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	011a      	lsls	r2, r3, #4
 8002a76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a78:	4413      	add	r3, r2
 8002a7a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a7e:	653b      	str	r3, [r7, #80]	; 0x50
 8002a80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a88:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6818      	ldr	r0, [r3, #0]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	6959      	ldr	r1, [r3, #20]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	895a      	ldrh	r2, [r3, #10]
 8002a96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	f003 fda5 	bl	80065ea <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	881b      	ldrh	r3, [r3, #0]
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ab6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002aba:	82bb      	strh	r3, [r7, #20]
 8002abc:	8abb      	ldrh	r3, [r7, #20]
 8002abe:	f083 0310 	eor.w	r3, r3, #16
 8002ac2:	82bb      	strh	r3, [r7, #20]
 8002ac4:	8abb      	ldrh	r3, [r7, #20]
 8002ac6:	f083 0320 	eor.w	r3, r3, #32
 8002aca:	82bb      	strh	r3, [r7, #20]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	441a      	add	r2, r3
 8002ada:	8abb      	ldrh	r3, [r7, #20]
 8002adc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ae0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ae4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3790      	adds	r7, #144	; 0x90
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b087      	sub	sp, #28
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	60f8      	str	r0, [r7, #12]
 8002b02:	607b      	str	r3, [r7, #4]
 8002b04:	460b      	mov	r3, r1
 8002b06:	817b      	strh	r3, [r7, #10]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002b0c:	897b      	ldrh	r3, [r7, #10]
 8002b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00b      	beq.n	8002b30 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b18:	897b      	ldrh	r3, [r7, #10]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	4613      	mov	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	617b      	str	r3, [r7, #20]
 8002b2e:	e009      	b.n	8002b44 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b30:	897a      	ldrh	r2, [r7, #10]
 8002b32:	4613      	mov	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	4413      	add	r3, r2
 8002b42:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002b44:	893b      	ldrh	r3, [r7, #8]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d107      	bne.n	8002b5a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	80da      	strh	r2, [r3, #6]
 8002b58:	e00b      	b.n	8002b72 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	0c1b      	lsrs	r3, r3, #16
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	371c      	adds	r7, #28
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr
	...

08002b80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e272      	b.n	8003078 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 8087 	beq.w	8002cae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ba0:	4b92      	ldr	r3, [pc, #584]	; (8002dec <HAL_RCC_OscConfig+0x26c>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 030c 	and.w	r3, r3, #12
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d00c      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bac:	4b8f      	ldr	r3, [pc, #572]	; (8002dec <HAL_RCC_OscConfig+0x26c>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 030c 	and.w	r3, r3, #12
 8002bb4:	2b08      	cmp	r3, #8
 8002bb6:	d112      	bne.n	8002bde <HAL_RCC_OscConfig+0x5e>
 8002bb8:	4b8c      	ldr	r3, [pc, #560]	; (8002dec <HAL_RCC_OscConfig+0x26c>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc4:	d10b      	bne.n	8002bde <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc6:	4b89      	ldr	r3, [pc, #548]	; (8002dec <HAL_RCC_OscConfig+0x26c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d06c      	beq.n	8002cac <HAL_RCC_OscConfig+0x12c>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d168      	bne.n	8002cac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e24c      	b.n	8003078 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be6:	d106      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x76>
 8002be8:	4b80      	ldr	r3, [pc, #512]	; (8002dec <HAL_RCC_OscConfig+0x26c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a7f      	ldr	r2, [pc, #508]	; (8002dec <HAL_RCC_OscConfig+0x26c>)
 8002bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf2:	6013      	str	r3, [r2, #0]
 8002bf4:	e02e      	b.n	8002c54 <HAL_RCC_OscConfig+0xd4>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10c      	bne.n	8002c18 <HAL_RCC_OscConfig+0x98>
 8002bfe:	4b7b      	ldr	r3, [pc, #492]	; (8002dec <HAL_RCC_OscConfig+0x26c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a7a      	ldr	r2, [pc, #488]	; (8002dec <HAL_RCC_OscConfig+0x26c>)
 8002c04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	4b78      	ldr	r3, [pc, #480]	; (8002dec <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a77      	ldr	r2, [pc, #476]	; (8002dec <HAL_RCC_OscConfig+0x26c>)
 8002c10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	e01d      	b.n	8002c54 <HAL_RCC_OscConfig+0xd4>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c20:	d10c      	bne.n	8002c3c <HAL_RCC_OscConfig+0xbc>
 8002c22:	4b72      	ldr	r3, [pc, #456]	; (8002dec <HAL_RCC_OscConfig+0x26c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a71      	ldr	r2, [pc, #452]	; (8002dec <HAL_RCC_OscConfig+0x26c>)
 8002c28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	4b6f      	ldr	r3, [pc, #444]	; (8002dec <HAL_RCC_OscConfig+0x26c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a6e      	ldr	r2, [pc, #440]	; (8002dec <HAL_RCC_OscConfig+0x26c>)
 8002c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	e00b      	b.n	8002c54 <HAL_RCC_OscConfig+0xd4>
 8002c3c:	4b6b      	ldr	r3, [pc, #428]	; (8002dec <HAL_RCC_OscConfig+0x26c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a6a      	ldr	r2, [pc, #424]	; (8002dec <HAL_RCC_OscConfig+0x26c>)
 8002c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c46:	6013      	str	r3, [r2, #0]
 8002c48:	4b68      	ldr	r3, [pc, #416]	; (8002dec <HAL_RCC_OscConfig+0x26c>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a67      	ldr	r2, [pc, #412]	; (8002dec <HAL_RCC_OscConfig+0x26c>)
 8002c4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d013      	beq.n	8002c84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5c:	f7fd ff56 	bl	8000b0c <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c64:	f7fd ff52 	bl	8000b0c <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b64      	cmp	r3, #100	; 0x64
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e200      	b.n	8003078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c76:	4b5d      	ldr	r3, [pc, #372]	; (8002dec <HAL_RCC_OscConfig+0x26c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0f0      	beq.n	8002c64 <HAL_RCC_OscConfig+0xe4>
 8002c82:	e014      	b.n	8002cae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c84:	f7fd ff42 	bl	8000b0c <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c8c:	f7fd ff3e 	bl	8000b0c <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b64      	cmp	r3, #100	; 0x64
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e1ec      	b.n	8003078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c9e:	4b53      	ldr	r3, [pc, #332]	; (8002dec <HAL_RCC_OscConfig+0x26c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1f0      	bne.n	8002c8c <HAL_RCC_OscConfig+0x10c>
 8002caa:	e000      	b.n	8002cae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d063      	beq.n	8002d82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cba:	4b4c      	ldr	r3, [pc, #304]	; (8002dec <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f003 030c 	and.w	r3, r3, #12
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00b      	beq.n	8002cde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cc6:	4b49      	ldr	r3, [pc, #292]	; (8002dec <HAL_RCC_OscConfig+0x26c>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f003 030c 	and.w	r3, r3, #12
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d11c      	bne.n	8002d0c <HAL_RCC_OscConfig+0x18c>
 8002cd2:	4b46      	ldr	r3, [pc, #280]	; (8002dec <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d116      	bne.n	8002d0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cde:	4b43      	ldr	r3, [pc, #268]	; (8002dec <HAL_RCC_OscConfig+0x26c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d005      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x176>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d001      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e1c0      	b.n	8003078 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf6:	4b3d      	ldr	r3, [pc, #244]	; (8002dec <HAL_RCC_OscConfig+0x26c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	4939      	ldr	r1, [pc, #228]	; (8002dec <HAL_RCC_OscConfig+0x26c>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d0a:	e03a      	b.n	8002d82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d020      	beq.n	8002d56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d14:	4b36      	ldr	r3, [pc, #216]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002d16:	2201      	movs	r2, #1
 8002d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1a:	f7fd fef7 	bl	8000b0c <HAL_GetTick>
 8002d1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d20:	e008      	b.n	8002d34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d22:	f7fd fef3 	bl	8000b0c <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e1a1      	b.n	8003078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d34:	4b2d      	ldr	r3, [pc, #180]	; (8002dec <HAL_RCC_OscConfig+0x26c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0f0      	beq.n	8002d22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d40:	4b2a      	ldr	r3, [pc, #168]	; (8002dec <HAL_RCC_OscConfig+0x26c>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	4927      	ldr	r1, [pc, #156]	; (8002dec <HAL_RCC_OscConfig+0x26c>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	600b      	str	r3, [r1, #0]
 8002d54:	e015      	b.n	8002d82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d56:	4b26      	ldr	r3, [pc, #152]	; (8002df0 <HAL_RCC_OscConfig+0x270>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5c:	f7fd fed6 	bl	8000b0c <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d64:	f7fd fed2 	bl	8000b0c <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e180      	b.n	8003078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d76:	4b1d      	ldr	r3, [pc, #116]	; (8002dec <HAL_RCC_OscConfig+0x26c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1f0      	bne.n	8002d64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d03a      	beq.n	8002e04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d019      	beq.n	8002dca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d96:	4b17      	ldr	r3, [pc, #92]	; (8002df4 <HAL_RCC_OscConfig+0x274>)
 8002d98:	2201      	movs	r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d9c:	f7fd feb6 	bl	8000b0c <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002da4:	f7fd feb2 	bl	8000b0c <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e160      	b.n	8003078 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002db6:	4b0d      	ldr	r3, [pc, #52]	; (8002dec <HAL_RCC_OscConfig+0x26c>)
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0f0      	beq.n	8002da4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dc2:	2001      	movs	r0, #1
 8002dc4:	f000 face 	bl	8003364 <RCC_Delay>
 8002dc8:	e01c      	b.n	8002e04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dca:	4b0a      	ldr	r3, [pc, #40]	; (8002df4 <HAL_RCC_OscConfig+0x274>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd0:	f7fd fe9c 	bl	8000b0c <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd6:	e00f      	b.n	8002df8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd8:	f7fd fe98 	bl	8000b0c <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d908      	bls.n	8002df8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e146      	b.n	8003078 <HAL_RCC_OscConfig+0x4f8>
 8002dea:	bf00      	nop
 8002dec:	40021000 	.word	0x40021000
 8002df0:	42420000 	.word	0x42420000
 8002df4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df8:	4b92      	ldr	r3, [pc, #584]	; (8003044 <HAL_RCC_OscConfig+0x4c4>)
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1e9      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 80a6 	beq.w	8002f5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e12:	2300      	movs	r3, #0
 8002e14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e16:	4b8b      	ldr	r3, [pc, #556]	; (8003044 <HAL_RCC_OscConfig+0x4c4>)
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10d      	bne.n	8002e3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e22:	4b88      	ldr	r3, [pc, #544]	; (8003044 <HAL_RCC_OscConfig+0x4c4>)
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	4a87      	ldr	r2, [pc, #540]	; (8003044 <HAL_RCC_OscConfig+0x4c4>)
 8002e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e2c:	61d3      	str	r3, [r2, #28]
 8002e2e:	4b85      	ldr	r3, [pc, #532]	; (8003044 <HAL_RCC_OscConfig+0x4c4>)
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e36:	60bb      	str	r3, [r7, #8]
 8002e38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e3e:	4b82      	ldr	r3, [pc, #520]	; (8003048 <HAL_RCC_OscConfig+0x4c8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d118      	bne.n	8002e7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e4a:	4b7f      	ldr	r3, [pc, #508]	; (8003048 <HAL_RCC_OscConfig+0x4c8>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a7e      	ldr	r2, [pc, #504]	; (8003048 <HAL_RCC_OscConfig+0x4c8>)
 8002e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e56:	f7fd fe59 	bl	8000b0c <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5c:	e008      	b.n	8002e70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e5e:	f7fd fe55 	bl	8000b0c <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b64      	cmp	r3, #100	; 0x64
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e103      	b.n	8003078 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e70:	4b75      	ldr	r3, [pc, #468]	; (8003048 <HAL_RCC_OscConfig+0x4c8>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0f0      	beq.n	8002e5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d106      	bne.n	8002e92 <HAL_RCC_OscConfig+0x312>
 8002e84:	4b6f      	ldr	r3, [pc, #444]	; (8003044 <HAL_RCC_OscConfig+0x4c4>)
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	4a6e      	ldr	r2, [pc, #440]	; (8003044 <HAL_RCC_OscConfig+0x4c4>)
 8002e8a:	f043 0301 	orr.w	r3, r3, #1
 8002e8e:	6213      	str	r3, [r2, #32]
 8002e90:	e02d      	b.n	8002eee <HAL_RCC_OscConfig+0x36e>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10c      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x334>
 8002e9a:	4b6a      	ldr	r3, [pc, #424]	; (8003044 <HAL_RCC_OscConfig+0x4c4>)
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	4a69      	ldr	r2, [pc, #420]	; (8003044 <HAL_RCC_OscConfig+0x4c4>)
 8002ea0:	f023 0301 	bic.w	r3, r3, #1
 8002ea4:	6213      	str	r3, [r2, #32]
 8002ea6:	4b67      	ldr	r3, [pc, #412]	; (8003044 <HAL_RCC_OscConfig+0x4c4>)
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	4a66      	ldr	r2, [pc, #408]	; (8003044 <HAL_RCC_OscConfig+0x4c4>)
 8002eac:	f023 0304 	bic.w	r3, r3, #4
 8002eb0:	6213      	str	r3, [r2, #32]
 8002eb2:	e01c      	b.n	8002eee <HAL_RCC_OscConfig+0x36e>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	2b05      	cmp	r3, #5
 8002eba:	d10c      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x356>
 8002ebc:	4b61      	ldr	r3, [pc, #388]	; (8003044 <HAL_RCC_OscConfig+0x4c4>)
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	4a60      	ldr	r2, [pc, #384]	; (8003044 <HAL_RCC_OscConfig+0x4c4>)
 8002ec2:	f043 0304 	orr.w	r3, r3, #4
 8002ec6:	6213      	str	r3, [r2, #32]
 8002ec8:	4b5e      	ldr	r3, [pc, #376]	; (8003044 <HAL_RCC_OscConfig+0x4c4>)
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	4a5d      	ldr	r2, [pc, #372]	; (8003044 <HAL_RCC_OscConfig+0x4c4>)
 8002ece:	f043 0301 	orr.w	r3, r3, #1
 8002ed2:	6213      	str	r3, [r2, #32]
 8002ed4:	e00b      	b.n	8002eee <HAL_RCC_OscConfig+0x36e>
 8002ed6:	4b5b      	ldr	r3, [pc, #364]	; (8003044 <HAL_RCC_OscConfig+0x4c4>)
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	4a5a      	ldr	r2, [pc, #360]	; (8003044 <HAL_RCC_OscConfig+0x4c4>)
 8002edc:	f023 0301 	bic.w	r3, r3, #1
 8002ee0:	6213      	str	r3, [r2, #32]
 8002ee2:	4b58      	ldr	r3, [pc, #352]	; (8003044 <HAL_RCC_OscConfig+0x4c4>)
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	4a57      	ldr	r2, [pc, #348]	; (8003044 <HAL_RCC_OscConfig+0x4c4>)
 8002ee8:	f023 0304 	bic.w	r3, r3, #4
 8002eec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d015      	beq.n	8002f22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef6:	f7fd fe09 	bl	8000b0c <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002efc:	e00a      	b.n	8002f14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efe:	f7fd fe05 	bl	8000b0c <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e0b1      	b.n	8003078 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f14:	4b4b      	ldr	r3, [pc, #300]	; (8003044 <HAL_RCC_OscConfig+0x4c4>)
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0ee      	beq.n	8002efe <HAL_RCC_OscConfig+0x37e>
 8002f20:	e014      	b.n	8002f4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f22:	f7fd fdf3 	bl	8000b0c <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f28:	e00a      	b.n	8002f40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f2a:	f7fd fdef 	bl	8000b0c <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e09b      	b.n	8003078 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f40:	4b40      	ldr	r3, [pc, #256]	; (8003044 <HAL_RCC_OscConfig+0x4c4>)
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1ee      	bne.n	8002f2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f4c:	7dfb      	ldrb	r3, [r7, #23]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d105      	bne.n	8002f5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f52:	4b3c      	ldr	r3, [pc, #240]	; (8003044 <HAL_RCC_OscConfig+0x4c4>)
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	4a3b      	ldr	r2, [pc, #236]	; (8003044 <HAL_RCC_OscConfig+0x4c4>)
 8002f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 8087 	beq.w	8003076 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f68:	4b36      	ldr	r3, [pc, #216]	; (8003044 <HAL_RCC_OscConfig+0x4c4>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f003 030c 	and.w	r3, r3, #12
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d061      	beq.n	8003038 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d146      	bne.n	800300a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f7c:	4b33      	ldr	r3, [pc, #204]	; (800304c <HAL_RCC_OscConfig+0x4cc>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f82:	f7fd fdc3 	bl	8000b0c <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f8a:	f7fd fdbf 	bl	8000b0c <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e06d      	b.n	8003078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f9c:	4b29      	ldr	r3, [pc, #164]	; (8003044 <HAL_RCC_OscConfig+0x4c4>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1f0      	bne.n	8002f8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb0:	d108      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fb2:	4b24      	ldr	r3, [pc, #144]	; (8003044 <HAL_RCC_OscConfig+0x4c4>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	4921      	ldr	r1, [pc, #132]	; (8003044 <HAL_RCC_OscConfig+0x4c4>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fc4:	4b1f      	ldr	r3, [pc, #124]	; (8003044 <HAL_RCC_OscConfig+0x4c4>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a19      	ldr	r1, [r3, #32]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	430b      	orrs	r3, r1
 8002fd6:	491b      	ldr	r1, [pc, #108]	; (8003044 <HAL_RCC_OscConfig+0x4c4>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fdc:	4b1b      	ldr	r3, [pc, #108]	; (800304c <HAL_RCC_OscConfig+0x4cc>)
 8002fde:	2201      	movs	r2, #1
 8002fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe2:	f7fd fd93 	bl	8000b0c <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fe8:	e008      	b.n	8002ffc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fea:	f7fd fd8f 	bl	8000b0c <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e03d      	b.n	8003078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ffc:	4b11      	ldr	r3, [pc, #68]	; (8003044 <HAL_RCC_OscConfig+0x4c4>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0f0      	beq.n	8002fea <HAL_RCC_OscConfig+0x46a>
 8003008:	e035      	b.n	8003076 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800300a:	4b10      	ldr	r3, [pc, #64]	; (800304c <HAL_RCC_OscConfig+0x4cc>)
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003010:	f7fd fd7c 	bl	8000b0c <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003018:	f7fd fd78 	bl	8000b0c <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e026      	b.n	8003078 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800302a:	4b06      	ldr	r3, [pc, #24]	; (8003044 <HAL_RCC_OscConfig+0x4c4>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f0      	bne.n	8003018 <HAL_RCC_OscConfig+0x498>
 8003036:	e01e      	b.n	8003076 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d107      	bne.n	8003050 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e019      	b.n	8003078 <HAL_RCC_OscConfig+0x4f8>
 8003044:	40021000 	.word	0x40021000
 8003048:	40007000 	.word	0x40007000
 800304c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003050:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <HAL_RCC_OscConfig+0x500>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	429a      	cmp	r2, r3
 8003062:	d106      	bne.n	8003072 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306e:	429a      	cmp	r2, r3
 8003070:	d001      	beq.n	8003076 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3718      	adds	r7, #24
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40021000 	.word	0x40021000

08003084 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0d0      	b.n	800323a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003098:	4b6a      	ldr	r3, [pc, #424]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d910      	bls.n	80030c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a6:	4b67      	ldr	r3, [pc, #412]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f023 0207 	bic.w	r2, r3, #7
 80030ae:	4965      	ldr	r1, [pc, #404]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b6:	4b63      	ldr	r3, [pc, #396]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d001      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0b8      	b.n	800323a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d020      	beq.n	8003116 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d005      	beq.n	80030ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030e0:	4b59      	ldr	r3, [pc, #356]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	4a58      	ldr	r2, [pc, #352]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 80030e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0308 	and.w	r3, r3, #8
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d005      	beq.n	8003104 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030f8:	4b53      	ldr	r3, [pc, #332]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	4a52      	ldr	r2, [pc, #328]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 80030fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003102:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003104:	4b50      	ldr	r3, [pc, #320]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	494d      	ldr	r1, [pc, #308]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003112:	4313      	orrs	r3, r2
 8003114:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d040      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d107      	bne.n	800313a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312a:	4b47      	ldr	r3, [pc, #284]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d115      	bne.n	8003162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e07f      	b.n	800323a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d107      	bne.n	8003152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003142:	4b41      	ldr	r3, [pc, #260]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d109      	bne.n	8003162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e073      	b.n	800323a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003152:	4b3d      	ldr	r3, [pc, #244]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e06b      	b.n	800323a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003162:	4b39      	ldr	r3, [pc, #228]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f023 0203 	bic.w	r2, r3, #3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	4936      	ldr	r1, [pc, #216]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003170:	4313      	orrs	r3, r2
 8003172:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003174:	f7fd fcca 	bl	8000b0c <HAL_GetTick>
 8003178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317a:	e00a      	b.n	8003192 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800317c:	f7fd fcc6 	bl	8000b0c <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f241 3288 	movw	r2, #5000	; 0x1388
 800318a:	4293      	cmp	r3, r2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e053      	b.n	800323a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003192:	4b2d      	ldr	r3, [pc, #180]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f003 020c 	and.w	r2, r3, #12
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d1eb      	bne.n	800317c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031a4:	4b27      	ldr	r3, [pc, #156]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d210      	bcs.n	80031d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b2:	4b24      	ldr	r3, [pc, #144]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f023 0207 	bic.w	r2, r3, #7
 80031ba:	4922      	ldr	r1, [pc, #136]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	4313      	orrs	r3, r2
 80031c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c2:	4b20      	ldr	r3, [pc, #128]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d001      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e032      	b.n	800323a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d008      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e0:	4b19      	ldr	r3, [pc, #100]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	4916      	ldr	r1, [pc, #88]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d009      	beq.n	8003212 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031fe:	4b12      	ldr	r3, [pc, #72]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	490e      	ldr	r1, [pc, #56]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 800320e:	4313      	orrs	r3, r2
 8003210:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003212:	f000 f821 	bl	8003258 <HAL_RCC_GetSysClockFreq>
 8003216:	4602      	mov	r2, r0
 8003218:	4b0b      	ldr	r3, [pc, #44]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	091b      	lsrs	r3, r3, #4
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	490a      	ldr	r1, [pc, #40]	; (800324c <HAL_RCC_ClockConfig+0x1c8>)
 8003224:	5ccb      	ldrb	r3, [r1, r3]
 8003226:	fa22 f303 	lsr.w	r3, r2, r3
 800322a:	4a09      	ldr	r2, [pc, #36]	; (8003250 <HAL_RCC_ClockConfig+0x1cc>)
 800322c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800322e:	4b09      	ldr	r3, [pc, #36]	; (8003254 <HAL_RCC_ClockConfig+0x1d0>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f7fd fc28 	bl	8000a88 <HAL_InitTick>

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40022000 	.word	0x40022000
 8003248:	40021000 	.word	0x40021000
 800324c:	080089a8 	.word	0x080089a8
 8003250:	20000000 	.word	0x20000000
 8003254:	20000004 	.word	0x20000004

08003258 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003258:	b480      	push	{r7}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800325e:	2300      	movs	r3, #0
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	2300      	movs	r3, #0
 8003264:	60bb      	str	r3, [r7, #8]
 8003266:	2300      	movs	r3, #0
 8003268:	617b      	str	r3, [r7, #20]
 800326a:	2300      	movs	r3, #0
 800326c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800326e:	2300      	movs	r3, #0
 8003270:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003272:	4b1e      	ldr	r3, [pc, #120]	; (80032ec <HAL_RCC_GetSysClockFreq+0x94>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f003 030c 	and.w	r3, r3, #12
 800327e:	2b04      	cmp	r3, #4
 8003280:	d002      	beq.n	8003288 <HAL_RCC_GetSysClockFreq+0x30>
 8003282:	2b08      	cmp	r3, #8
 8003284:	d003      	beq.n	800328e <HAL_RCC_GetSysClockFreq+0x36>
 8003286:	e027      	b.n	80032d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003288:	4b19      	ldr	r3, [pc, #100]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800328a:	613b      	str	r3, [r7, #16]
      break;
 800328c:	e027      	b.n	80032de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	0c9b      	lsrs	r3, r3, #18
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	4a17      	ldr	r2, [pc, #92]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003298:	5cd3      	ldrb	r3, [r2, r3]
 800329a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d010      	beq.n	80032c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032a6:	4b11      	ldr	r3, [pc, #68]	; (80032ec <HAL_RCC_GetSysClockFreq+0x94>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	0c5b      	lsrs	r3, r3, #17
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	4a11      	ldr	r2, [pc, #68]	; (80032f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80032b2:	5cd3      	ldrb	r3, [r2, r3]
 80032b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a0d      	ldr	r2, [pc, #52]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80032ba:	fb03 f202 	mul.w	r2, r3, r2
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c4:	617b      	str	r3, [r7, #20]
 80032c6:	e004      	b.n	80032d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a0c      	ldr	r2, [pc, #48]	; (80032fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80032cc:	fb02 f303 	mul.w	r3, r2, r3
 80032d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	613b      	str	r3, [r7, #16]
      break;
 80032d6:	e002      	b.n	80032de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032d8:	4b05      	ldr	r3, [pc, #20]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80032da:	613b      	str	r3, [r7, #16]
      break;
 80032dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032de:	693b      	ldr	r3, [r7, #16]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	371c      	adds	r7, #28
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bc80      	pop	{r7}
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	40021000 	.word	0x40021000
 80032f0:	007a1200 	.word	0x007a1200
 80032f4:	080089c0 	.word	0x080089c0
 80032f8:	080089d0 	.word	0x080089d0
 80032fc:	003d0900 	.word	0x003d0900

08003300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003304:	4b02      	ldr	r3, [pc, #8]	; (8003310 <HAL_RCC_GetHCLKFreq+0x10>)
 8003306:	681b      	ldr	r3, [r3, #0]
}
 8003308:	4618      	mov	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr
 8003310:	20000000 	.word	0x20000000

08003314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003318:	f7ff fff2 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 800331c:	4602      	mov	r2, r0
 800331e:	4b05      	ldr	r3, [pc, #20]	; (8003334 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	0a1b      	lsrs	r3, r3, #8
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	4903      	ldr	r1, [pc, #12]	; (8003338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800332a:	5ccb      	ldrb	r3, [r1, r3]
 800332c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003330:	4618      	mov	r0, r3
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40021000 	.word	0x40021000
 8003338:	080089b8 	.word	0x080089b8

0800333c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003340:	f7ff ffde 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 8003344:	4602      	mov	r2, r0
 8003346:	4b05      	ldr	r3, [pc, #20]	; (800335c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	0adb      	lsrs	r3, r3, #11
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	4903      	ldr	r1, [pc, #12]	; (8003360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003352:	5ccb      	ldrb	r3, [r1, r3]
 8003354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003358:	4618      	mov	r0, r3
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40021000 	.word	0x40021000
 8003360:	080089b8 	.word	0x080089b8

08003364 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800336c:	4b0a      	ldr	r3, [pc, #40]	; (8003398 <RCC_Delay+0x34>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a0a      	ldr	r2, [pc, #40]	; (800339c <RCC_Delay+0x38>)
 8003372:	fba2 2303 	umull	r2, r3, r2, r3
 8003376:	0a5b      	lsrs	r3, r3, #9
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	fb02 f303 	mul.w	r3, r2, r3
 800337e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003380:	bf00      	nop
  }
  while (Delay --);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	1e5a      	subs	r2, r3, #1
 8003386:	60fa      	str	r2, [r7, #12]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1f9      	bne.n	8003380 <RCC_Delay+0x1c>
}
 800338c:	bf00      	nop
 800338e:	bf00      	nop
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr
 8003398:	20000000 	.word	0x20000000
 800339c:	10624dd3 	.word	0x10624dd3

080033a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	613b      	str	r3, [r7, #16]
 80033ac:	2300      	movs	r3, #0
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d07d      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80033bc:	2300      	movs	r3, #0
 80033be:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033c0:	4b4f      	ldr	r3, [pc, #316]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10d      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033cc:	4b4c      	ldr	r3, [pc, #304]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	4a4b      	ldr	r2, [pc, #300]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d6:	61d3      	str	r3, [r2, #28]
 80033d8:	4b49      	ldr	r3, [pc, #292]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e0:	60bb      	str	r3, [r7, #8]
 80033e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033e4:	2301      	movs	r3, #1
 80033e6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e8:	4b46      	ldr	r3, [pc, #280]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d118      	bne.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033f4:	4b43      	ldr	r3, [pc, #268]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a42      	ldr	r2, [pc, #264]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003400:	f7fd fb84 	bl	8000b0c <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003406:	e008      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003408:	f7fd fb80 	bl	8000b0c <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b64      	cmp	r3, #100	; 0x64
 8003414:	d901      	bls.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e06d      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341a:	4b3a      	ldr	r3, [pc, #232]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0f0      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003426:	4b36      	ldr	r3, [pc, #216]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800342e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d02e      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	429a      	cmp	r2, r3
 8003442:	d027      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003444:	4b2e      	ldr	r3, [pc, #184]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800344c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800344e:	4b2e      	ldr	r3, [pc, #184]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003450:	2201      	movs	r2, #1
 8003452:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003454:	4b2c      	ldr	r3, [pc, #176]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800345a:	4a29      	ldr	r2, [pc, #164]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d014      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346a:	f7fd fb4f 	bl	8000b0c <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003470:	e00a      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003472:	f7fd fb4b 	bl	8000b0c <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003480:	4293      	cmp	r3, r2
 8003482:	d901      	bls.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e036      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003488:	4b1d      	ldr	r3, [pc, #116]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0ee      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003494:	4b1a      	ldr	r3, [pc, #104]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	4917      	ldr	r1, [pc, #92]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034a6:	7dfb      	ldrb	r3, [r7, #23]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d105      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ac:	4b14      	ldr	r3, [pc, #80]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	4a13      	ldr	r2, [pc, #76]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d008      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034c4:	4b0e      	ldr	r3, [pc, #56]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	490b      	ldr	r1, [pc, #44]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0310 	and.w	r3, r3, #16
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d008      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034e2:	4b07      	ldr	r3, [pc, #28]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	4904      	ldr	r1, [pc, #16]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40021000 	.word	0x40021000
 8003504:	40007000 	.word	0x40007000
 8003508:	42420440 	.word	0x42420440

0800350c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e076      	b.n	800360c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	2b00      	cmp	r3, #0
 8003524:	d108      	bne.n	8003538 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800352e:	d009      	beq.n	8003544 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	61da      	str	r2, [r3, #28]
 8003536:	e005      	b.n	8003544 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d106      	bne.n	8003564 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7fd f82c 	bl	80005bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800357a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800358c:	431a      	orrs	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003596:	431a      	orrs	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035b4:	431a      	orrs	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035be:	431a      	orrs	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c8:	ea42 0103 	orr.w	r1, r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	430a      	orrs	r2, r1
 80035da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	0c1a      	lsrs	r2, r3, #16
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f002 0204 	and.w	r2, r2, #4
 80035ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	69da      	ldr	r2, [r3, #28]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e041      	b.n	80036aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d106      	bne.n	8003640 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7fd f94c 	bl	80008d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3304      	adds	r3, #4
 8003650:	4619      	mov	r1, r3
 8003652:	4610      	mov	r0, r2
 8003654:	f000 fa7c 	bl	8003b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
	...

080036b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d001      	beq.n	80036cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e03a      	b.n	8003742 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2202      	movs	r2, #2
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68da      	ldr	r2, [r3, #12]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0201 	orr.w	r2, r2, #1
 80036e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a18      	ldr	r2, [pc, #96]	; (800374c <HAL_TIM_Base_Start_IT+0x98>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d00e      	beq.n	800370c <HAL_TIM_Base_Start_IT+0x58>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f6:	d009      	beq.n	800370c <HAL_TIM_Base_Start_IT+0x58>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a14      	ldr	r2, [pc, #80]	; (8003750 <HAL_TIM_Base_Start_IT+0x9c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d004      	beq.n	800370c <HAL_TIM_Base_Start_IT+0x58>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a13      	ldr	r2, [pc, #76]	; (8003754 <HAL_TIM_Base_Start_IT+0xa0>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d111      	bne.n	8003730 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2b06      	cmp	r3, #6
 800371c:	d010      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f042 0201 	orr.w	r2, r2, #1
 800372c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800372e:	e007      	b.n	8003740 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0201 	orr.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	bc80      	pop	{r7}
 800374a:	4770      	bx	lr
 800374c:	40012c00 	.word	0x40012c00
 8003750:	40000400 	.word	0x40000400
 8003754:	40000800 	.word	0x40000800

08003758 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b02      	cmp	r3, #2
 800376c:	d122      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b02      	cmp	r3, #2
 800377a:	d11b      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f06f 0202 	mvn.w	r2, #2
 8003784:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	f003 0303 	and.w	r3, r3, #3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f9bd 	bl	8003b1a <HAL_TIM_IC_CaptureCallback>
 80037a0:	e005      	b.n	80037ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f9b0 	bl	8003b08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f9bf 	bl	8003b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f003 0304 	and.w	r3, r3, #4
 80037be:	2b04      	cmp	r3, #4
 80037c0:	d122      	bne.n	8003808 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b04      	cmp	r3, #4
 80037ce:	d11b      	bne.n	8003808 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f06f 0204 	mvn.w	r2, #4
 80037d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2202      	movs	r2, #2
 80037de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f993 	bl	8003b1a <HAL_TIM_IC_CaptureCallback>
 80037f4:	e005      	b.n	8003802 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f986 	bl	8003b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f995 	bl	8003b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b08      	cmp	r3, #8
 8003814:	d122      	bne.n	800385c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	f003 0308 	and.w	r3, r3, #8
 8003820:	2b08      	cmp	r3, #8
 8003822:	d11b      	bne.n	800385c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f06f 0208 	mvn.w	r2, #8
 800382c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2204      	movs	r2, #4
 8003832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f969 	bl	8003b1a <HAL_TIM_IC_CaptureCallback>
 8003848:	e005      	b.n	8003856 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f95c 	bl	8003b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f96b 	bl	8003b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f003 0310 	and.w	r3, r3, #16
 8003866:	2b10      	cmp	r3, #16
 8003868:	d122      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f003 0310 	and.w	r3, r3, #16
 8003874:	2b10      	cmp	r3, #16
 8003876:	d11b      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f06f 0210 	mvn.w	r2, #16
 8003880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2208      	movs	r2, #8
 8003886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f93f 	bl	8003b1a <HAL_TIM_IC_CaptureCallback>
 800389c:	e005      	b.n	80038aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f932 	bl	8003b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 f941 	bl	8003b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d10e      	bne.n	80038dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d107      	bne.n	80038dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f06f 0201 	mvn.w	r2, #1
 80038d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f90d 	bl	8003af6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e6:	2b80      	cmp	r3, #128	; 0x80
 80038e8:	d10e      	bne.n	8003908 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f4:	2b80      	cmp	r3, #128	; 0x80
 80038f6:	d107      	bne.n	8003908 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 fa83 	bl	8003e0e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003912:	2b40      	cmp	r3, #64	; 0x40
 8003914:	d10e      	bne.n	8003934 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003920:	2b40      	cmp	r3, #64	; 0x40
 8003922:	d107      	bne.n	8003934 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800392c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f905 	bl	8003b3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	f003 0320 	and.w	r3, r3, #32
 800393e:	2b20      	cmp	r3, #32
 8003940:	d10e      	bne.n	8003960 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f003 0320 	and.w	r3, r3, #32
 800394c:	2b20      	cmp	r3, #32
 800394e:	d107      	bne.n	8003960 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f06f 0220 	mvn.w	r2, #32
 8003958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 fa4e 	bl	8003dfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003960:	bf00      	nop
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800397c:	2b01      	cmp	r3, #1
 800397e:	d101      	bne.n	8003984 <HAL_TIM_ConfigClockSource+0x1c>
 8003980:	2302      	movs	r3, #2
 8003982:	e0b4      	b.n	8003aee <HAL_TIM_ConfigClockSource+0x186>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039bc:	d03e      	beq.n	8003a3c <HAL_TIM_ConfigClockSource+0xd4>
 80039be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039c2:	f200 8087 	bhi.w	8003ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80039c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ca:	f000 8086 	beq.w	8003ada <HAL_TIM_ConfigClockSource+0x172>
 80039ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039d2:	d87f      	bhi.n	8003ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80039d4:	2b70      	cmp	r3, #112	; 0x70
 80039d6:	d01a      	beq.n	8003a0e <HAL_TIM_ConfigClockSource+0xa6>
 80039d8:	2b70      	cmp	r3, #112	; 0x70
 80039da:	d87b      	bhi.n	8003ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80039dc:	2b60      	cmp	r3, #96	; 0x60
 80039de:	d050      	beq.n	8003a82 <HAL_TIM_ConfigClockSource+0x11a>
 80039e0:	2b60      	cmp	r3, #96	; 0x60
 80039e2:	d877      	bhi.n	8003ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80039e4:	2b50      	cmp	r3, #80	; 0x50
 80039e6:	d03c      	beq.n	8003a62 <HAL_TIM_ConfigClockSource+0xfa>
 80039e8:	2b50      	cmp	r3, #80	; 0x50
 80039ea:	d873      	bhi.n	8003ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80039ec:	2b40      	cmp	r3, #64	; 0x40
 80039ee:	d058      	beq.n	8003aa2 <HAL_TIM_ConfigClockSource+0x13a>
 80039f0:	2b40      	cmp	r3, #64	; 0x40
 80039f2:	d86f      	bhi.n	8003ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80039f4:	2b30      	cmp	r3, #48	; 0x30
 80039f6:	d064      	beq.n	8003ac2 <HAL_TIM_ConfigClockSource+0x15a>
 80039f8:	2b30      	cmp	r3, #48	; 0x30
 80039fa:	d86b      	bhi.n	8003ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80039fc:	2b20      	cmp	r3, #32
 80039fe:	d060      	beq.n	8003ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8003a00:	2b20      	cmp	r3, #32
 8003a02:	d867      	bhi.n	8003ad4 <HAL_TIM_ConfigClockSource+0x16c>
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d05c      	beq.n	8003ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8003a08:	2b10      	cmp	r3, #16
 8003a0a:	d05a      	beq.n	8003ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8003a0c:	e062      	b.n	8003ad4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a1e:	f000 f970 	bl	8003d02 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	609a      	str	r2, [r3, #8]
      break;
 8003a3a:	e04f      	b.n	8003adc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a4c:	f000 f959 	bl	8003d02 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689a      	ldr	r2, [r3, #8]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a5e:	609a      	str	r2, [r3, #8]
      break;
 8003a60:	e03c      	b.n	8003adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a6e:	461a      	mov	r2, r3
 8003a70:	f000 f8d0 	bl	8003c14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2150      	movs	r1, #80	; 0x50
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 f927 	bl	8003cce <TIM_ITRx_SetConfig>
      break;
 8003a80:	e02c      	b.n	8003adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a8e:	461a      	mov	r2, r3
 8003a90:	f000 f8ee 	bl	8003c70 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2160      	movs	r1, #96	; 0x60
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 f917 	bl	8003cce <TIM_ITRx_SetConfig>
      break;
 8003aa0:	e01c      	b.n	8003adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aae:	461a      	mov	r2, r3
 8003ab0:	f000 f8b0 	bl	8003c14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2140      	movs	r1, #64	; 0x40
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 f907 	bl	8003cce <TIM_ITRx_SetConfig>
      break;
 8003ac0:	e00c      	b.n	8003adc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4619      	mov	r1, r3
 8003acc:	4610      	mov	r0, r2
 8003ace:	f000 f8fe 	bl	8003cce <TIM_ITRx_SetConfig>
      break;
 8003ad2:	e003      	b.n	8003adc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ad8:	e000      	b.n	8003adc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ada:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bc80      	pop	{r7}
 8003b06:	4770      	bx	lr

08003b08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bc80      	pop	{r7}
 8003b18:	4770      	bx	lr

08003b1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b083      	sub	sp, #12
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr

08003b2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bc80      	pop	{r7}
 8003b3c:	4770      	bx	lr

08003b3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bc80      	pop	{r7}
 8003b4e:	4770      	bx	lr

08003b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a29      	ldr	r2, [pc, #164]	; (8003c08 <TIM_Base_SetConfig+0xb8>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d00b      	beq.n	8003b80 <TIM_Base_SetConfig+0x30>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b6e:	d007      	beq.n	8003b80 <TIM_Base_SetConfig+0x30>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a26      	ldr	r2, [pc, #152]	; (8003c0c <TIM_Base_SetConfig+0xbc>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d003      	beq.n	8003b80 <TIM_Base_SetConfig+0x30>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a25      	ldr	r2, [pc, #148]	; (8003c10 <TIM_Base_SetConfig+0xc0>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d108      	bne.n	8003b92 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a1c      	ldr	r2, [pc, #112]	; (8003c08 <TIM_Base_SetConfig+0xb8>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d00b      	beq.n	8003bb2 <TIM_Base_SetConfig+0x62>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba0:	d007      	beq.n	8003bb2 <TIM_Base_SetConfig+0x62>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a19      	ldr	r2, [pc, #100]	; (8003c0c <TIM_Base_SetConfig+0xbc>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d003      	beq.n	8003bb2 <TIM_Base_SetConfig+0x62>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a18      	ldr	r2, [pc, #96]	; (8003c10 <TIM_Base_SetConfig+0xc0>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d108      	bne.n	8003bc4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a07      	ldr	r2, [pc, #28]	; (8003c08 <TIM_Base_SetConfig+0xb8>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d103      	bne.n	8003bf8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	691a      	ldr	r2, [r3, #16]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	615a      	str	r2, [r3, #20]
}
 8003bfe:	bf00      	nop
 8003c00:	3714      	adds	r7, #20
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr
 8003c08:	40012c00 	.word	0x40012c00
 8003c0c:	40000400 	.word	0x40000400
 8003c10:	40000800 	.word	0x40000800

08003c14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b087      	sub	sp, #28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	f023 0201 	bic.w	r2, r3, #1
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	011b      	lsls	r3, r3, #4
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f023 030a 	bic.w	r3, r3, #10
 8003c50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	621a      	str	r2, [r3, #32]
}
 8003c66:	bf00      	nop
 8003c68:	371c      	adds	r7, #28
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bc80      	pop	{r7}
 8003c6e:	4770      	bx	lr

08003c70 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	f023 0210 	bic.w	r2, r3, #16
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	031b      	lsls	r3, r3, #12
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	621a      	str	r2, [r3, #32]
}
 8003cc4:	bf00      	nop
 8003cc6:	371c      	adds	r7, #28
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bc80      	pop	{r7}
 8003ccc:	4770      	bx	lr

08003cce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b085      	sub	sp, #20
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
 8003cd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ce4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	f043 0307 	orr.w	r3, r3, #7
 8003cf0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	609a      	str	r2, [r3, #8]
}
 8003cf8:	bf00      	nop
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bc80      	pop	{r7}
 8003d00:	4770      	bx	lr

08003d02 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d02:	b480      	push	{r7}
 8003d04:	b087      	sub	sp, #28
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	60f8      	str	r0, [r7, #12]
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	607a      	str	r2, [r7, #4]
 8003d0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d1c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	021a      	lsls	r2, r3, #8
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	431a      	orrs	r2, r3
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	609a      	str	r2, [r3, #8]
}
 8003d36:	bf00      	nop
 8003d38:	371c      	adds	r7, #28
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bc80      	pop	{r7}
 8003d3e:	4770      	bx	lr

08003d40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d101      	bne.n	8003d58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d54:	2302      	movs	r3, #2
 8003d56:	e046      	b.n	8003de6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2202      	movs	r2, #2
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a16      	ldr	r2, [pc, #88]	; (8003df0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d00e      	beq.n	8003dba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da4:	d009      	beq.n	8003dba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a12      	ldr	r2, [pc, #72]	; (8003df4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d004      	beq.n	8003dba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a10      	ldr	r2, [pc, #64]	; (8003df8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d10c      	bne.n	8003dd4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	68ba      	ldr	r2, [r7, #8]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bc80      	pop	{r7}
 8003dee:	4770      	bx	lr
 8003df0:	40012c00 	.word	0x40012c00
 8003df4:	40000400 	.word	0x40000400
 8003df8:	40000800 	.word	0x40000800

08003dfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bc80      	pop	{r7}
 8003e0c:	4770      	bx	lr

08003e0e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bc80      	pop	{r7}
 8003e1e:	4770      	bx	lr

08003e20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e042      	b.n	8003eb8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d106      	bne.n	8003e4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7fc fd96 	bl	8000978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2224      	movs	r2, #36	; 0x24
 8003e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f82b 	bl	8003ec0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	691a      	ldr	r2, [r3, #16]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	695a      	ldr	r2, [r3, #20]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68da      	ldr	r2, [r3, #12]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68da      	ldr	r2, [r3, #12]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689a      	ldr	r2, [r3, #8]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003efa:	f023 030c 	bic.w	r3, r3, #12
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	6812      	ldr	r2, [r2, #0]
 8003f02:	68b9      	ldr	r1, [r7, #8]
 8003f04:	430b      	orrs	r3, r1
 8003f06:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	699a      	ldr	r2, [r3, #24]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a2c      	ldr	r2, [pc, #176]	; (8003fd4 <UART_SetConfig+0x114>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d103      	bne.n	8003f30 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f28:	f7ff fa08 	bl	800333c <HAL_RCC_GetPCLK2Freq>
 8003f2c:	60f8      	str	r0, [r7, #12]
 8003f2e:	e002      	b.n	8003f36 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f30:	f7ff f9f0 	bl	8003314 <HAL_RCC_GetPCLK1Freq>
 8003f34:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4413      	add	r3, r2
 8003f3e:	009a      	lsls	r2, r3, #2
 8003f40:	441a      	add	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4c:	4a22      	ldr	r2, [pc, #136]	; (8003fd8 <UART_SetConfig+0x118>)
 8003f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f52:	095b      	lsrs	r3, r3, #5
 8003f54:	0119      	lsls	r1, r3, #4
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4413      	add	r3, r2
 8003f5e:	009a      	lsls	r2, r3, #2
 8003f60:	441a      	add	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f6c:	4b1a      	ldr	r3, [pc, #104]	; (8003fd8 <UART_SetConfig+0x118>)
 8003f6e:	fba3 0302 	umull	r0, r3, r3, r2
 8003f72:	095b      	lsrs	r3, r3, #5
 8003f74:	2064      	movs	r0, #100	; 0x64
 8003f76:	fb00 f303 	mul.w	r3, r0, r3
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	3332      	adds	r3, #50	; 0x32
 8003f80:	4a15      	ldr	r2, [pc, #84]	; (8003fd8 <UART_SetConfig+0x118>)
 8003f82:	fba2 2303 	umull	r2, r3, r2, r3
 8003f86:	095b      	lsrs	r3, r3, #5
 8003f88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f8c:	4419      	add	r1, r3
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	4613      	mov	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	009a      	lsls	r2, r3, #2
 8003f98:	441a      	add	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fa4:	4b0c      	ldr	r3, [pc, #48]	; (8003fd8 <UART_SetConfig+0x118>)
 8003fa6:	fba3 0302 	umull	r0, r3, r3, r2
 8003faa:	095b      	lsrs	r3, r3, #5
 8003fac:	2064      	movs	r0, #100	; 0x64
 8003fae:	fb00 f303 	mul.w	r3, r0, r3
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	3332      	adds	r3, #50	; 0x32
 8003fb8:	4a07      	ldr	r2, [pc, #28]	; (8003fd8 <UART_SetConfig+0x118>)
 8003fba:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbe:	095b      	lsrs	r3, r3, #5
 8003fc0:	f003 020f 	and.w	r2, r3, #15
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	440a      	add	r2, r1
 8003fca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003fcc:	bf00      	nop
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40013800 	.word	0x40013800
 8003fd8:	51eb851f 	.word	0x51eb851f

08003fdc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003fdc:	b084      	sub	sp, #16
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
 8003fe6:	f107 0014 	add.w	r0, r7, #20
 8003fea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bc80      	pop	{r7}
 8003ff8:	b004      	add	sp, #16
 8003ffa:	4770      	bx	lr

08003ffc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800400c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004010:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	b29a      	uxth	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	bc80      	pop	{r7}
 8004026:	4770      	bx	lr

08004028 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004030:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004034:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800403c:	b29a      	uxth	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	b29b      	uxth	r3, r3
 8004042:	43db      	mvns	r3, r3
 8004044:	b29b      	uxth	r3, r3
 8004046:	4013      	ands	r3, r2
 8004048:	b29a      	uxth	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr

0800405c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	460b      	mov	r3, r1
 8004066:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	bc80      	pop	{r7}
 8004072:	4770      	bx	lr

08004074 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004074:	b084      	sub	sp, #16
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
 800407e:	f107 0014 	add.w	r0, r7, #20
 8004082:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bc80      	pop	{r7}
 80040b0:	b004      	add	sp, #16
 80040b2:	4770      	bx	lr

080040b4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b09d      	sub	sp, #116	; 0x74
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80040be:	2300      	movs	r3, #0
 80040c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	881b      	ldrh	r3, [r3, #0]
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80040d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040da:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	78db      	ldrb	r3, [r3, #3]
 80040e2:	2b03      	cmp	r3, #3
 80040e4:	d81f      	bhi.n	8004126 <USB_ActivateEndpoint+0x72>
 80040e6:	a201      	add	r2, pc, #4	; (adr r2, 80040ec <USB_ActivateEndpoint+0x38>)
 80040e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ec:	080040fd 	.word	0x080040fd
 80040f0:	08004119 	.word	0x08004119
 80040f4:	0800412f 	.word	0x0800412f
 80040f8:	0800410b 	.word	0x0800410b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80040fc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004100:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004104:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004108:	e012      	b.n	8004130 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800410a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800410e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004112:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004116:	e00b      	b.n	8004130 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004118:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800411c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004120:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004124:	e004      	b.n	8004130 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800412c:	e000      	b.n	8004130 <USB_ActivateEndpoint+0x7c>
      break;
 800412e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	441a      	add	r2, r3
 800413a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800413e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004142:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800414a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800414e:	b29b      	uxth	r3, r3
 8004150:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	b29b      	uxth	r3, r3
 8004160:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004168:	b29a      	uxth	r2, r3
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	b29b      	uxth	r3, r3
 8004170:	4313      	orrs	r3, r2
 8004172:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	441a      	add	r2, r3
 8004180:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800418c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004194:	b29b      	uxth	r3, r3
 8004196:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	7b1b      	ldrb	r3, [r3, #12]
 800419c:	2b00      	cmp	r3, #0
 800419e:	f040 8178 	bne.w	8004492 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	785b      	ldrb	r3, [r3, #1]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 8084 	beq.w	80042b4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	61bb      	str	r3, [r7, #24]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	461a      	mov	r2, r3
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	4413      	add	r3, r2
 80041be:	61bb      	str	r3, [r7, #24]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	011a      	lsls	r2, r3, #4
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	4413      	add	r3, r2
 80041ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041ce:	617b      	str	r3, [r7, #20]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	88db      	ldrh	r3, [r3, #6]
 80041d4:	085b      	lsrs	r3, r3, #1
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	b29a      	uxth	r2, r3
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	881b      	ldrh	r3, [r3, #0]
 80041ec:	827b      	strh	r3, [r7, #18]
 80041ee:	8a7b      	ldrh	r3, [r7, #18]
 80041f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d01b      	beq.n	8004230 <USB_ActivateEndpoint+0x17c>
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	b29b      	uxth	r3, r3
 8004206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800420a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800420e:	823b      	strh	r3, [r7, #16]
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	441a      	add	r2, r3
 800421a:	8a3b      	ldrh	r3, [r7, #16]
 800421c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004220:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004228:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800422c:	b29b      	uxth	r3, r3
 800422e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	78db      	ldrb	r3, [r3, #3]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d020      	beq.n	800427a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	881b      	ldrh	r3, [r3, #0]
 8004244:	b29b      	uxth	r3, r3
 8004246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800424a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800424e:	81bb      	strh	r3, [r7, #12]
 8004250:	89bb      	ldrh	r3, [r7, #12]
 8004252:	f083 0320 	eor.w	r3, r3, #32
 8004256:	81bb      	strh	r3, [r7, #12]
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	441a      	add	r2, r3
 8004262:	89bb      	ldrh	r3, [r7, #12]
 8004264:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004268:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800426c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004274:	b29b      	uxth	r3, r3
 8004276:	8013      	strh	r3, [r2, #0]
 8004278:	e2d5      	b.n	8004826 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4413      	add	r3, r2
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	b29b      	uxth	r3, r3
 8004288:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800428c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004290:	81fb      	strh	r3, [r7, #14]
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	441a      	add	r2, r3
 800429c:	89fb      	ldrh	r3, [r7, #14]
 800429e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	8013      	strh	r3, [r2, #0]
 80042b2:	e2b8      	b.n	8004826 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	633b      	str	r3, [r7, #48]	; 0x30
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042be:	b29b      	uxth	r3, r3
 80042c0:	461a      	mov	r2, r3
 80042c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c4:	4413      	add	r3, r2
 80042c6:	633b      	str	r3, [r7, #48]	; 0x30
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	011a      	lsls	r2, r3, #4
 80042ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d0:	4413      	add	r3, r2
 80042d2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80042d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	88db      	ldrh	r3, [r3, #6]
 80042dc:	085b      	lsrs	r3, r3, #1
 80042de:	b29b      	uxth	r3, r3
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	461a      	mov	r2, r3
 80042f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f8:	4413      	add	r3, r2
 80042fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	011a      	lsls	r2, r3, #4
 8004302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004304:	4413      	add	r3, r2
 8004306:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800430a:	627b      	str	r3, [r7, #36]	; 0x24
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	881b      	ldrh	r3, [r3, #0]
 8004310:	b29b      	uxth	r3, r3
 8004312:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004316:	b29a      	uxth	r2, r3
 8004318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431a:	801a      	strh	r2, [r3, #0]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	2b3e      	cmp	r3, #62	; 0x3e
 8004322:	d91d      	bls.n	8004360 <USB_ActivateEndpoint+0x2ac>
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	095b      	lsrs	r3, r3, #5
 800432a:	66bb      	str	r3, [r7, #104]	; 0x68
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	f003 031f 	and.w	r3, r3, #31
 8004334:	2b00      	cmp	r3, #0
 8004336:	d102      	bne.n	800433e <USB_ActivateEndpoint+0x28a>
 8004338:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800433a:	3b01      	subs	r3, #1
 800433c:	66bb      	str	r3, [r7, #104]	; 0x68
 800433e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	b29a      	uxth	r2, r3
 8004344:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004346:	b29b      	uxth	r3, r3
 8004348:	029b      	lsls	r3, r3, #10
 800434a:	b29b      	uxth	r3, r3
 800434c:	4313      	orrs	r3, r2
 800434e:	b29b      	uxth	r3, r3
 8004350:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004354:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004358:	b29a      	uxth	r2, r3
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	801a      	strh	r2, [r3, #0]
 800435e:	e026      	b.n	80043ae <USB_ActivateEndpoint+0x2fa>
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10a      	bne.n	800437e <USB_ActivateEndpoint+0x2ca>
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	b29b      	uxth	r3, r3
 800436e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004372:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004376:	b29a      	uxth	r2, r3
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	801a      	strh	r2, [r3, #0]
 800437c:	e017      	b.n	80043ae <USB_ActivateEndpoint+0x2fa>
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	085b      	lsrs	r3, r3, #1
 8004384:	66bb      	str	r3, [r7, #104]	; 0x68
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d002      	beq.n	8004398 <USB_ActivateEndpoint+0x2e4>
 8004392:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004394:	3301      	adds	r3, #1
 8004396:	66bb      	str	r3, [r7, #104]	; 0x68
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	881b      	ldrh	r3, [r3, #0]
 800439c:	b29a      	uxth	r2, r3
 800439e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	029b      	lsls	r3, r3, #10
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	4313      	orrs	r3, r2
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	4413      	add	r3, r2
 80043b8:	881b      	ldrh	r3, [r3, #0]
 80043ba:	847b      	strh	r3, [r7, #34]	; 0x22
 80043bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80043be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d01b      	beq.n	80043fe <USB_ActivateEndpoint+0x34a>
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	881b      	ldrh	r3, [r3, #0]
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043dc:	843b      	strh	r3, [r7, #32]
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	441a      	add	r2, r3
 80043e8:	8c3b      	ldrh	r3, [r7, #32]
 80043ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d124      	bne.n	8004450 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4413      	add	r3, r2
 8004410:	881b      	ldrh	r3, [r3, #0]
 8004412:	b29b      	uxth	r3, r3
 8004414:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800441c:	83bb      	strh	r3, [r7, #28]
 800441e:	8bbb      	ldrh	r3, [r7, #28]
 8004420:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004424:	83bb      	strh	r3, [r7, #28]
 8004426:	8bbb      	ldrh	r3, [r7, #28]
 8004428:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800442c:	83bb      	strh	r3, [r7, #28]
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	441a      	add	r2, r3
 8004438:	8bbb      	ldrh	r3, [r7, #28]
 800443a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800443e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800444a:	b29b      	uxth	r3, r3
 800444c:	8013      	strh	r3, [r2, #0]
 800444e:	e1ea      	b.n	8004826 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4413      	add	r3, r2
 800445a:	881b      	ldrh	r3, [r3, #0]
 800445c:	b29b      	uxth	r3, r3
 800445e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004466:	83fb      	strh	r3, [r7, #30]
 8004468:	8bfb      	ldrh	r3, [r7, #30]
 800446a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800446e:	83fb      	strh	r3, [r7, #30]
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	441a      	add	r2, r3
 800447a:	8bfb      	ldrh	r3, [r7, #30]
 800447c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004480:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004484:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800448c:	b29b      	uxth	r3, r3
 800448e:	8013      	strh	r3, [r2, #0]
 8004490:	e1c9      	b.n	8004826 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	78db      	ldrb	r3, [r3, #3]
 8004496:	2b02      	cmp	r3, #2
 8004498:	d11e      	bne.n	80044d8 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4413      	add	r3, r2
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	441a      	add	r2, r3
 80044be:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80044c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044ca:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80044ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	8013      	strh	r3, [r2, #0]
 80044d6:	e01d      	b.n	8004514 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	881b      	ldrh	r3, [r3, #0]
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80044ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ee:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	441a      	add	r2, r3
 80044fc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004500:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004504:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004508:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800450c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004510:	b29b      	uxth	r3, r3
 8004512:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800451e:	b29b      	uxth	r3, r3
 8004520:	461a      	mov	r2, r3
 8004522:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004524:	4413      	add	r3, r2
 8004526:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	011a      	lsls	r2, r3, #4
 800452e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004530:	4413      	add	r3, r2
 8004532:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004536:	65bb      	str	r3, [r7, #88]	; 0x58
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	891b      	ldrh	r3, [r3, #8]
 800453c:	085b      	lsrs	r3, r3, #1
 800453e:	b29b      	uxth	r3, r3
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	b29a      	uxth	r2, r3
 8004544:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004546:	801a      	strh	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	657b      	str	r3, [r7, #84]	; 0x54
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004552:	b29b      	uxth	r3, r3
 8004554:	461a      	mov	r2, r3
 8004556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004558:	4413      	add	r3, r2
 800455a:	657b      	str	r3, [r7, #84]	; 0x54
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	011a      	lsls	r2, r3, #4
 8004562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004564:	4413      	add	r3, r2
 8004566:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800456a:	653b      	str	r3, [r7, #80]	; 0x50
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	895b      	ldrh	r3, [r3, #10]
 8004570:	085b      	lsrs	r3, r3, #1
 8004572:	b29b      	uxth	r3, r3
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	b29a      	uxth	r2, r3
 8004578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800457a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	785b      	ldrb	r3, [r3, #1]
 8004580:	2b00      	cmp	r3, #0
 8004582:	f040 8093 	bne.w	80046ac <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	4413      	add	r3, r2
 8004590:	881b      	ldrh	r3, [r3, #0]
 8004592:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004596:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800459a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d01b      	beq.n	80045da <USB_ActivateEndpoint+0x526>
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	4413      	add	r3, r2
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	441a      	add	r2, r3
 80045c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80045c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	881b      	ldrh	r3, [r3, #0]
 80045e6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80045e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80045ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d01b      	beq.n	800462a <USB_ActivateEndpoint+0x576>
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	881b      	ldrh	r3, [r3, #0]
 80045fe:	b29b      	uxth	r3, r3
 8004600:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004608:	877b      	strh	r3, [r7, #58]	; 0x3a
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	441a      	add	r2, r3
 8004614:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004616:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800461a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800461e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004622:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004626:	b29b      	uxth	r3, r3
 8004628:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	4413      	add	r3, r2
 8004634:	881b      	ldrh	r3, [r3, #0]
 8004636:	b29b      	uxth	r3, r3
 8004638:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800463c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004640:	873b      	strh	r3, [r7, #56]	; 0x38
 8004642:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004644:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004648:	873b      	strh	r3, [r7, #56]	; 0x38
 800464a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800464c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004650:	873b      	strh	r3, [r7, #56]	; 0x38
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	441a      	add	r2, r3
 800465c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800465e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004662:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800466a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800466e:	b29b      	uxth	r3, r3
 8004670:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4413      	add	r3, r2
 800467c:	881b      	ldrh	r3, [r3, #0]
 800467e:	b29b      	uxth	r3, r3
 8004680:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004688:	86fb      	strh	r3, [r7, #54]	; 0x36
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	441a      	add	r2, r3
 8004694:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004696:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800469a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800469e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	8013      	strh	r3, [r2, #0]
 80046aa:	e0bc      	b.n	8004826 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	881b      	ldrh	r3, [r3, #0]
 80046b8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80046bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80046c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d01d      	beq.n	8004704 <USB_ActivateEndpoint+0x650>
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	881b      	ldrh	r3, [r3, #0]
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046de:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	441a      	add	r2, r3
 80046ec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80046f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004700:	b29b      	uxth	r3, r3
 8004702:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	881b      	ldrh	r3, [r3, #0]
 8004710:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004714:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800471c:	2b00      	cmp	r3, #0
 800471e:	d01d      	beq.n	800475c <USB_ActivateEndpoint+0x6a8>
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	b29b      	uxth	r3, r3
 800472e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004736:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	441a      	add	r2, r3
 8004744:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004748:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800474c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004750:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004754:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004758:	b29b      	uxth	r3, r3
 800475a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	78db      	ldrb	r3, [r3, #3]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d024      	beq.n	80047ae <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4413      	add	r3, r2
 800476e:	881b      	ldrh	r3, [r3, #0]
 8004770:	b29b      	uxth	r3, r3
 8004772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004776:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800477a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800477e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004782:	f083 0320 	eor.w	r3, r3, #32
 8004786:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	441a      	add	r2, r3
 8004794:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004798:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800479c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	8013      	strh	r3, [r2, #0]
 80047ac:	e01d      	b.n	80047ea <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4413      	add	r3, r2
 80047b8:	881b      	ldrh	r3, [r3, #0]
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047c4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	441a      	add	r2, r3
 80047d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80047d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4413      	add	r3, r2
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004800:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	441a      	add	r2, r3
 800480e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800481a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800481e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004822:	b29b      	uxth	r3, r3
 8004824:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004826:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800482a:	4618      	mov	r0, r3
 800482c:	3774      	adds	r7, #116	; 0x74
 800482e:	46bd      	mov	sp, r7
 8004830:	bc80      	pop	{r7}
 8004832:	4770      	bx	lr

08004834 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004834:	b480      	push	{r7}
 8004836:	b08d      	sub	sp, #52	; 0x34
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	7b1b      	ldrb	r3, [r3, #12]
 8004842:	2b00      	cmp	r3, #0
 8004844:	f040 808e 	bne.w	8004964 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	785b      	ldrb	r3, [r3, #1]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d044      	beq.n	80048da <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	4413      	add	r3, r2
 800485a:	881b      	ldrh	r3, [r3, #0]
 800485c:	81bb      	strh	r3, [r7, #12]
 800485e:	89bb      	ldrh	r3, [r7, #12]
 8004860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004864:	2b00      	cmp	r3, #0
 8004866:	d01b      	beq.n	80048a0 <USB_DeactivateEndpoint+0x6c>
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4413      	add	r3, r2
 8004872:	881b      	ldrh	r3, [r3, #0]
 8004874:	b29b      	uxth	r3, r3
 8004876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800487a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800487e:	817b      	strh	r3, [r7, #10]
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	441a      	add	r2, r3
 800488a:	897b      	ldrh	r3, [r7, #10]
 800488c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004890:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004894:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004898:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800489c:	b29b      	uxth	r3, r3
 800489e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	881b      	ldrh	r3, [r3, #0]
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048b6:	813b      	strh	r3, [r7, #8]
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	441a      	add	r2, r3
 80048c2:	893b      	ldrh	r3, [r7, #8]
 80048c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	8013      	strh	r3, [r2, #0]
 80048d8:	e192      	b.n	8004c00 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4413      	add	r3, r2
 80048e4:	881b      	ldrh	r3, [r3, #0]
 80048e6:	827b      	strh	r3, [r7, #18]
 80048e8:	8a7b      	ldrh	r3, [r7, #18]
 80048ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d01b      	beq.n	800492a <USB_DeactivateEndpoint+0xf6>
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	881b      	ldrh	r3, [r3, #0]
 80048fe:	b29b      	uxth	r3, r3
 8004900:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004908:	823b      	strh	r3, [r7, #16]
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	441a      	add	r2, r3
 8004914:	8a3b      	ldrh	r3, [r7, #16]
 8004916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800491a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800491e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004926:	b29b      	uxth	r3, r3
 8004928:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	881b      	ldrh	r3, [r3, #0]
 8004936:	b29b      	uxth	r3, r3
 8004938:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800493c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004940:	81fb      	strh	r3, [r7, #14]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	441a      	add	r2, r3
 800494c:	89fb      	ldrh	r3, [r7, #14]
 800494e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800495a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800495e:	b29b      	uxth	r3, r3
 8004960:	8013      	strh	r3, [r2, #0]
 8004962:	e14d      	b.n	8004c00 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	785b      	ldrb	r3, [r3, #1]
 8004968:	2b00      	cmp	r3, #0
 800496a:	f040 80a5 	bne.w	8004ab8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4413      	add	r3, r2
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	843b      	strh	r3, [r7, #32]
 800497c:	8c3b      	ldrh	r3, [r7, #32]
 800497e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d01b      	beq.n	80049be <USB_DeactivateEndpoint+0x18a>
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	4413      	add	r3, r2
 8004990:	881b      	ldrh	r3, [r3, #0]
 8004992:	b29b      	uxth	r3, r3
 8004994:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800499c:	83fb      	strh	r3, [r7, #30]
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	441a      	add	r2, r3
 80049a8:	8bfb      	ldrh	r3, [r7, #30]
 80049aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	83bb      	strh	r3, [r7, #28]
 80049cc:	8bbb      	ldrh	r3, [r7, #28]
 80049ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d01b      	beq.n	8004a0e <USB_DeactivateEndpoint+0x1da>
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4413      	add	r3, r2
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ec:	837b      	strh	r3, [r7, #26]
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	441a      	add	r2, r3
 80049f8:	8b7b      	ldrh	r3, [r7, #26]
 80049fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a24:	833b      	strh	r3, [r7, #24]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	441a      	add	r2, r3
 8004a30:	8b3b      	ldrh	r3, [r7, #24]
 8004a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a5c:	82fb      	strh	r3, [r7, #22]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	441a      	add	r2, r3
 8004a68:	8afb      	ldrh	r3, [r7, #22]
 8004a6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a94:	82bb      	strh	r3, [r7, #20]
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	441a      	add	r2, r3
 8004aa0:	8abb      	ldrh	r3, [r7, #20]
 8004aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	8013      	strh	r3, [r2, #0]
 8004ab6:	e0a3      	b.n	8004c00 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	881b      	ldrh	r3, [r3, #0]
 8004ac4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004ac6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ac8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d01b      	beq.n	8004b08 <USB_DeactivateEndpoint+0x2d4>
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	881b      	ldrh	r3, [r3, #0]
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	441a      	add	r2, r3
 8004af2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004af4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004af8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004afc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004b16:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d01b      	beq.n	8004b58 <USB_DeactivateEndpoint+0x324>
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b36:	853b      	strh	r3, [r7, #40]	; 0x28
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	441a      	add	r2, r3
 8004b42:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004b44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	881b      	ldrh	r3, [r3, #0]
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b6e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	441a      	add	r2, r3
 8004b7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ba2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ba6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	441a      	add	r2, r3
 8004bb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004bb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bde:	847b      	strh	r3, [r7, #34]	; 0x22
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	441a      	add	r2, r3
 8004bea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004bec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3734      	adds	r7, #52	; 0x34
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bc80      	pop	{r7}
 8004c0a:	4770      	bx	lr

08004c0c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b0c2      	sub	sp, #264	; 0x108
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c1a:	6018      	str	r0, [r3, #0]
 8004c1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c24:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	785b      	ldrb	r3, [r3, #1]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	f040 86b7 	bne.w	80059a6 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004c38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	699a      	ldr	r2, [r3, #24]
 8004c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d908      	bls.n	8004c66 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004c64:	e007      	b.n	8004c76 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004c66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004c76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	7b1b      	ldrb	r3, [r3, #12]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d13a      	bne.n	8004cfc <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004c86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6959      	ldr	r1, [r3, #20]
 8004c92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	88da      	ldrh	r2, [r3, #6]
 8004c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004ca8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004cac:	6800      	ldr	r0, [r0, #0]
 8004cae:	f001 fc9c 	bl	80065ea <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	613b      	str	r3, [r7, #16]
 8004cbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	461a      	mov	r2, r3
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	613b      	str	r3, [r7, #16]
 8004cd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	011a      	lsls	r2, r3, #4
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004cec:	60fb      	str	r3, [r7, #12]
 8004cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	801a      	strh	r2, [r3, #0]
 8004cf8:	f000 be1f 	b.w	800593a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	78db      	ldrb	r3, [r3, #3]
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	f040 8462 	bne.w	80055d2 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6a1a      	ldr	r2, [r3, #32]
 8004d1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	f240 83df 	bls.w	80054ea <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004d2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	881b      	ldrh	r3, [r3, #0]
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d52:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004d56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	441a      	add	r2, r3
 8004d70:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004d74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d7c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6a1a      	ldr	r2, [r3, #32]
 8004d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d98:	1ad2      	subs	r2, r2, r3
 8004d9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004da6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004daa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004db4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	881b      	ldrh	r3, [r3, #0]
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f000 81c7 	beq.w	800515c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	633b      	str	r3, [r7, #48]	; 0x30
 8004dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	785b      	ldrb	r3, [r3, #1]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d177      	bne.n	8004eda <USB_EPStartXfer+0x2ce>
 8004dea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	461a      	mov	r2, r3
 8004e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0a:	4413      	add	r3, r2
 8004e0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	011a      	lsls	r2, r3, #4
 8004e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1e:	4413      	add	r3, r2
 8004e20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e24:	627b      	str	r3, [r7, #36]	; 0x24
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	881b      	ldrh	r3, [r3, #0]
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	801a      	strh	r2, [r3, #0]
 8004e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e3a:	2b3e      	cmp	r3, #62	; 0x3e
 8004e3c:	d921      	bls.n	8004e82 <USB_EPStartXfer+0x276>
 8004e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e42:	095b      	lsrs	r3, r3, #5
 8004e44:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e4c:	f003 031f 	and.w	r3, r3, #31
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d104      	bne.n	8004e5e <USB_EPStartXfer+0x252>
 8004e54:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	881b      	ldrh	r3, [r3, #0]
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	029b      	lsls	r3, r3, #10
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	801a      	strh	r2, [r3, #0]
 8004e80:	e050      	b.n	8004f24 <USB_EPStartXfer+0x318>
 8004e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10a      	bne.n	8004ea0 <USB_EPStartXfer+0x294>
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8c:	881b      	ldrh	r3, [r3, #0]
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9c:	801a      	strh	r2, [r3, #0]
 8004e9e:	e041      	b.n	8004f24 <USB_EPStartXfer+0x318>
 8004ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ea4:	085b      	lsrs	r3, r3, #1
 8004ea6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d004      	beq.n	8004ec0 <USB_EPStartXfer+0x2b4>
 8004eb6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004eba:	3301      	adds	r3, #1
 8004ebc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	881b      	ldrh	r3, [r3, #0]
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	029b      	lsls	r3, r3, #10
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	801a      	strh	r2, [r3, #0]
 8004ed8:	e024      	b.n	8004f24 <USB_EPStartXfer+0x318>
 8004eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ede:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	785b      	ldrb	r3, [r3, #1]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d11c      	bne.n	8004f24 <USB_EPStartXfer+0x318>
 8004eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	461a      	mov	r2, r3
 8004efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efe:	4413      	add	r3, r2
 8004f00:	633b      	str	r3, [r7, #48]	; 0x30
 8004f02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	011a      	lsls	r2, r3, #4
 8004f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f12:	4413      	add	r3, r2
 8004f14:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f22:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004f24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	895b      	ldrh	r3, [r3, #10]
 8004f30:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	6959      	ldr	r1, [r3, #20]
 8004f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004f4a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004f4e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004f52:	6800      	ldr	r0, [r0, #0]
 8004f54:	f001 fb49 	bl	80065ea <USB_WritePMA>
            ep->xfer_buff += len;
 8004f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	695a      	ldr	r2, [r3, #20]
 8004f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f68:	441a      	add	r2, r3
 8004f6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004f76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6a1a      	ldr	r2, [r3, #32]
 8004f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d90f      	bls.n	8004fb2 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004f92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6a1a      	ldr	r2, [r3, #32]
 8004f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fa2:	1ad2      	subs	r2, r2, r3
 8004fa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	621a      	str	r2, [r3, #32]
 8004fb0:	e00e      	b.n	8004fd0 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004fb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004fc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004fd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	785b      	ldrb	r3, [r3, #1]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d177      	bne.n	80050d0 <USB_EPStartXfer+0x4c4>
 8004fe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fe4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	61bb      	str	r3, [r7, #24]
 8004fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ff0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	4413      	add	r3, r2
 8005002:	61bb      	str	r3, [r7, #24]
 8005004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005008:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	011a      	lsls	r2, r3, #4
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	4413      	add	r3, r2
 8005016:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800501a:	617b      	str	r3, [r7, #20]
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	881b      	ldrh	r3, [r3, #0]
 8005020:	b29b      	uxth	r3, r3
 8005022:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005026:	b29a      	uxth	r2, r3
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	801a      	strh	r2, [r3, #0]
 800502c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005030:	2b3e      	cmp	r3, #62	; 0x3e
 8005032:	d921      	bls.n	8005078 <USB_EPStartXfer+0x46c>
 8005034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005038:	095b      	lsrs	r3, r3, #5
 800503a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800503e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005042:	f003 031f 	and.w	r3, r3, #31
 8005046:	2b00      	cmp	r3, #0
 8005048:	d104      	bne.n	8005054 <USB_EPStartXfer+0x448>
 800504a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800504e:	3b01      	subs	r3, #1
 8005050:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	881b      	ldrh	r3, [r3, #0]
 8005058:	b29a      	uxth	r2, r3
 800505a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800505e:	b29b      	uxth	r3, r3
 8005060:	029b      	lsls	r3, r3, #10
 8005062:	b29b      	uxth	r3, r3
 8005064:	4313      	orrs	r3, r2
 8005066:	b29b      	uxth	r3, r3
 8005068:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800506c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005070:	b29a      	uxth	r2, r3
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	801a      	strh	r2, [r3, #0]
 8005076:	e056      	b.n	8005126 <USB_EPStartXfer+0x51a>
 8005078:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10a      	bne.n	8005096 <USB_EPStartXfer+0x48a>
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	881b      	ldrh	r3, [r3, #0]
 8005084:	b29b      	uxth	r3, r3
 8005086:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800508a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800508e:	b29a      	uxth	r2, r3
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	801a      	strh	r2, [r3, #0]
 8005094:	e047      	b.n	8005126 <USB_EPStartXfer+0x51a>
 8005096:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800509a:	085b      	lsrs	r3, r3, #1
 800509c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80050a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d004      	beq.n	80050b6 <USB_EPStartXfer+0x4aa>
 80050ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050b0:	3301      	adds	r3, #1
 80050b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	881b      	ldrh	r3, [r3, #0]
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	029b      	lsls	r3, r3, #10
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	4313      	orrs	r3, r2
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	801a      	strh	r2, [r3, #0]
 80050ce:	e02a      	b.n	8005126 <USB_EPStartXfer+0x51a>
 80050d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	785b      	ldrb	r3, [r3, #1]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d122      	bne.n	8005126 <USB_EPStartXfer+0x51a>
 80050e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	623b      	str	r3, [r7, #32]
 80050ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	461a      	mov	r2, r3
 80050fe:	6a3b      	ldr	r3, [r7, #32]
 8005100:	4413      	add	r3, r2
 8005102:	623b      	str	r3, [r7, #32]
 8005104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	011a      	lsls	r2, r3, #4
 8005112:	6a3b      	ldr	r3, [r7, #32]
 8005114:	4413      	add	r3, r2
 8005116:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800511a:	61fb      	str	r3, [r7, #28]
 800511c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005120:	b29a      	uxth	r2, r3
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800512a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	891b      	ldrh	r3, [r3, #8]
 8005132:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800513a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6959      	ldr	r1, [r3, #20]
 8005142:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005146:	b29b      	uxth	r3, r3
 8005148:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800514c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005150:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005154:	6800      	ldr	r0, [r0, #0]
 8005156:	f001 fa48 	bl	80065ea <USB_WritePMA>
 800515a:	e3ee      	b.n	800593a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800515c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	785b      	ldrb	r3, [r3, #1]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d177      	bne.n	800525c <USB_EPStartXfer+0x650>
 800516c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005170:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	64bb      	str	r3, [r7, #72]	; 0x48
 8005178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800517c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005186:	b29b      	uxth	r3, r3
 8005188:	461a      	mov	r2, r3
 800518a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800518c:	4413      	add	r3, r2
 800518e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005194:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	011a      	lsls	r2, r3, #4
 800519e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051a0:	4413      	add	r3, r2
 80051a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051a6:	647b      	str	r3, [r7, #68]	; 0x44
 80051a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051aa:	881b      	ldrh	r3, [r3, #0]
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051b6:	801a      	strh	r2, [r3, #0]
 80051b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051bc:	2b3e      	cmp	r3, #62	; 0x3e
 80051be:	d921      	bls.n	8005204 <USB_EPStartXfer+0x5f8>
 80051c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051c4:	095b      	lsrs	r3, r3, #5
 80051c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80051ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051ce:	f003 031f 	and.w	r3, r3, #31
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d104      	bne.n	80051e0 <USB_EPStartXfer+0x5d4>
 80051d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051da:	3b01      	subs	r3, #1
 80051dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80051e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051e2:	881b      	ldrh	r3, [r3, #0]
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	029b      	lsls	r3, r3, #10
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	4313      	orrs	r3, r2
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005200:	801a      	strh	r2, [r3, #0]
 8005202:	e056      	b.n	80052b2 <USB_EPStartXfer+0x6a6>
 8005204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005208:	2b00      	cmp	r3, #0
 800520a:	d10a      	bne.n	8005222 <USB_EPStartXfer+0x616>
 800520c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800520e:	881b      	ldrh	r3, [r3, #0]
 8005210:	b29b      	uxth	r3, r3
 8005212:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005216:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800521a:	b29a      	uxth	r2, r3
 800521c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800521e:	801a      	strh	r2, [r3, #0]
 8005220:	e047      	b.n	80052b2 <USB_EPStartXfer+0x6a6>
 8005222:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005226:	085b      	lsrs	r3, r3, #1
 8005228:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800522c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005230:	f003 0301 	and.w	r3, r3, #1
 8005234:	2b00      	cmp	r3, #0
 8005236:	d004      	beq.n	8005242 <USB_EPStartXfer+0x636>
 8005238:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800523c:	3301      	adds	r3, #1
 800523e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005244:	881b      	ldrh	r3, [r3, #0]
 8005246:	b29a      	uxth	r2, r3
 8005248:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800524c:	b29b      	uxth	r3, r3
 800524e:	029b      	lsls	r3, r3, #10
 8005250:	b29b      	uxth	r3, r3
 8005252:	4313      	orrs	r3, r2
 8005254:	b29a      	uxth	r2, r3
 8005256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005258:	801a      	strh	r2, [r3, #0]
 800525a:	e02a      	b.n	80052b2 <USB_EPStartXfer+0x6a6>
 800525c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005260:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	785b      	ldrb	r3, [r3, #1]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d122      	bne.n	80052b2 <USB_EPStartXfer+0x6a6>
 800526c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005270:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	653b      	str	r3, [r7, #80]	; 0x50
 8005278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800527c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005286:	b29b      	uxth	r3, r3
 8005288:	461a      	mov	r2, r3
 800528a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800528c:	4413      	add	r3, r2
 800528e:	653b      	str	r3, [r7, #80]	; 0x50
 8005290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	011a      	lsls	r2, r3, #4
 800529e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052a0:	4413      	add	r3, r2
 80052a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80052b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	891b      	ldrh	r3, [r3, #8]
 80052be:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6959      	ldr	r1, [r3, #20]
 80052ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80052d8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80052dc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80052e0:	6800      	ldr	r0, [r0, #0]
 80052e2:	f001 f982 	bl	80065ea <USB_WritePMA>
            ep->xfer_buff += len;
 80052e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	695a      	ldr	r2, [r3, #20]
 80052f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052f6:	441a      	add	r2, r3
 80052f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005308:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6a1a      	ldr	r2, [r3, #32]
 8005310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005314:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	429a      	cmp	r2, r3
 800531e:	d90f      	bls.n	8005340 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005324:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6a1a      	ldr	r2, [r3, #32]
 800532c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005330:	1ad2      	subs	r2, r2, r3
 8005332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005336:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	621a      	str	r2, [r3, #32]
 800533e:	e00e      	b.n	800535e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005344:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	6a1b      	ldr	r3, [r3, #32]
 800534c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005354:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2200      	movs	r2, #0
 800535c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800535e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005362:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	643b      	str	r3, [r7, #64]	; 0x40
 800536a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800536e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	785b      	ldrb	r3, [r3, #1]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d177      	bne.n	800546a <USB_EPStartXfer+0x85e>
 800537a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800537e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	63bb      	str	r3, [r7, #56]	; 0x38
 8005386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800538a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005394:	b29b      	uxth	r3, r3
 8005396:	461a      	mov	r2, r3
 8005398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539a:	4413      	add	r3, r2
 800539c:	63bb      	str	r3, [r7, #56]	; 0x38
 800539e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	011a      	lsls	r2, r3, #4
 80053ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ae:	4413      	add	r3, r2
 80053b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053b4:	637b      	str	r3, [r7, #52]	; 0x34
 80053b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c4:	801a      	strh	r2, [r3, #0]
 80053c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053ca:	2b3e      	cmp	r3, #62	; 0x3e
 80053cc:	d921      	bls.n	8005412 <USB_EPStartXfer+0x806>
 80053ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053d2:	095b      	lsrs	r3, r3, #5
 80053d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80053d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053dc:	f003 031f 	and.w	r3, r3, #31
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d104      	bne.n	80053ee <USB_EPStartXfer+0x7e2>
 80053e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053e8:	3b01      	subs	r3, #1
 80053ea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80053ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f0:	881b      	ldrh	r3, [r3, #0]
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	029b      	lsls	r3, r3, #10
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	4313      	orrs	r3, r2
 8005400:	b29b      	uxth	r3, r3
 8005402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800540a:	b29a      	uxth	r2, r3
 800540c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800540e:	801a      	strh	r2, [r3, #0]
 8005410:	e050      	b.n	80054b4 <USB_EPStartXfer+0x8a8>
 8005412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10a      	bne.n	8005430 <USB_EPStartXfer+0x824>
 800541a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	b29b      	uxth	r3, r3
 8005420:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005424:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005428:	b29a      	uxth	r2, r3
 800542a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800542c:	801a      	strh	r2, [r3, #0]
 800542e:	e041      	b.n	80054b4 <USB_EPStartXfer+0x8a8>
 8005430:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005434:	085b      	lsrs	r3, r3, #1
 8005436:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800543a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	2b00      	cmp	r3, #0
 8005444:	d004      	beq.n	8005450 <USB_EPStartXfer+0x844>
 8005446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800544a:	3301      	adds	r3, #1
 800544c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005452:	881b      	ldrh	r3, [r3, #0]
 8005454:	b29a      	uxth	r2, r3
 8005456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800545a:	b29b      	uxth	r3, r3
 800545c:	029b      	lsls	r3, r3, #10
 800545e:	b29b      	uxth	r3, r3
 8005460:	4313      	orrs	r3, r2
 8005462:	b29a      	uxth	r2, r3
 8005464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005466:	801a      	strh	r2, [r3, #0]
 8005468:	e024      	b.n	80054b4 <USB_EPStartXfer+0x8a8>
 800546a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800546e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	785b      	ldrb	r3, [r3, #1]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d11c      	bne.n	80054b4 <USB_EPStartXfer+0x8a8>
 800547a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800547e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005488:	b29b      	uxth	r3, r3
 800548a:	461a      	mov	r2, r3
 800548c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800548e:	4413      	add	r3, r2
 8005490:	643b      	str	r3, [r7, #64]	; 0x40
 8005492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005496:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	011a      	lsls	r2, r3, #4
 80054a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054a2:	4413      	add	r3, r2
 80054a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054b2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80054b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	895b      	ldrh	r3, [r3, #10]
 80054c0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	6959      	ldr	r1, [r3, #20]
 80054d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80054da:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80054de:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80054e2:	6800      	ldr	r0, [r0, #0]
 80054e4:	f001 f881 	bl	80065ea <USB_WritePMA>
 80054e8:	e227      	b.n	800593a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80054ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80054fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005508:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	881b      	ldrh	r3, [r3, #0]
 8005516:	b29b      	uxth	r3, r3
 8005518:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800551c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005520:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005528:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005532:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	441a      	add	r2, r3
 800553e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005542:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005546:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800554a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800554e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005552:	b29b      	uxth	r3, r3
 8005554:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800555a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005566:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005570:	b29b      	uxth	r3, r3
 8005572:	461a      	mov	r2, r3
 8005574:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005576:	4413      	add	r3, r2
 8005578:	65fb      	str	r3, [r7, #92]	; 0x5c
 800557a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800557e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	011a      	lsls	r2, r3, #4
 8005588:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800558a:	4413      	add	r3, r2
 800558c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005590:	65bb      	str	r3, [r7, #88]	; 0x58
 8005592:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005596:	b29a      	uxth	r2, r3
 8005598:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800559a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800559c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	891b      	ldrh	r3, [r3, #8]
 80055a8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	6959      	ldr	r1, [r3, #20]
 80055b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055bc:	b29b      	uxth	r3, r3
 80055be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80055c2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80055c6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80055ca:	6800      	ldr	r0, [r0, #0]
 80055cc:	f001 f80d 	bl	80065ea <USB_WritePMA>
 80055d0:	e1b3      	b.n	800593a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80055d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6a1a      	ldr	r2, [r3, #32]
 80055de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055e2:	1ad2      	subs	r2, r2, r3
 80055e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80055f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	4413      	add	r3, r2
 800560a:	881b      	ldrh	r3, [r3, #0]
 800560c:	b29b      	uxth	r3, r3
 800560e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005612:	2b00      	cmp	r3, #0
 8005614:	f000 80c6 	beq.w	80057a4 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800561c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	673b      	str	r3, [r7, #112]	; 0x70
 8005624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005628:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	785b      	ldrb	r3, [r3, #1]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d177      	bne.n	8005724 <USB_EPStartXfer+0xb18>
 8005634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005638:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005644:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800564e:	b29b      	uxth	r3, r3
 8005650:	461a      	mov	r2, r3
 8005652:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005654:	4413      	add	r3, r2
 8005656:	66bb      	str	r3, [r7, #104]	; 0x68
 8005658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800565c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	011a      	lsls	r2, r3, #4
 8005666:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005668:	4413      	add	r3, r2
 800566a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800566e:	667b      	str	r3, [r7, #100]	; 0x64
 8005670:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005672:	881b      	ldrh	r3, [r3, #0]
 8005674:	b29b      	uxth	r3, r3
 8005676:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800567a:	b29a      	uxth	r2, r3
 800567c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800567e:	801a      	strh	r2, [r3, #0]
 8005680:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005684:	2b3e      	cmp	r3, #62	; 0x3e
 8005686:	d921      	bls.n	80056cc <USB_EPStartXfer+0xac0>
 8005688:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800568c:	095b      	lsrs	r3, r3, #5
 800568e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005692:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005696:	f003 031f 	and.w	r3, r3, #31
 800569a:	2b00      	cmp	r3, #0
 800569c:	d104      	bne.n	80056a8 <USB_EPStartXfer+0xa9c>
 800569e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80056a2:	3b01      	subs	r3, #1
 80056a4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80056a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056aa:	881b      	ldrh	r3, [r3, #0]
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	029b      	lsls	r3, r3, #10
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	4313      	orrs	r3, r2
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056c8:	801a      	strh	r2, [r3, #0]
 80056ca:	e050      	b.n	800576e <USB_EPStartXfer+0xb62>
 80056cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10a      	bne.n	80056ea <USB_EPStartXfer+0xade>
 80056d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056d6:	881b      	ldrh	r3, [r3, #0]
 80056d8:	b29b      	uxth	r3, r3
 80056da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056e6:	801a      	strh	r2, [r3, #0]
 80056e8:	e041      	b.n	800576e <USB_EPStartXfer+0xb62>
 80056ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056ee:	085b      	lsrs	r3, r3, #1
 80056f0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80056f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056f8:	f003 0301 	and.w	r3, r3, #1
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d004      	beq.n	800570a <USB_EPStartXfer+0xafe>
 8005700:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005704:	3301      	adds	r3, #1
 8005706:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800570a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800570c:	881b      	ldrh	r3, [r3, #0]
 800570e:	b29a      	uxth	r2, r3
 8005710:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005714:	b29b      	uxth	r3, r3
 8005716:	029b      	lsls	r3, r3, #10
 8005718:	b29b      	uxth	r3, r3
 800571a:	4313      	orrs	r3, r2
 800571c:	b29a      	uxth	r2, r3
 800571e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005720:	801a      	strh	r2, [r3, #0]
 8005722:	e024      	b.n	800576e <USB_EPStartXfer+0xb62>
 8005724:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005728:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	785b      	ldrb	r3, [r3, #1]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d11c      	bne.n	800576e <USB_EPStartXfer+0xb62>
 8005734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005738:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005742:	b29b      	uxth	r3, r3
 8005744:	461a      	mov	r2, r3
 8005746:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005748:	4413      	add	r3, r2
 800574a:	673b      	str	r3, [r7, #112]	; 0x70
 800574c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005750:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	011a      	lsls	r2, r3, #4
 800575a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800575c:	4413      	add	r3, r2
 800575e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005762:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005764:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005768:	b29a      	uxth	r2, r3
 800576a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800576c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800576e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	895b      	ldrh	r3, [r3, #10]
 800577a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800577e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005782:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6959      	ldr	r1, [r3, #20]
 800578a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800578e:	b29b      	uxth	r3, r3
 8005790:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005794:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005798:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800579c:	6800      	ldr	r0, [r0, #0]
 800579e:	f000 ff24 	bl	80065ea <USB_WritePMA>
 80057a2:	e0ca      	b.n	800593a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80057a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	785b      	ldrb	r3, [r3, #1]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d177      	bne.n	80058a4 <USB_EPStartXfer+0xc98>
 80057b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80057c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	461a      	mov	r2, r3
 80057d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057d4:	4413      	add	r3, r2
 80057d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80057d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	011a      	lsls	r2, r3, #4
 80057e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057e8:	4413      	add	r3, r2
 80057ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80057f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057f2:	881b      	ldrh	r3, [r3, #0]
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057fe:	801a      	strh	r2, [r3, #0]
 8005800:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005804:	2b3e      	cmp	r3, #62	; 0x3e
 8005806:	d921      	bls.n	800584c <USB_EPStartXfer+0xc40>
 8005808:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800580c:	095b      	lsrs	r3, r3, #5
 800580e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005816:	f003 031f 	and.w	r3, r3, #31
 800581a:	2b00      	cmp	r3, #0
 800581c:	d104      	bne.n	8005828 <USB_EPStartXfer+0xc1c>
 800581e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005822:	3b01      	subs	r3, #1
 8005824:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005828:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800582a:	881b      	ldrh	r3, [r3, #0]
 800582c:	b29a      	uxth	r2, r3
 800582e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005832:	b29b      	uxth	r3, r3
 8005834:	029b      	lsls	r3, r3, #10
 8005836:	b29b      	uxth	r3, r3
 8005838:	4313      	orrs	r3, r2
 800583a:	b29b      	uxth	r3, r3
 800583c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005840:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005844:	b29a      	uxth	r2, r3
 8005846:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005848:	801a      	strh	r2, [r3, #0]
 800584a:	e05c      	b.n	8005906 <USB_EPStartXfer+0xcfa>
 800584c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10a      	bne.n	800586a <USB_EPStartXfer+0xc5e>
 8005854:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005856:	881b      	ldrh	r3, [r3, #0]
 8005858:	b29b      	uxth	r3, r3
 800585a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800585e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005862:	b29a      	uxth	r2, r3
 8005864:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005866:	801a      	strh	r2, [r3, #0]
 8005868:	e04d      	b.n	8005906 <USB_EPStartXfer+0xcfa>
 800586a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800586e:	085b      	lsrs	r3, r3, #1
 8005870:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b00      	cmp	r3, #0
 800587e:	d004      	beq.n	800588a <USB_EPStartXfer+0xc7e>
 8005880:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005884:	3301      	adds	r3, #1
 8005886:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800588a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	b29a      	uxth	r2, r3
 8005890:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005894:	b29b      	uxth	r3, r3
 8005896:	029b      	lsls	r3, r3, #10
 8005898:	b29b      	uxth	r3, r3
 800589a:	4313      	orrs	r3, r2
 800589c:	b29a      	uxth	r2, r3
 800589e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058a0:	801a      	strh	r2, [r3, #0]
 80058a2:	e030      	b.n	8005906 <USB_EPStartXfer+0xcfa>
 80058a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	785b      	ldrb	r3, [r3, #1]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d128      	bne.n	8005906 <USB_EPStartXfer+0xcfa>
 80058b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80058c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	461a      	mov	r2, r3
 80058d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058d8:	4413      	add	r3, r2
 80058da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80058de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	011a      	lsls	r2, r3, #4
 80058ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058f0:	4413      	add	r3, r2
 80058f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80058fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058fe:	b29a      	uxth	r2, r3
 8005900:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005904:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800590a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	891b      	ldrh	r3, [r3, #8]
 8005912:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800591a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6959      	ldr	r1, [r3, #20]
 8005922:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005926:	b29b      	uxth	r3, r3
 8005928:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800592c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005930:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005934:	6800      	ldr	r0, [r0, #0]
 8005936:	f000 fe58 	bl	80065ea <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800593a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800593e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005948:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4413      	add	r3, r2
 8005954:	881b      	ldrh	r3, [r3, #0]
 8005956:	b29b      	uxth	r3, r3
 8005958:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800595c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005960:	817b      	strh	r3, [r7, #10]
 8005962:	897b      	ldrh	r3, [r7, #10]
 8005964:	f083 0310 	eor.w	r3, r3, #16
 8005968:	817b      	strh	r3, [r7, #10]
 800596a:	897b      	ldrh	r3, [r7, #10]
 800596c:	f083 0320 	eor.w	r3, r3, #32
 8005970:	817b      	strh	r3, [r7, #10]
 8005972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005976:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005980:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	441a      	add	r2, r3
 800598c:	897b      	ldrh	r3, [r7, #10]
 800598e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005992:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800599a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800599e:	b29b      	uxth	r3, r3
 80059a0:	8013      	strh	r3, [r2, #0]
 80059a2:	f000 bcde 	b.w	8006362 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80059a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	7b1b      	ldrb	r3, [r3, #12]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	f040 80bb 	bne.w	8005b2e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80059b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	699a      	ldr	r2, [r3, #24]
 80059c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d917      	bls.n	8005a04 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80059d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80059e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	699a      	ldr	r2, [r3, #24]
 80059f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059f4:	1ad2      	subs	r2, r2, r3
 80059f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	619a      	str	r2, [r3, #24]
 8005a02:	e00e      	b.n	8005a22 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005a04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	699b      	ldr	r3, [r3, #24]
 8005a10:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005a14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005a22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	461a      	mov	r2, r3
 8005a42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a46:	4413      	add	r3, r2
 8005a48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	011a      	lsls	r2, r3, #4
 8005a5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a5e:	4413      	add	r3, r2
 8005a60:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005a68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a6c:	881b      	ldrh	r3, [r3, #0]
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a7a:	801a      	strh	r2, [r3, #0]
 8005a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a80:	2b3e      	cmp	r3, #62	; 0x3e
 8005a82:	d924      	bls.n	8005ace <USB_EPStartXfer+0xec2>
 8005a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a88:	095b      	lsrs	r3, r3, #5
 8005a8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a92:	f003 031f 	and.w	r3, r3, #31
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d104      	bne.n	8005aa4 <USB_EPStartXfer+0xe98>
 8005a9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005aa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005aa8:	881b      	ldrh	r3, [r3, #0]
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	029b      	lsls	r3, r3, #10
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005abe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ac8:	801a      	strh	r2, [r3, #0]
 8005aca:	f000 bc10 	b.w	80062ee <USB_EPStartXfer+0x16e2>
 8005ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10c      	bne.n	8005af0 <USB_EPStartXfer+0xee4>
 8005ad6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ada:	881b      	ldrh	r3, [r3, #0]
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ae2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005aec:	801a      	strh	r2, [r3, #0]
 8005aee:	e3fe      	b.n	80062ee <USB_EPStartXfer+0x16e2>
 8005af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005af4:	085b      	lsrs	r3, r3, #1
 8005af6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d004      	beq.n	8005b10 <USB_EPStartXfer+0xf04>
 8005b06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	029b      	lsls	r3, r3, #10
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	4313      	orrs	r3, r2
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b2a:	801a      	strh	r2, [r3, #0]
 8005b2c:	e3df      	b.n	80062ee <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	78db      	ldrb	r3, [r3, #3]
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	f040 8218 	bne.w	8005f70 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	785b      	ldrb	r3, [r3, #1]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f040 809d 	bne.w	8005c8c <USB_EPStartXfer+0x1080>
 8005b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	461a      	mov	r2, r3
 8005b72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b76:	4413      	add	r3, r2
 8005b78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	011a      	lsls	r2, r3, #4
 8005b8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b8e:	4413      	add	r3, r2
 8005b90:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005baa:	801a      	strh	r2, [r3, #0]
 8005bac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	2b3e      	cmp	r3, #62	; 0x3e
 8005bba:	d92b      	bls.n	8005c14 <USB_EPStartXfer+0x1008>
 8005bbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	095b      	lsrs	r3, r3, #5
 8005bca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	f003 031f 	and.w	r3, r3, #31
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d104      	bne.n	8005bec <USB_EPStartXfer+0xfe0>
 8005be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005be6:	3b01      	subs	r3, #1
 8005be8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005bf0:	881b      	ldrh	r3, [r3, #0]
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	029b      	lsls	r3, r3, #10
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c10:	801a      	strh	r2, [r3, #0]
 8005c12:	e070      	b.n	8005cf6 <USB_EPStartXfer+0x10ea>
 8005c14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10c      	bne.n	8005c3e <USB_EPStartXfer+0x1032>
 8005c24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c3a:	801a      	strh	r2, [r3, #0]
 8005c3c:	e05b      	b.n	8005cf6 <USB_EPStartXfer+0x10ea>
 8005c3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	085b      	lsrs	r3, r3, #1
 8005c4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d004      	beq.n	8005c6e <USB_EPStartXfer+0x1062>
 8005c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c68:	3301      	adds	r3, #1
 8005c6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c72:	881b      	ldrh	r3, [r3, #0]
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	029b      	lsls	r3, r3, #10
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	4313      	orrs	r3, r2
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c88:	801a      	strh	r2, [r3, #0]
 8005c8a:	e034      	b.n	8005cf6 <USB_EPStartXfer+0x10ea>
 8005c8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	785b      	ldrb	r3, [r3, #1]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d12c      	bne.n	8005cf6 <USB_EPStartXfer+0x10ea>
 8005c9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ca0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005caa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	461a      	mov	r2, r3
 8005cbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	011a      	lsls	r2, r3, #4
 8005cd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005cd8:	4413      	add	r3, r2
 8005cda:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ce2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ce6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	b29a      	uxth	r2, r3
 8005cf0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005cf4:	801a      	strh	r2, [r3, #0]
 8005cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	785b      	ldrb	r3, [r3, #1]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f040 809d 	bne.w	8005e50 <USB_EPStartXfer+0x1244>
 8005d16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	461a      	mov	r2, r3
 8005d36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	011a      	lsls	r2, r3, #4
 8005d4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d52:	4413      	add	r3, r2
 8005d54:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d60:	881b      	ldrh	r3, [r3, #0]
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d6e:	801a      	strh	r2, [r3, #0]
 8005d70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	2b3e      	cmp	r3, #62	; 0x3e
 8005d7e:	d92b      	bls.n	8005dd8 <USB_EPStartXfer+0x11cc>
 8005d80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	095b      	lsrs	r3, r3, #5
 8005d8e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	f003 031f 	and.w	r3, r3, #31
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d104      	bne.n	8005db0 <USB_EPStartXfer+0x11a4>
 8005da6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005daa:	3b01      	subs	r3, #1
 8005dac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005db0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	029b      	lsls	r3, r3, #10
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005dd4:	801a      	strh	r2, [r3, #0]
 8005dd6:	e069      	b.n	8005eac <USB_EPStartXfer+0x12a0>
 8005dd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ddc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10c      	bne.n	8005e02 <USB_EPStartXfer+0x11f6>
 8005de8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005dec:	881b      	ldrh	r3, [r3, #0]
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005df4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005dfe:	801a      	strh	r2, [r3, #0]
 8005e00:	e054      	b.n	8005eac <USB_EPStartXfer+0x12a0>
 8005e02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	085b      	lsrs	r3, r3, #1
 8005e10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d004      	beq.n	8005e32 <USB_EPStartXfer+0x1226>
 8005e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e32:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e36:	881b      	ldrh	r3, [r3, #0]
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	029b      	lsls	r3, r3, #10
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	4313      	orrs	r3, r2
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e4c:	801a      	strh	r2, [r3, #0]
 8005e4e:	e02d      	b.n	8005eac <USB_EPStartXfer+0x12a0>
 8005e50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	785b      	ldrb	r3, [r3, #1]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d125      	bne.n	8005eac <USB_EPStartXfer+0x12a0>
 8005e60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	461a      	mov	r2, r3
 8005e72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e76:	4413      	add	r3, r2
 8005e78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	011a      	lsls	r2, r3, #4
 8005e8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e8e:	4413      	add	r3, r2
 8005e90:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005eaa:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005eac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	69db      	ldr	r3, [r3, #28]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f000 8218 	beq.w	80062ee <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ec2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ecc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4413      	add	r3, r2
 8005ed8:	881b      	ldrh	r3, [r3, #0]
 8005eda:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005ede:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d005      	beq.n	8005ef6 <USB_EPStartXfer+0x12ea>
 8005eea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d10d      	bne.n	8005f12 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005ef6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f040 81f5 	bne.w	80062ee <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005f04:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f040 81ee 	bne.w	80062ee <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005f12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	4413      	add	r3, r2
 8005f2c:	881b      	ldrh	r3, [r3, #0]
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f38:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8005f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	441a      	add	r2, r3
 8005f56:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8005f5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	8013      	strh	r3, [r2, #0]
 8005f6e:	e1be      	b.n	80062ee <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005f70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	78db      	ldrb	r3, [r3, #3]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	f040 81b4 	bne.w	80062ea <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	699a      	ldr	r2, [r3, #24]
 8005f8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d917      	bls.n	8005fce <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8005f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8005fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	699a      	ldr	r2, [r3, #24]
 8005fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fbe:	1ad2      	subs	r2, r2, r3
 8005fc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	619a      	str	r2, [r3, #24]
 8005fcc:	e00e      	b.n	8005fec <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8005fce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8005fde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ff0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	785b      	ldrb	r3, [r3, #1]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f040 8085 	bne.w	8006108 <USB_EPStartXfer+0x14fc>
 8005ffe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006002:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800600c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006010:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800601a:	b29b      	uxth	r3, r3
 800601c:	461a      	mov	r2, r3
 800601e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006022:	4413      	add	r3, r2
 8006024:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800602c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	011a      	lsls	r2, r3, #4
 8006036:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800603a:	4413      	add	r3, r2
 800603c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006040:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006044:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006048:	881b      	ldrh	r3, [r3, #0]
 800604a:	b29b      	uxth	r3, r3
 800604c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006050:	b29a      	uxth	r2, r3
 8006052:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006056:	801a      	strh	r2, [r3, #0]
 8006058:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800605c:	2b3e      	cmp	r3, #62	; 0x3e
 800605e:	d923      	bls.n	80060a8 <USB_EPStartXfer+0x149c>
 8006060:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006064:	095b      	lsrs	r3, r3, #5
 8006066:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800606a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800606e:	f003 031f 	and.w	r3, r3, #31
 8006072:	2b00      	cmp	r3, #0
 8006074:	d104      	bne.n	8006080 <USB_EPStartXfer+0x1474>
 8006076:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800607a:	3b01      	subs	r3, #1
 800607c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006080:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006084:	881b      	ldrh	r3, [r3, #0]
 8006086:	b29a      	uxth	r2, r3
 8006088:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800608c:	b29b      	uxth	r3, r3
 800608e:	029b      	lsls	r3, r3, #10
 8006090:	b29b      	uxth	r3, r3
 8006092:	4313      	orrs	r3, r2
 8006094:	b29b      	uxth	r3, r3
 8006096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800609a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800609e:	b29a      	uxth	r2, r3
 80060a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060a4:	801a      	strh	r2, [r3, #0]
 80060a6:	e060      	b.n	800616a <USB_EPStartXfer+0x155e>
 80060a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10c      	bne.n	80060ca <USB_EPStartXfer+0x14be>
 80060b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060b4:	881b      	ldrh	r3, [r3, #0]
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060c6:	801a      	strh	r2, [r3, #0]
 80060c8:	e04f      	b.n	800616a <USB_EPStartXfer+0x155e>
 80060ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ce:	085b      	lsrs	r3, r3, #1
 80060d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80060d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060d8:	f003 0301 	and.w	r3, r3, #1
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d004      	beq.n	80060ea <USB_EPStartXfer+0x14de>
 80060e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060e4:	3301      	adds	r3, #1
 80060e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80060ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060ee:	881b      	ldrh	r3, [r3, #0]
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	029b      	lsls	r3, r3, #10
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	4313      	orrs	r3, r2
 80060fe:	b29a      	uxth	r2, r3
 8006100:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006104:	801a      	strh	r2, [r3, #0]
 8006106:	e030      	b.n	800616a <USB_EPStartXfer+0x155e>
 8006108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800610c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	785b      	ldrb	r3, [r3, #1]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d128      	bne.n	800616a <USB_EPStartXfer+0x155e>
 8006118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800611c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800612a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006134:	b29b      	uxth	r3, r3
 8006136:	461a      	mov	r2, r3
 8006138:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800613c:	4413      	add	r3, r2
 800613e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006146:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	011a      	lsls	r2, r3, #4
 8006150:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006154:	4413      	add	r3, r2
 8006156:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800615a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800615e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006162:	b29a      	uxth	r2, r3
 8006164:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006168:	801a      	strh	r2, [r3, #0]
 800616a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800616e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800617c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	785b      	ldrb	r3, [r3, #1]
 8006184:	2b00      	cmp	r3, #0
 8006186:	f040 8085 	bne.w	8006294 <USB_EPStartXfer+0x1688>
 800618a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800618e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800619c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	461a      	mov	r2, r3
 80061aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80061ae:	4413      	add	r3, r2
 80061b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80061b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	011a      	lsls	r2, r3, #4
 80061c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80061c6:	4413      	add	r3, r2
 80061c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061d4:	881b      	ldrh	r3, [r3, #0]
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061dc:	b29a      	uxth	r2, r3
 80061de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061e2:	801a      	strh	r2, [r3, #0]
 80061e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061e8:	2b3e      	cmp	r3, #62	; 0x3e
 80061ea:	d923      	bls.n	8006234 <USB_EPStartXfer+0x1628>
 80061ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061f0:	095b      	lsrs	r3, r3, #5
 80061f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80061f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061fa:	f003 031f 	and.w	r3, r3, #31
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d104      	bne.n	800620c <USB_EPStartXfer+0x1600>
 8006202:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006206:	3b01      	subs	r3, #1
 8006208:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800620c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	b29a      	uxth	r2, r3
 8006214:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006218:	b29b      	uxth	r3, r3
 800621a:	029b      	lsls	r3, r3, #10
 800621c:	b29b      	uxth	r3, r3
 800621e:	4313      	orrs	r3, r2
 8006220:	b29b      	uxth	r3, r3
 8006222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800622a:	b29a      	uxth	r2, r3
 800622c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006230:	801a      	strh	r2, [r3, #0]
 8006232:	e05c      	b.n	80062ee <USB_EPStartXfer+0x16e2>
 8006234:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10c      	bne.n	8006256 <USB_EPStartXfer+0x164a>
 800623c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006240:	881b      	ldrh	r3, [r3, #0]
 8006242:	b29b      	uxth	r3, r3
 8006244:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006248:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800624c:	b29a      	uxth	r2, r3
 800624e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006252:	801a      	strh	r2, [r3, #0]
 8006254:	e04b      	b.n	80062ee <USB_EPStartXfer+0x16e2>
 8006256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800625a:	085b      	lsrs	r3, r3, #1
 800625c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006260:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	2b00      	cmp	r3, #0
 800626a:	d004      	beq.n	8006276 <USB_EPStartXfer+0x166a>
 800626c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006270:	3301      	adds	r3, #1
 8006272:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006276:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800627a:	881b      	ldrh	r3, [r3, #0]
 800627c:	b29a      	uxth	r2, r3
 800627e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006282:	b29b      	uxth	r3, r3
 8006284:	029b      	lsls	r3, r3, #10
 8006286:	b29b      	uxth	r3, r3
 8006288:	4313      	orrs	r3, r2
 800628a:	b29a      	uxth	r2, r3
 800628c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006290:	801a      	strh	r2, [r3, #0]
 8006292:	e02c      	b.n	80062ee <USB_EPStartXfer+0x16e2>
 8006294:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006298:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	785b      	ldrb	r3, [r3, #1]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d124      	bne.n	80062ee <USB_EPStartXfer+0x16e2>
 80062a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	461a      	mov	r2, r3
 80062b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80062ba:	4413      	add	r3, r2
 80062bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	011a      	lsls	r2, r3, #4
 80062ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80062d2:	4413      	add	r3, r2
 80062d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80062e6:	801a      	strh	r2, [r3, #0]
 80062e8:	e001      	b.n	80062ee <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e03a      	b.n	8006364 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80062ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	4413      	add	r3, r2
 8006308:	881b      	ldrh	r3, [r3, #0]
 800630a:	b29b      	uxth	r3, r3
 800630c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006314:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006318:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800631c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006320:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006324:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006328:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800632c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006334:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800633e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	441a      	add	r2, r3
 800634a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800634e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006352:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800635a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800635e:	b29b      	uxth	r3, r3
 8006360:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800636e:	b480      	push	{r7}
 8006370:	b085      	sub	sp, #20
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
 8006376:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	785b      	ldrb	r3, [r3, #1]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d020      	beq.n	80063c2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4413      	add	r3, r2
 800638a:	881b      	ldrh	r3, [r3, #0]
 800638c:	b29b      	uxth	r3, r3
 800638e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006392:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006396:	81bb      	strh	r3, [r7, #12]
 8006398:	89bb      	ldrh	r3, [r7, #12]
 800639a:	f083 0310 	eor.w	r3, r3, #16
 800639e:	81bb      	strh	r3, [r7, #12]
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	441a      	add	r2, r3
 80063aa:	89bb      	ldrh	r3, [r7, #12]
 80063ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063bc:	b29b      	uxth	r3, r3
 80063be:	8013      	strh	r3, [r2, #0]
 80063c0:	e01f      	b.n	8006402 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	4413      	add	r3, r2
 80063cc:	881b      	ldrh	r3, [r3, #0]
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063d8:	81fb      	strh	r3, [r7, #14]
 80063da:	89fb      	ldrh	r3, [r7, #14]
 80063dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80063e0:	81fb      	strh	r3, [r7, #14]
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	441a      	add	r2, r3
 80063ec:	89fb      	ldrh	r3, [r7, #14]
 80063ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063fe:	b29b      	uxth	r3, r3
 8006400:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3714      	adds	r7, #20
 8006408:	46bd      	mov	sp, r7
 800640a:	bc80      	pop	{r7}
 800640c:	4770      	bx	lr

0800640e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800640e:	b480      	push	{r7}
 8006410:	b087      	sub	sp, #28
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
 8006416:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	7b1b      	ldrb	r3, [r3, #12]
 800641c:	2b00      	cmp	r3, #0
 800641e:	f040 809d 	bne.w	800655c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	785b      	ldrb	r3, [r3, #1]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d04c      	beq.n	80064c4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	4413      	add	r3, r2
 8006434:	881b      	ldrh	r3, [r3, #0]
 8006436:	823b      	strh	r3, [r7, #16]
 8006438:	8a3b      	ldrh	r3, [r7, #16]
 800643a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800643e:	2b00      	cmp	r3, #0
 8006440:	d01b      	beq.n	800647a <USB_EPClearStall+0x6c>
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	4413      	add	r3, r2
 800644c:	881b      	ldrh	r3, [r3, #0]
 800644e:	b29b      	uxth	r3, r3
 8006450:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006458:	81fb      	strh	r3, [r7, #14]
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	441a      	add	r2, r3
 8006464:	89fb      	ldrh	r3, [r7, #14]
 8006466:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800646a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800646e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006472:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006476:	b29b      	uxth	r3, r3
 8006478:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	78db      	ldrb	r3, [r3, #3]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d06c      	beq.n	800655c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	4413      	add	r3, r2
 800648c:	881b      	ldrh	r3, [r3, #0]
 800648e:	b29b      	uxth	r3, r3
 8006490:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006494:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006498:	81bb      	strh	r3, [r7, #12]
 800649a:	89bb      	ldrh	r3, [r7, #12]
 800649c:	f083 0320 	eor.w	r3, r3, #32
 80064a0:	81bb      	strh	r3, [r7, #12]
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	441a      	add	r2, r3
 80064ac:	89bb      	ldrh	r3, [r7, #12]
 80064ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064be:	b29b      	uxth	r3, r3
 80064c0:	8013      	strh	r3, [r2, #0]
 80064c2:	e04b      	b.n	800655c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	4413      	add	r3, r2
 80064ce:	881b      	ldrh	r3, [r3, #0]
 80064d0:	82fb      	strh	r3, [r7, #22]
 80064d2:	8afb      	ldrh	r3, [r7, #22]
 80064d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d01b      	beq.n	8006514 <USB_EPClearStall+0x106>
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	4413      	add	r3, r2
 80064e6:	881b      	ldrh	r3, [r3, #0]
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064f2:	82bb      	strh	r3, [r7, #20]
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	441a      	add	r2, r3
 80064fe:	8abb      	ldrh	r3, [r7, #20]
 8006500:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006504:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006508:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800650c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006510:	b29b      	uxth	r3, r3
 8006512:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4413      	add	r3, r2
 800651e:	881b      	ldrh	r3, [r3, #0]
 8006520:	b29b      	uxth	r3, r3
 8006522:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800652a:	827b      	strh	r3, [r7, #18]
 800652c:	8a7b      	ldrh	r3, [r7, #18]
 800652e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006532:	827b      	strh	r3, [r7, #18]
 8006534:	8a7b      	ldrh	r3, [r7, #18]
 8006536:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800653a:	827b      	strh	r3, [r7, #18]
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	441a      	add	r2, r3
 8006546:	8a7b      	ldrh	r3, [r7, #18]
 8006548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800654c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006558:	b29b      	uxth	r3, r3
 800655a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	371c      	adds	r7, #28
 8006562:	46bd      	mov	sp, r7
 8006564:	bc80      	pop	{r7}
 8006566:	4770      	bx	lr

08006568 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	460b      	mov	r3, r1
 8006572:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006574:	78fb      	ldrb	r3, [r7, #3]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d103      	bne.n	8006582 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2280      	movs	r2, #128	; 0x80
 800657e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	bc80      	pop	{r7}
 800658c:	4770      	bx	lr

0800658e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800658e:	b480      	push	{r7}
 8006590:	b083      	sub	sp, #12
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	bc80      	pop	{r7}
 80065a0:	4770      	bx	lr

080065a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80065a2:	b480      	push	{r7}
 80065a4:	b083      	sub	sp, #12
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bc80      	pop	{r7}
 80065b4:	4770      	bx	lr

080065b6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b085      	sub	sp, #20
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80065c8:	68fb      	ldr	r3, [r7, #12]
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3714      	adds	r7, #20
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bc80      	pop	{r7}
 80065d2:	4770      	bx	lr

080065d4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bc80      	pop	{r7}
 80065e8:	4770      	bx	lr

080065ea <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80065ea:	b480      	push	{r7}
 80065ec:	b08b      	sub	sp, #44	; 0x2c
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	60f8      	str	r0, [r7, #12]
 80065f2:	60b9      	str	r1, [r7, #8]
 80065f4:	4611      	mov	r1, r2
 80065f6:	461a      	mov	r2, r3
 80065f8:	460b      	mov	r3, r1
 80065fa:	80fb      	strh	r3, [r7, #6]
 80065fc:	4613      	mov	r3, r2
 80065fe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006600:	88bb      	ldrh	r3, [r7, #4]
 8006602:	3301      	adds	r3, #1
 8006604:	085b      	lsrs	r3, r3, #1
 8006606:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006610:	88fb      	ldrh	r3, [r7, #6]
 8006612:	005a      	lsls	r2, r3, #1
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	4413      	add	r3, r2
 8006618:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800661c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	627b      	str	r3, [r7, #36]	; 0x24
 8006622:	e01e      	b.n	8006662 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	3301      	adds	r3, #1
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	021b      	lsls	r3, r3, #8
 8006632:	b21a      	sxth	r2, r3
 8006634:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006638:	4313      	orrs	r3, r2
 800663a:	b21b      	sxth	r3, r3
 800663c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800663e:	6a3b      	ldr	r3, [r7, #32]
 8006640:	8a7a      	ldrh	r2, [r7, #18]
 8006642:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006644:	6a3b      	ldr	r3, [r7, #32]
 8006646:	3302      	adds	r3, #2
 8006648:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	3302      	adds	r3, #2
 800664e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	3301      	adds	r3, #1
 8006654:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	3301      	adds	r3, #1
 800665a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800665c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665e:	3b01      	subs	r3, #1
 8006660:	627b      	str	r3, [r7, #36]	; 0x24
 8006662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1dd      	bne.n	8006624 <USB_WritePMA+0x3a>
  }
}
 8006668:	bf00      	nop
 800666a:	bf00      	nop
 800666c:	372c      	adds	r7, #44	; 0x2c
 800666e:	46bd      	mov	sp, r7
 8006670:	bc80      	pop	{r7}
 8006672:	4770      	bx	lr

08006674 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006674:	b480      	push	{r7}
 8006676:	b08b      	sub	sp, #44	; 0x2c
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	4611      	mov	r1, r2
 8006680:	461a      	mov	r2, r3
 8006682:	460b      	mov	r3, r1
 8006684:	80fb      	strh	r3, [r7, #6]
 8006686:	4613      	mov	r3, r2
 8006688:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800668a:	88bb      	ldrh	r3, [r7, #4]
 800668c:	085b      	lsrs	r3, r3, #1
 800668e:	b29b      	uxth	r3, r3
 8006690:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800669a:	88fb      	ldrh	r3, [r7, #6]
 800669c:	005a      	lsls	r2, r3, #1
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066a6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	627b      	str	r3, [r7, #36]	; 0x24
 80066ac:	e01b      	b.n	80066e6 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80066ae:	6a3b      	ldr	r3, [r7, #32]
 80066b0:	881b      	ldrh	r3, [r3, #0]
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80066b6:	6a3b      	ldr	r3, [r7, #32]
 80066b8:	3302      	adds	r3, #2
 80066ba:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	b2da      	uxtb	r2, r3
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	3301      	adds	r3, #1
 80066c8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	0a1b      	lsrs	r3, r3, #8
 80066ce:	b2da      	uxtb	r2, r3
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	3301      	adds	r3, #1
 80066d8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80066da:	6a3b      	ldr	r3, [r7, #32]
 80066dc:	3302      	adds	r3, #2
 80066de:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80066e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e2:	3b01      	subs	r3, #1
 80066e4:	627b      	str	r3, [r7, #36]	; 0x24
 80066e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1e0      	bne.n	80066ae <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80066ec:	88bb      	ldrh	r3, [r7, #4]
 80066ee:	f003 0301 	and.w	r3, r3, #1
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d007      	beq.n	8006708 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80066f8:	6a3b      	ldr	r3, [r7, #32]
 80066fa:	881b      	ldrh	r3, [r3, #0]
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	b2da      	uxtb	r2, r3
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	701a      	strb	r2, [r3, #0]
  }
}
 8006708:	bf00      	nop
 800670a:	372c      	adds	r7, #44	; 0x2c
 800670c:	46bd      	mov	sp, r7
 800670e:	bc80      	pop	{r7}
 8006710:	4770      	bx	lr

08006712 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b084      	sub	sp, #16
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
 800671a:	460b      	mov	r3, r1
 800671c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800671e:	2300      	movs	r3, #0
 8006720:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	7c1b      	ldrb	r3, [r3, #16]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d115      	bne.n	8006756 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800672a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800672e:	2202      	movs	r2, #2
 8006730:	2181      	movs	r1, #129	; 0x81
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f001 fe9d 	bl	8008472 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800673e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006742:	2202      	movs	r2, #2
 8006744:	2101      	movs	r1, #1
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f001 fe93 	bl	8008472 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006754:	e012      	b.n	800677c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006756:	2340      	movs	r3, #64	; 0x40
 8006758:	2202      	movs	r2, #2
 800675a:	2181      	movs	r1, #129	; 0x81
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f001 fe88 	bl	8008472 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2201      	movs	r2, #1
 8006766:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006768:	2340      	movs	r3, #64	; 0x40
 800676a:	2202      	movs	r2, #2
 800676c:	2101      	movs	r1, #1
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f001 fe7f 	bl	8008472 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800677c:	2308      	movs	r3, #8
 800677e:	2203      	movs	r2, #3
 8006780:	2182      	movs	r1, #130	; 0x82
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f001 fe75 	bl	8008472 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800678e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006792:	f001 ff95 	bl	80086c0 <USBD_static_malloc>
 8006796:	4602      	mov	r2, r0
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d102      	bne.n	80067ae <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80067a8:	2301      	movs	r3, #1
 80067aa:	73fb      	strb	r3, [r7, #15]
 80067ac:	e026      	b.n	80067fc <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067b4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	7c1b      	ldrb	r3, [r3, #16]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d109      	bne.n	80067ec <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067e2:	2101      	movs	r1, #1
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f001 ff35 	bl	8008654 <USBD_LL_PrepareReceive>
 80067ea:	e007      	b.n	80067fc <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067f2:	2340      	movs	r3, #64	; 0x40
 80067f4:	2101      	movs	r1, #1
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f001 ff2c 	bl	8008654 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80067fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b084      	sub	sp, #16
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	460b      	mov	r3, r1
 8006810:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006812:	2300      	movs	r3, #0
 8006814:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006816:	2181      	movs	r1, #129	; 0x81
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f001 fe50 	bl	80084be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006824:	2101      	movs	r1, #1
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f001 fe49 	bl	80084be <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006834:	2182      	movs	r1, #130	; 0x82
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f001 fe41 	bl	80084be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00e      	beq.n	800686a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800685c:	4618      	mov	r0, r3
 800685e:	f001 ff3b 	bl	80086d8 <USBD_static_free>
    pdev->pClassData = NULL;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800686a:	7bfb      	ldrb	r3, [r7, #15]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b086      	sub	sp, #24
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006884:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006886:	2300      	movs	r3, #0
 8006888:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800688a:	2300      	movs	r3, #0
 800688c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800688e:	2300      	movs	r3, #0
 8006890:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800689a:	2b00      	cmp	r3, #0
 800689c:	d039      	beq.n	8006912 <USBD_CDC_Setup+0x9e>
 800689e:	2b20      	cmp	r3, #32
 80068a0:	d17f      	bne.n	80069a2 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	88db      	ldrh	r3, [r3, #6]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d029      	beq.n	80068fe <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	b25b      	sxtb	r3, r3
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	da11      	bge.n	80068d8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	683a      	ldr	r2, [r7, #0]
 80068be:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80068c0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	88d2      	ldrh	r2, [r2, #6]
 80068c6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80068c8:	6939      	ldr	r1, [r7, #16]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	88db      	ldrh	r3, [r3, #6]
 80068ce:	461a      	mov	r2, r3
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f001 fa0a 	bl	8007cea <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80068d6:	e06b      	b.n	80069b0 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	785a      	ldrb	r2, [r3, #1]
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	88db      	ldrh	r3, [r3, #6]
 80068e6:	b2da      	uxtb	r2, r3
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80068ee:	6939      	ldr	r1, [r7, #16]
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	88db      	ldrh	r3, [r3, #6]
 80068f4:	461a      	mov	r2, r3
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f001 fa25 	bl	8007d46 <USBD_CtlPrepareRx>
      break;
 80068fc:	e058      	b.n	80069b0 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	683a      	ldr	r2, [r7, #0]
 8006908:	7850      	ldrb	r0, [r2, #1]
 800690a:	2200      	movs	r2, #0
 800690c:	6839      	ldr	r1, [r7, #0]
 800690e:	4798      	blx	r3
      break;
 8006910:	e04e      	b.n	80069b0 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	785b      	ldrb	r3, [r3, #1]
 8006916:	2b0b      	cmp	r3, #11
 8006918:	d02e      	beq.n	8006978 <USBD_CDC_Setup+0x104>
 800691a:	2b0b      	cmp	r3, #11
 800691c:	dc38      	bgt.n	8006990 <USBD_CDC_Setup+0x11c>
 800691e:	2b00      	cmp	r3, #0
 8006920:	d002      	beq.n	8006928 <USBD_CDC_Setup+0xb4>
 8006922:	2b0a      	cmp	r3, #10
 8006924:	d014      	beq.n	8006950 <USBD_CDC_Setup+0xdc>
 8006926:	e033      	b.n	8006990 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800692e:	2b03      	cmp	r3, #3
 8006930:	d107      	bne.n	8006942 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006932:	f107 030c 	add.w	r3, r7, #12
 8006936:	2202      	movs	r2, #2
 8006938:	4619      	mov	r1, r3
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f001 f9d5 	bl	8007cea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006940:	e02e      	b.n	80069a0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006942:	6839      	ldr	r1, [r7, #0]
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f001 f966 	bl	8007c16 <USBD_CtlError>
            ret = USBD_FAIL;
 800694a:	2302      	movs	r3, #2
 800694c:	75fb      	strb	r3, [r7, #23]
          break;
 800694e:	e027      	b.n	80069a0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006956:	2b03      	cmp	r3, #3
 8006958:	d107      	bne.n	800696a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800695a:	f107 030f 	add.w	r3, r7, #15
 800695e:	2201      	movs	r2, #1
 8006960:	4619      	mov	r1, r3
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f001 f9c1 	bl	8007cea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006968:	e01a      	b.n	80069a0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800696a:	6839      	ldr	r1, [r7, #0]
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f001 f952 	bl	8007c16 <USBD_CtlError>
            ret = USBD_FAIL;
 8006972:	2302      	movs	r3, #2
 8006974:	75fb      	strb	r3, [r7, #23]
          break;
 8006976:	e013      	b.n	80069a0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800697e:	2b03      	cmp	r3, #3
 8006980:	d00d      	beq.n	800699e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006982:	6839      	ldr	r1, [r7, #0]
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f001 f946 	bl	8007c16 <USBD_CtlError>
            ret = USBD_FAIL;
 800698a:	2302      	movs	r3, #2
 800698c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800698e:	e006      	b.n	800699e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006990:	6839      	ldr	r1, [r7, #0]
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f001 f93f 	bl	8007c16 <USBD_CtlError>
          ret = USBD_FAIL;
 8006998:	2302      	movs	r3, #2
 800699a:	75fb      	strb	r3, [r7, #23]
          break;
 800699c:	e000      	b.n	80069a0 <USBD_CDC_Setup+0x12c>
          break;
 800699e:	bf00      	nop
      }
      break;
 80069a0:	e006      	b.n	80069b0 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80069a2:	6839      	ldr	r1, [r7, #0]
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f001 f936 	bl	8007c16 <USBD_CtlError>
      ret = USBD_FAIL;
 80069aa:	2302      	movs	r3, #2
 80069ac:	75fb      	strb	r3, [r7, #23]
      break;
 80069ae:	bf00      	nop
  }

  return ret;
 80069b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3718      	adds	r7, #24
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}

080069ba <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b084      	sub	sp, #16
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
 80069c2:	460b      	mov	r3, r1
 80069c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069cc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069d4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d03a      	beq.n	8006a56 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80069e0:	78fa      	ldrb	r2, [r7, #3]
 80069e2:	6879      	ldr	r1, [r7, #4]
 80069e4:	4613      	mov	r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	4413      	add	r3, r2
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	440b      	add	r3, r1
 80069ee:	331c      	adds	r3, #28
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d029      	beq.n	8006a4a <USBD_CDC_DataIn+0x90>
 80069f6:	78fa      	ldrb	r2, [r7, #3]
 80069f8:	6879      	ldr	r1, [r7, #4]
 80069fa:	4613      	mov	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	440b      	add	r3, r1
 8006a04:	331c      	adds	r3, #28
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	78f9      	ldrb	r1, [r7, #3]
 8006a0a:	68b8      	ldr	r0, [r7, #8]
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	440b      	add	r3, r1
 8006a12:	00db      	lsls	r3, r3, #3
 8006a14:	4403      	add	r3, r0
 8006a16:	3338      	adds	r3, #56	; 0x38
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	fbb2 f1f3 	udiv	r1, r2, r3
 8006a1e:	fb01 f303 	mul.w	r3, r1, r3
 8006a22:	1ad3      	subs	r3, r2, r3
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d110      	bne.n	8006a4a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006a28:	78fa      	ldrb	r2, [r7, #3]
 8006a2a:	6879      	ldr	r1, [r7, #4]
 8006a2c:	4613      	mov	r3, r2
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	4413      	add	r3, r2
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	440b      	add	r3, r1
 8006a36:	331c      	adds	r3, #28
 8006a38:	2200      	movs	r2, #0
 8006a3a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006a3c:	78f9      	ldrb	r1, [r7, #3]
 8006a3e:	2300      	movs	r3, #0
 8006a40:	2200      	movs	r2, #0
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f001 fde3 	bl	800860e <USBD_LL_Transmit>
 8006a48:	e003      	b.n	8006a52 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006a52:	2300      	movs	r3, #0
 8006a54:	e000      	b.n	8006a58 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006a56:	2302      	movs	r3, #2
  }
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	460b      	mov	r3, r1
 8006a6a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a72:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006a74:	78fb      	ldrb	r3, [r7, #3]
 8006a76:	4619      	mov	r1, r3
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f001 fe0e 	bl	800869a <USBD_LL_GetRxDataSize>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00d      	beq.n	8006aac <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006aa4:	4611      	mov	r1, r2
 8006aa6:	4798      	blx	r3

    return USBD_OK;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	e000      	b.n	8006aae <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006aac:	2302      	movs	r3, #2
  }
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b084      	sub	sp, #16
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ac4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d015      	beq.n	8006afc <USBD_CDC_EP0_RxReady+0x46>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006ad6:	2bff      	cmp	r3, #255	; 0xff
 8006ad8:	d010      	beq.n	8006afc <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006ae8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006af0:	b292      	uxth	r2, r2
 8006af2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	22ff      	movs	r2, #255	; 0xff
 8006af8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
	...

08006b08 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2243      	movs	r2, #67	; 0x43
 8006b14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006b16:	4b03      	ldr	r3, [pc, #12]	; (8006b24 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bc80      	pop	{r7}
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	20000094 	.word	0x20000094

08006b28 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2243      	movs	r2, #67	; 0x43
 8006b34:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006b36:	4b03      	ldr	r3, [pc, #12]	; (8006b44 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bc80      	pop	{r7}
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	20000050 	.word	0x20000050

08006b48 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2243      	movs	r2, #67	; 0x43
 8006b54:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006b56:	4b03      	ldr	r3, [pc, #12]	; (8006b64 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bc80      	pop	{r7}
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	200000d8 	.word	0x200000d8

08006b68 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	220a      	movs	r2, #10
 8006b74:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006b76:	4b03      	ldr	r3, [pc, #12]	; (8006b84 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bc80      	pop	{r7}
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	2000000c 	.word	0x2000000c

08006b88 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006b92:	2302      	movs	r3, #2
 8006b94:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d005      	beq.n	8006ba8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	683a      	ldr	r2, [r7, #0]
 8006ba0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3714      	adds	r7, #20
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bc80      	pop	{r7}
 8006bb2:	4770      	bx	lr

08006bb4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b087      	sub	sp, #28
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bc8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	68ba      	ldr	r2, [r7, #8]
 8006bce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006bd2:	88fa      	ldrh	r2, [r7, #6]
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	371c      	adds	r7, #28
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bc80      	pop	{r7}
 8006be4:	4770      	bx	lr

08006be6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006be6:	b480      	push	{r7}
 8006be8:	b085      	sub	sp, #20
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
 8006bee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bf6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	683a      	ldr	r2, [r7, #0]
 8006bfc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3714      	adds	r7, #20
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bc80      	pop	{r7}
 8006c0a:	4770      	bx	lr

08006c0c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c1a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d01c      	beq.n	8006c60 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d115      	bne.n	8006c5c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	2181      	movs	r1, #129	; 0x81
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f001 fcdb 	bl	800860e <USBD_LL_Transmit>

      return USBD_OK;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	e002      	b.n	8006c62 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e000      	b.n	8006c62 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006c60:	2302      	movs	r3, #2
  }
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b084      	sub	sp, #16
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c78:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d017      	beq.n	8006cb4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	7c1b      	ldrb	r3, [r3, #16]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d109      	bne.n	8006ca0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c96:	2101      	movs	r1, #1
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f001 fcdb 	bl	8008654 <USBD_LL_PrepareReceive>
 8006c9e:	e007      	b.n	8006cb0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ca6:	2340      	movs	r3, #64	; 0x40
 8006ca8:	2101      	movs	r1, #1
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f001 fcd2 	bl	8008654 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	e000      	b.n	8006cb6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006cb4:	2302      	movs	r3, #2
  }
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3710      	adds	r7, #16
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b084      	sub	sp, #16
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	60f8      	str	r0, [r7, #12]
 8006cc6:	60b9      	str	r1, [r7, #8]
 8006cc8:	4613      	mov	r3, r2
 8006cca:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006cd2:	2302      	movs	r3, #2
 8006cd4:	e01a      	b.n	8006d0c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d003      	beq.n	8006ce8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d003      	beq.n	8006cf6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	68ba      	ldr	r2, [r7, #8]
 8006cf2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	79fa      	ldrb	r2, [r7, #7]
 8006d02:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	f001 fb3f 	bl	8008388 <USBD_LL_Init>

  return USBD_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3710      	adds	r7, #16
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d006      	beq.n	8006d36 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	683a      	ldr	r2, [r7, #0]
 8006d2c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006d30:	2300      	movs	r3, #0
 8006d32:	73fb      	strb	r3, [r7, #15]
 8006d34:	e001      	b.n	8006d3a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006d36:	2302      	movs	r3, #2
 8006d38:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3714      	adds	r7, #20
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bc80      	pop	{r7}
 8006d44:	4770      	bx	lr

08006d46 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b082      	sub	sp, #8
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f001 fb74 	bl	800843c <USBD_LL_Start>

  return USBD_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3708      	adds	r7, #8
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b083      	sub	sp, #12
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bc80      	pop	{r7}
 8006d70:	4770      	bx	lr

08006d72 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b084      	sub	sp, #16
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006d7e:	2302      	movs	r3, #2
 8006d80:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00c      	beq.n	8006da6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	78fa      	ldrb	r2, [r7, #3]
 8006d96:	4611      	mov	r1, r2
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	4798      	blx	r3
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006da2:	2300      	movs	r3, #0
 8006da4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	460b      	mov	r3, r1
 8006dba:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	78fa      	ldrb	r2, [r7, #3]
 8006dc6:	4611      	mov	r1, r2
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	4798      	blx	r3

  return USBD_OK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3708      	adds	r7, #8
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b082      	sub	sp, #8
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
 8006dde:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006de6:	6839      	ldr	r1, [r7, #0]
 8006de8:	4618      	mov	r0, r3
 8006dea:	f000 fed8 	bl	8007b9e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2201      	movs	r2, #1
 8006df2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006e0a:	f003 031f 	and.w	r3, r3, #31
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	d016      	beq.n	8006e40 <USBD_LL_SetupStage+0x6a>
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d81c      	bhi.n	8006e50 <USBD_LL_SetupStage+0x7a>
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d002      	beq.n	8006e20 <USBD_LL_SetupStage+0x4a>
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d008      	beq.n	8006e30 <USBD_LL_SetupStage+0x5a>
 8006e1e:	e017      	b.n	8006e50 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006e26:	4619      	mov	r1, r3
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 f9cb 	bl	80071c4 <USBD_StdDevReq>
      break;
 8006e2e:	e01a      	b.n	8006e66 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006e36:	4619      	mov	r1, r3
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 fa2d 	bl	8007298 <USBD_StdItfReq>
      break;
 8006e3e:	e012      	b.n	8006e66 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006e46:	4619      	mov	r1, r3
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 fa6d 	bl	8007328 <USBD_StdEPReq>
      break;
 8006e4e:	e00a      	b.n	8006e66 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006e56:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f001 fb4c 	bl	80084fc <USBD_LL_StallEP>
      break;
 8006e64:	bf00      	nop
  }

  return USBD_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3708      	adds	r7, #8
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b086      	sub	sp, #24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	460b      	mov	r3, r1
 8006e7a:	607a      	str	r2, [r7, #4]
 8006e7c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006e7e:	7afb      	ldrb	r3, [r7, #11]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d14b      	bne.n	8006f1c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006e8a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e92:	2b03      	cmp	r3, #3
 8006e94:	d134      	bne.n	8006f00 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	68da      	ldr	r2, [r3, #12]
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d919      	bls.n	8006ed6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	68da      	ldr	r2, [r3, #12]
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	1ad2      	subs	r2, r2, r3
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	68da      	ldr	r2, [r3, #12]
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d203      	bcs.n	8006ec4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	e002      	b.n	8006eca <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	461a      	mov	r2, r3
 8006ecc:	6879      	ldr	r1, [r7, #4]
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f000 ff57 	bl	8007d82 <USBD_CtlContinueRx>
 8006ed4:	e038      	b.n	8006f48 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00a      	beq.n	8006ef8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006ee8:	2b03      	cmp	r3, #3
 8006eea:	d105      	bne.n	8006ef8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f000 ff54 	bl	8007da6 <USBD_CtlSendStatus>
 8006efe:	e023      	b.n	8006f48 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f06:	2b05      	cmp	r3, #5
 8006f08:	d11e      	bne.n	8006f48 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006f12:	2100      	movs	r1, #0
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f001 faf1 	bl	80084fc <USBD_LL_StallEP>
 8006f1a:	e015      	b.n	8006f48 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00d      	beq.n	8006f44 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006f2e:	2b03      	cmp	r3, #3
 8006f30:	d108      	bne.n	8006f44 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	7afa      	ldrb	r2, [r7, #11]
 8006f3c:	4611      	mov	r1, r2
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	4798      	blx	r3
 8006f42:	e001      	b.n	8006f48 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006f44:	2302      	movs	r3, #2
 8006f46:	e000      	b.n	8006f4a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3718      	adds	r7, #24
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b086      	sub	sp, #24
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	60f8      	str	r0, [r7, #12]
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	607a      	str	r2, [r7, #4]
 8006f5e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006f60:	7afb      	ldrb	r3, [r7, #11]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d17f      	bne.n	8007066 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	3314      	adds	r3, #20
 8006f6a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d15c      	bne.n	8007030 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	68da      	ldr	r2, [r3, #12]
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d915      	bls.n	8006fae <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	68da      	ldr	r2, [r3, #12]
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	1ad2      	subs	r2, r2, r3
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	461a      	mov	r2, r3
 8006f98:	6879      	ldr	r1, [r7, #4]
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f000 fec1 	bl	8007d22 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	2100      	movs	r1, #0
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f001 fb54 	bl	8008654 <USBD_LL_PrepareReceive>
 8006fac:	e04e      	b.n	800704c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	697a      	ldr	r2, [r7, #20]
 8006fb4:	6912      	ldr	r2, [r2, #16]
 8006fb6:	fbb3 f1f2 	udiv	r1, r3, r2
 8006fba:	fb01 f202 	mul.w	r2, r1, r2
 8006fbe:	1a9b      	subs	r3, r3, r2
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d11c      	bne.n	8006ffe <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	689a      	ldr	r2, [r3, #8]
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d316      	bcc.n	8006ffe <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	689a      	ldr	r2, [r3, #8]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d20f      	bcs.n	8006ffe <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006fde:	2200      	movs	r2, #0
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f000 fe9d 	bl	8007d22 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f001 fb2c 	bl	8008654 <USBD_LL_PrepareReceive>
 8006ffc:	e026      	b.n	800704c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00a      	beq.n	8007020 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007010:	2b03      	cmp	r3, #3
 8007012:	d105      	bne.n	8007020 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007020:	2180      	movs	r1, #128	; 0x80
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f001 fa6a 	bl	80084fc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007028:	68f8      	ldr	r0, [r7, #12]
 800702a:	f000 fecf 	bl	8007dcc <USBD_CtlReceiveStatus>
 800702e:	e00d      	b.n	800704c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007036:	2b04      	cmp	r3, #4
 8007038:	d004      	beq.n	8007044 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007040:	2b00      	cmp	r3, #0
 8007042:	d103      	bne.n	800704c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007044:	2180      	movs	r1, #128	; 0x80
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f001 fa58 	bl	80084fc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007052:	2b01      	cmp	r3, #1
 8007054:	d11d      	bne.n	8007092 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f7ff fe81 	bl	8006d5e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007064:	e015      	b.n	8007092 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00d      	beq.n	800708e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007078:	2b03      	cmp	r3, #3
 800707a:	d108      	bne.n	800708e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007082:	695b      	ldr	r3, [r3, #20]
 8007084:	7afa      	ldrb	r2, [r7, #11]
 8007086:	4611      	mov	r1, r2
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	4798      	blx	r3
 800708c:	e001      	b.n	8007092 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800708e:	2302      	movs	r3, #2
 8007090:	e000      	b.n	8007094 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3718      	adds	r7, #24
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070a4:	2340      	movs	r3, #64	; 0x40
 80070a6:	2200      	movs	r2, #0
 80070a8:	2100      	movs	r1, #0
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f001 f9e1 	bl	8008472 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2240      	movs	r2, #64	; 0x40
 80070bc:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070c0:	2340      	movs	r3, #64	; 0x40
 80070c2:	2200      	movs	r2, #0
 80070c4:	2180      	movs	r1, #128	; 0x80
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f001 f9d3 	bl	8008472 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2240      	movs	r2, #64	; 0x40
 80070d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d009      	beq.n	8007114 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	6852      	ldr	r2, [r2, #4]
 800710c:	b2d2      	uxtb	r2, r2
 800710e:	4611      	mov	r1, r2
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	4798      	blx	r3
  }

  return USBD_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3708      	adds	r7, #8
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800711e:	b480      	push	{r7}
 8007120:	b083      	sub	sp, #12
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
 8007126:	460b      	mov	r3, r1
 8007128:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	78fa      	ldrb	r2, [r7, #3]
 800712e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	370c      	adds	r7, #12
 8007136:	46bd      	mov	sp, r7
 8007138:	bc80      	pop	{r7}
 800713a:	4770      	bx	lr

0800713c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2204      	movs	r2, #4
 8007154:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	370c      	adds	r7, #12
 800715e:	46bd      	mov	sp, r7
 8007160:	bc80      	pop	{r7}
 8007162:	4770      	bx	lr

08007164 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007172:	2b04      	cmp	r3, #4
 8007174:	d105      	bne.n	8007182 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	bc80      	pop	{r7}
 800718c:	4770      	bx	lr

0800718e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800718e:	b580      	push	{r7, lr}
 8007190:	b082      	sub	sp, #8
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800719c:	2b03      	cmp	r3, #3
 800719e:	d10b      	bne.n	80071b8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071a6:	69db      	ldr	r3, [r3, #28]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d005      	beq.n	80071b8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071b2:	69db      	ldr	r3, [r3, #28]
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
	...

080071c4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071ce:	2300      	movs	r3, #0
 80071d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071da:	2b40      	cmp	r3, #64	; 0x40
 80071dc:	d005      	beq.n	80071ea <USBD_StdDevReq+0x26>
 80071de:	2b40      	cmp	r3, #64	; 0x40
 80071e0:	d84f      	bhi.n	8007282 <USBD_StdDevReq+0xbe>
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d009      	beq.n	80071fa <USBD_StdDevReq+0x36>
 80071e6:	2b20      	cmp	r3, #32
 80071e8:	d14b      	bne.n	8007282 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	6839      	ldr	r1, [r7, #0]
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	4798      	blx	r3
      break;
 80071f8:	e048      	b.n	800728c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	785b      	ldrb	r3, [r3, #1]
 80071fe:	2b09      	cmp	r3, #9
 8007200:	d839      	bhi.n	8007276 <USBD_StdDevReq+0xb2>
 8007202:	a201      	add	r2, pc, #4	; (adr r2, 8007208 <USBD_StdDevReq+0x44>)
 8007204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007208:	08007259 	.word	0x08007259
 800720c:	0800726d 	.word	0x0800726d
 8007210:	08007277 	.word	0x08007277
 8007214:	08007263 	.word	0x08007263
 8007218:	08007277 	.word	0x08007277
 800721c:	0800723b 	.word	0x0800723b
 8007220:	08007231 	.word	0x08007231
 8007224:	08007277 	.word	0x08007277
 8007228:	0800724f 	.word	0x0800724f
 800722c:	08007245 	.word	0x08007245
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007230:	6839      	ldr	r1, [r7, #0]
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 f9dc 	bl	80075f0 <USBD_GetDescriptor>
          break;
 8007238:	e022      	b.n	8007280 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800723a:	6839      	ldr	r1, [r7, #0]
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 fb3f 	bl	80078c0 <USBD_SetAddress>
          break;
 8007242:	e01d      	b.n	8007280 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007244:	6839      	ldr	r1, [r7, #0]
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 fb7e 	bl	8007948 <USBD_SetConfig>
          break;
 800724c:	e018      	b.n	8007280 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800724e:	6839      	ldr	r1, [r7, #0]
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 fc07 	bl	8007a64 <USBD_GetConfig>
          break;
 8007256:	e013      	b.n	8007280 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007258:	6839      	ldr	r1, [r7, #0]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 fc37 	bl	8007ace <USBD_GetStatus>
          break;
 8007260:	e00e      	b.n	8007280 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007262:	6839      	ldr	r1, [r7, #0]
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 fc65 	bl	8007b34 <USBD_SetFeature>
          break;
 800726a:	e009      	b.n	8007280 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800726c:	6839      	ldr	r1, [r7, #0]
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fc74 	bl	8007b5c <USBD_ClrFeature>
          break;
 8007274:	e004      	b.n	8007280 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007276:	6839      	ldr	r1, [r7, #0]
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 fccc 	bl	8007c16 <USBD_CtlError>
          break;
 800727e:	bf00      	nop
      }
      break;
 8007280:	e004      	b.n	800728c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007282:	6839      	ldr	r1, [r7, #0]
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 fcc6 	bl	8007c16 <USBD_CtlError>
      break;
 800728a:	bf00      	nop
  }

  return ret;
 800728c:	7bfb      	ldrb	r3, [r7, #15]
}
 800728e:	4618      	mov	r0, r3
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop

08007298 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072a2:	2300      	movs	r3, #0
 80072a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072ae:	2b40      	cmp	r3, #64	; 0x40
 80072b0:	d005      	beq.n	80072be <USBD_StdItfReq+0x26>
 80072b2:	2b40      	cmp	r3, #64	; 0x40
 80072b4:	d82e      	bhi.n	8007314 <USBD_StdItfReq+0x7c>
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d001      	beq.n	80072be <USBD_StdItfReq+0x26>
 80072ba:	2b20      	cmp	r3, #32
 80072bc:	d12a      	bne.n	8007314 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072c4:	3b01      	subs	r3, #1
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d81d      	bhi.n	8007306 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	889b      	ldrh	r3, [r3, #4]
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d813      	bhi.n	80072fc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	6839      	ldr	r1, [r7, #0]
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	4798      	blx	r3
 80072e2:	4603      	mov	r3, r0
 80072e4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	88db      	ldrh	r3, [r3, #6]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d110      	bne.n	8007310 <USBD_StdItfReq+0x78>
 80072ee:	7bfb      	ldrb	r3, [r7, #15]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10d      	bne.n	8007310 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 fd56 	bl	8007da6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80072fa:	e009      	b.n	8007310 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80072fc:	6839      	ldr	r1, [r7, #0]
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 fc89 	bl	8007c16 <USBD_CtlError>
          break;
 8007304:	e004      	b.n	8007310 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007306:	6839      	ldr	r1, [r7, #0]
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 fc84 	bl	8007c16 <USBD_CtlError>
          break;
 800730e:	e000      	b.n	8007312 <USBD_StdItfReq+0x7a>
          break;
 8007310:	bf00      	nop
      }
      break;
 8007312:	e004      	b.n	800731e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007314:	6839      	ldr	r1, [r7, #0]
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 fc7d 	bl	8007c16 <USBD_CtlError>
      break;
 800731c:	bf00      	nop
  }

  return USBD_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3710      	adds	r7, #16
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007332:	2300      	movs	r3, #0
 8007334:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	889b      	ldrh	r3, [r3, #4]
 800733a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007344:	2b40      	cmp	r3, #64	; 0x40
 8007346:	d007      	beq.n	8007358 <USBD_StdEPReq+0x30>
 8007348:	2b40      	cmp	r3, #64	; 0x40
 800734a:	f200 8146 	bhi.w	80075da <USBD_StdEPReq+0x2b2>
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00a      	beq.n	8007368 <USBD_StdEPReq+0x40>
 8007352:	2b20      	cmp	r3, #32
 8007354:	f040 8141 	bne.w	80075da <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	6839      	ldr	r1, [r7, #0]
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	4798      	blx	r3
      break;
 8007366:	e13d      	b.n	80075e4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007370:	2b20      	cmp	r3, #32
 8007372:	d10a      	bne.n	800738a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	6839      	ldr	r1, [r7, #0]
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	4798      	blx	r3
 8007382:	4603      	mov	r3, r0
 8007384:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007386:	7bfb      	ldrb	r3, [r7, #15]
 8007388:	e12d      	b.n	80075e6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	785b      	ldrb	r3, [r3, #1]
 800738e:	2b03      	cmp	r3, #3
 8007390:	d007      	beq.n	80073a2 <USBD_StdEPReq+0x7a>
 8007392:	2b03      	cmp	r3, #3
 8007394:	f300 811b 	bgt.w	80075ce <USBD_StdEPReq+0x2a6>
 8007398:	2b00      	cmp	r3, #0
 800739a:	d072      	beq.n	8007482 <USBD_StdEPReq+0x15a>
 800739c:	2b01      	cmp	r3, #1
 800739e:	d03a      	beq.n	8007416 <USBD_StdEPReq+0xee>
 80073a0:	e115      	b.n	80075ce <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	d002      	beq.n	80073b2 <USBD_StdEPReq+0x8a>
 80073ac:	2b03      	cmp	r3, #3
 80073ae:	d015      	beq.n	80073dc <USBD_StdEPReq+0xb4>
 80073b0:	e02b      	b.n	800740a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073b2:	7bbb      	ldrb	r3, [r7, #14]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d00c      	beq.n	80073d2 <USBD_StdEPReq+0xaa>
 80073b8:	7bbb      	ldrb	r3, [r7, #14]
 80073ba:	2b80      	cmp	r3, #128	; 0x80
 80073bc:	d009      	beq.n	80073d2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80073be:	7bbb      	ldrb	r3, [r7, #14]
 80073c0:	4619      	mov	r1, r3
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f001 f89a 	bl	80084fc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80073c8:	2180      	movs	r1, #128	; 0x80
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f001 f896 	bl	80084fc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073d0:	e020      	b.n	8007414 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80073d2:	6839      	ldr	r1, [r7, #0]
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 fc1e 	bl	8007c16 <USBD_CtlError>
              break;
 80073da:	e01b      	b.n	8007414 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	885b      	ldrh	r3, [r3, #2]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d10e      	bne.n	8007402 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80073e4:	7bbb      	ldrb	r3, [r7, #14]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00b      	beq.n	8007402 <USBD_StdEPReq+0xda>
 80073ea:	7bbb      	ldrb	r3, [r7, #14]
 80073ec:	2b80      	cmp	r3, #128	; 0x80
 80073ee:	d008      	beq.n	8007402 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	88db      	ldrh	r3, [r3, #6]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d104      	bne.n	8007402 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80073f8:	7bbb      	ldrb	r3, [r7, #14]
 80073fa:	4619      	mov	r1, r3
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f001 f87d 	bl	80084fc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fccf 	bl	8007da6 <USBD_CtlSendStatus>

              break;
 8007408:	e004      	b.n	8007414 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800740a:	6839      	ldr	r1, [r7, #0]
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 fc02 	bl	8007c16 <USBD_CtlError>
              break;
 8007412:	bf00      	nop
          }
          break;
 8007414:	e0e0      	b.n	80075d8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800741c:	2b02      	cmp	r3, #2
 800741e:	d002      	beq.n	8007426 <USBD_StdEPReq+0xfe>
 8007420:	2b03      	cmp	r3, #3
 8007422:	d015      	beq.n	8007450 <USBD_StdEPReq+0x128>
 8007424:	e026      	b.n	8007474 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007426:	7bbb      	ldrb	r3, [r7, #14]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d00c      	beq.n	8007446 <USBD_StdEPReq+0x11e>
 800742c:	7bbb      	ldrb	r3, [r7, #14]
 800742e:	2b80      	cmp	r3, #128	; 0x80
 8007430:	d009      	beq.n	8007446 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007432:	7bbb      	ldrb	r3, [r7, #14]
 8007434:	4619      	mov	r1, r3
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f001 f860 	bl	80084fc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800743c:	2180      	movs	r1, #128	; 0x80
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f001 f85c 	bl	80084fc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007444:	e01c      	b.n	8007480 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007446:	6839      	ldr	r1, [r7, #0]
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 fbe4 	bl	8007c16 <USBD_CtlError>
              break;
 800744e:	e017      	b.n	8007480 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	885b      	ldrh	r3, [r3, #2]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d112      	bne.n	800747e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007458:	7bbb      	ldrb	r3, [r7, #14]
 800745a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800745e:	2b00      	cmp	r3, #0
 8007460:	d004      	beq.n	800746c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007462:	7bbb      	ldrb	r3, [r7, #14]
 8007464:	4619      	mov	r1, r3
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f001 f867 	bl	800853a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 fc9a 	bl	8007da6 <USBD_CtlSendStatus>
              }
              break;
 8007472:	e004      	b.n	800747e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007474:	6839      	ldr	r1, [r7, #0]
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 fbcd 	bl	8007c16 <USBD_CtlError>
              break;
 800747c:	e000      	b.n	8007480 <USBD_StdEPReq+0x158>
              break;
 800747e:	bf00      	nop
          }
          break;
 8007480:	e0aa      	b.n	80075d8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007488:	2b02      	cmp	r3, #2
 800748a:	d002      	beq.n	8007492 <USBD_StdEPReq+0x16a>
 800748c:	2b03      	cmp	r3, #3
 800748e:	d032      	beq.n	80074f6 <USBD_StdEPReq+0x1ce>
 8007490:	e097      	b.n	80075c2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007492:	7bbb      	ldrb	r3, [r7, #14]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d007      	beq.n	80074a8 <USBD_StdEPReq+0x180>
 8007498:	7bbb      	ldrb	r3, [r7, #14]
 800749a:	2b80      	cmp	r3, #128	; 0x80
 800749c:	d004      	beq.n	80074a8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800749e:	6839      	ldr	r1, [r7, #0]
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 fbb8 	bl	8007c16 <USBD_CtlError>
                break;
 80074a6:	e091      	b.n	80075cc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	da0b      	bge.n	80074c8 <USBD_StdEPReq+0x1a0>
 80074b0:	7bbb      	ldrb	r3, [r7, #14]
 80074b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074b6:	4613      	mov	r3, r2
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	4413      	add	r3, r2
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	3310      	adds	r3, #16
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	4413      	add	r3, r2
 80074c4:	3304      	adds	r3, #4
 80074c6:	e00b      	b.n	80074e0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074c8:	7bbb      	ldrb	r3, [r7, #14]
 80074ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074ce:	4613      	mov	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4413      	add	r3, r2
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	4413      	add	r3, r2
 80074de:	3304      	adds	r3, #4
 80074e0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	2200      	movs	r2, #0
 80074e6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	2202      	movs	r2, #2
 80074ec:	4619      	mov	r1, r3
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 fbfb 	bl	8007cea <USBD_CtlSendData>
              break;
 80074f4:	e06a      	b.n	80075cc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80074f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	da11      	bge.n	8007522 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80074fe:	7bbb      	ldrb	r3, [r7, #14]
 8007500:	f003 020f 	and.w	r2, r3, #15
 8007504:	6879      	ldr	r1, [r7, #4]
 8007506:	4613      	mov	r3, r2
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	440b      	add	r3, r1
 8007510:	3318      	adds	r3, #24
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d117      	bne.n	8007548 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007518:	6839      	ldr	r1, [r7, #0]
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 fb7b 	bl	8007c16 <USBD_CtlError>
                  break;
 8007520:	e054      	b.n	80075cc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007522:	7bbb      	ldrb	r3, [r7, #14]
 8007524:	f003 020f 	and.w	r2, r3, #15
 8007528:	6879      	ldr	r1, [r7, #4]
 800752a:	4613      	mov	r3, r2
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	4413      	add	r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	440b      	add	r3, r1
 8007534:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d104      	bne.n	8007548 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800753e:	6839      	ldr	r1, [r7, #0]
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 fb68 	bl	8007c16 <USBD_CtlError>
                  break;
 8007546:	e041      	b.n	80075cc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007548:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800754c:	2b00      	cmp	r3, #0
 800754e:	da0b      	bge.n	8007568 <USBD_StdEPReq+0x240>
 8007550:	7bbb      	ldrb	r3, [r7, #14]
 8007552:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007556:	4613      	mov	r3, r2
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4413      	add	r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	3310      	adds	r3, #16
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	4413      	add	r3, r2
 8007564:	3304      	adds	r3, #4
 8007566:	e00b      	b.n	8007580 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007568:	7bbb      	ldrb	r3, [r7, #14]
 800756a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800756e:	4613      	mov	r3, r2
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	4413      	add	r3, r2
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	4413      	add	r3, r2
 800757e:	3304      	adds	r3, #4
 8007580:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007582:	7bbb      	ldrb	r3, [r7, #14]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d002      	beq.n	800758e <USBD_StdEPReq+0x266>
 8007588:	7bbb      	ldrb	r3, [r7, #14]
 800758a:	2b80      	cmp	r3, #128	; 0x80
 800758c:	d103      	bne.n	8007596 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	2200      	movs	r2, #0
 8007592:	601a      	str	r2, [r3, #0]
 8007594:	e00e      	b.n	80075b4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007596:	7bbb      	ldrb	r3, [r7, #14]
 8007598:	4619      	mov	r1, r3
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 ffec 	bl	8008578 <USBD_LL_IsStallEP>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d003      	beq.n	80075ae <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	2201      	movs	r2, #1
 80075aa:	601a      	str	r2, [r3, #0]
 80075ac:	e002      	b.n	80075b4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	2200      	movs	r2, #0
 80075b2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	2202      	movs	r2, #2
 80075b8:	4619      	mov	r1, r3
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fb95 	bl	8007cea <USBD_CtlSendData>
              break;
 80075c0:	e004      	b.n	80075cc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80075c2:	6839      	ldr	r1, [r7, #0]
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 fb26 	bl	8007c16 <USBD_CtlError>
              break;
 80075ca:	bf00      	nop
          }
          break;
 80075cc:	e004      	b.n	80075d8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80075ce:	6839      	ldr	r1, [r7, #0]
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 fb20 	bl	8007c16 <USBD_CtlError>
          break;
 80075d6:	bf00      	nop
      }
      break;
 80075d8:	e004      	b.n	80075e4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80075da:	6839      	ldr	r1, [r7, #0]
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 fb1a 	bl	8007c16 <USBD_CtlError>
      break;
 80075e2:	bf00      	nop
  }

  return ret;
 80075e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
	...

080075f0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075fa:	2300      	movs	r3, #0
 80075fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80075fe:	2300      	movs	r3, #0
 8007600:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007602:	2300      	movs	r3, #0
 8007604:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	885b      	ldrh	r3, [r3, #2]
 800760a:	0a1b      	lsrs	r3, r3, #8
 800760c:	b29b      	uxth	r3, r3
 800760e:	3b01      	subs	r3, #1
 8007610:	2b06      	cmp	r3, #6
 8007612:	f200 8128 	bhi.w	8007866 <USBD_GetDescriptor+0x276>
 8007616:	a201      	add	r2, pc, #4	; (adr r2, 800761c <USBD_GetDescriptor+0x2c>)
 8007618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800761c:	08007639 	.word	0x08007639
 8007620:	08007651 	.word	0x08007651
 8007624:	08007691 	.word	0x08007691
 8007628:	08007867 	.word	0x08007867
 800762c:	08007867 	.word	0x08007867
 8007630:	08007807 	.word	0x08007807
 8007634:	08007833 	.word	0x08007833
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	7c12      	ldrb	r2, [r2, #16]
 8007644:	f107 0108 	add.w	r1, r7, #8
 8007648:	4610      	mov	r0, r2
 800764a:	4798      	blx	r3
 800764c:	60f8      	str	r0, [r7, #12]
      break;
 800764e:	e112      	b.n	8007876 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	7c1b      	ldrb	r3, [r3, #16]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d10d      	bne.n	8007674 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800765e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007660:	f107 0208 	add.w	r2, r7, #8
 8007664:	4610      	mov	r0, r2
 8007666:	4798      	blx	r3
 8007668:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	3301      	adds	r3, #1
 800766e:	2202      	movs	r2, #2
 8007670:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007672:	e100      	b.n	8007876 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800767a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767c:	f107 0208 	add.w	r2, r7, #8
 8007680:	4610      	mov	r0, r2
 8007682:	4798      	blx	r3
 8007684:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	3301      	adds	r3, #1
 800768a:	2202      	movs	r2, #2
 800768c:	701a      	strb	r2, [r3, #0]
      break;
 800768e:	e0f2      	b.n	8007876 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	885b      	ldrh	r3, [r3, #2]
 8007694:	b2db      	uxtb	r3, r3
 8007696:	2b05      	cmp	r3, #5
 8007698:	f200 80ac 	bhi.w	80077f4 <USBD_GetDescriptor+0x204>
 800769c:	a201      	add	r2, pc, #4	; (adr r2, 80076a4 <USBD_GetDescriptor+0xb4>)
 800769e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a2:	bf00      	nop
 80076a4:	080076bd 	.word	0x080076bd
 80076a8:	080076f1 	.word	0x080076f1
 80076ac:	08007725 	.word	0x08007725
 80076b0:	08007759 	.word	0x08007759
 80076b4:	0800778d 	.word	0x0800778d
 80076b8:	080077c1 	.word	0x080077c1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00b      	beq.n	80076e0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	7c12      	ldrb	r2, [r2, #16]
 80076d4:	f107 0108 	add.w	r1, r7, #8
 80076d8:	4610      	mov	r0, r2
 80076da:	4798      	blx	r3
 80076dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076de:	e091      	b.n	8007804 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076e0:	6839      	ldr	r1, [r7, #0]
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 fa97 	bl	8007c16 <USBD_CtlError>
            err++;
 80076e8:	7afb      	ldrb	r3, [r7, #11]
 80076ea:	3301      	adds	r3, #1
 80076ec:	72fb      	strb	r3, [r7, #11]
          break;
 80076ee:	e089      	b.n	8007804 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d00b      	beq.n	8007714 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	7c12      	ldrb	r2, [r2, #16]
 8007708:	f107 0108 	add.w	r1, r7, #8
 800770c:	4610      	mov	r0, r2
 800770e:	4798      	blx	r3
 8007710:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007712:	e077      	b.n	8007804 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007714:	6839      	ldr	r1, [r7, #0]
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 fa7d 	bl	8007c16 <USBD_CtlError>
            err++;
 800771c:	7afb      	ldrb	r3, [r7, #11]
 800771e:	3301      	adds	r3, #1
 8007720:	72fb      	strb	r3, [r7, #11]
          break;
 8007722:	e06f      	b.n	8007804 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00b      	beq.n	8007748 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	7c12      	ldrb	r2, [r2, #16]
 800773c:	f107 0108 	add.w	r1, r7, #8
 8007740:	4610      	mov	r0, r2
 8007742:	4798      	blx	r3
 8007744:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007746:	e05d      	b.n	8007804 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007748:	6839      	ldr	r1, [r7, #0]
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 fa63 	bl	8007c16 <USBD_CtlError>
            err++;
 8007750:	7afb      	ldrb	r3, [r7, #11]
 8007752:	3301      	adds	r3, #1
 8007754:	72fb      	strb	r3, [r7, #11]
          break;
 8007756:	e055      	b.n	8007804 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00b      	beq.n	800777c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	7c12      	ldrb	r2, [r2, #16]
 8007770:	f107 0108 	add.w	r1, r7, #8
 8007774:	4610      	mov	r0, r2
 8007776:	4798      	blx	r3
 8007778:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800777a:	e043      	b.n	8007804 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800777c:	6839      	ldr	r1, [r7, #0]
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 fa49 	bl	8007c16 <USBD_CtlError>
            err++;
 8007784:	7afb      	ldrb	r3, [r7, #11]
 8007786:	3301      	adds	r3, #1
 8007788:	72fb      	strb	r3, [r7, #11]
          break;
 800778a:	e03b      	b.n	8007804 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007792:	695b      	ldr	r3, [r3, #20]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d00b      	beq.n	80077b0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800779e:	695b      	ldr	r3, [r3, #20]
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	7c12      	ldrb	r2, [r2, #16]
 80077a4:	f107 0108 	add.w	r1, r7, #8
 80077a8:	4610      	mov	r0, r2
 80077aa:	4798      	blx	r3
 80077ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077ae:	e029      	b.n	8007804 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077b0:	6839      	ldr	r1, [r7, #0]
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 fa2f 	bl	8007c16 <USBD_CtlError>
            err++;
 80077b8:	7afb      	ldrb	r3, [r7, #11]
 80077ba:	3301      	adds	r3, #1
 80077bc:	72fb      	strb	r3, [r7, #11]
          break;
 80077be:	e021      	b.n	8007804 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077c6:	699b      	ldr	r3, [r3, #24]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d00b      	beq.n	80077e4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077d2:	699b      	ldr	r3, [r3, #24]
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	7c12      	ldrb	r2, [r2, #16]
 80077d8:	f107 0108 	add.w	r1, r7, #8
 80077dc:	4610      	mov	r0, r2
 80077de:	4798      	blx	r3
 80077e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077e2:	e00f      	b.n	8007804 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077e4:	6839      	ldr	r1, [r7, #0]
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 fa15 	bl	8007c16 <USBD_CtlError>
            err++;
 80077ec:	7afb      	ldrb	r3, [r7, #11]
 80077ee:	3301      	adds	r3, #1
 80077f0:	72fb      	strb	r3, [r7, #11]
          break;
 80077f2:	e007      	b.n	8007804 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80077f4:	6839      	ldr	r1, [r7, #0]
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 fa0d 	bl	8007c16 <USBD_CtlError>
          err++;
 80077fc:	7afb      	ldrb	r3, [r7, #11]
 80077fe:	3301      	adds	r3, #1
 8007800:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007802:	e038      	b.n	8007876 <USBD_GetDescriptor+0x286>
 8007804:	e037      	b.n	8007876 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	7c1b      	ldrb	r3, [r3, #16]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d109      	bne.n	8007822 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007816:	f107 0208 	add.w	r2, r7, #8
 800781a:	4610      	mov	r0, r2
 800781c:	4798      	blx	r3
 800781e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007820:	e029      	b.n	8007876 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007822:	6839      	ldr	r1, [r7, #0]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 f9f6 	bl	8007c16 <USBD_CtlError>
        err++;
 800782a:	7afb      	ldrb	r3, [r7, #11]
 800782c:	3301      	adds	r3, #1
 800782e:	72fb      	strb	r3, [r7, #11]
      break;
 8007830:	e021      	b.n	8007876 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	7c1b      	ldrb	r3, [r3, #16]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d10d      	bne.n	8007856 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007842:	f107 0208 	add.w	r2, r7, #8
 8007846:	4610      	mov	r0, r2
 8007848:	4798      	blx	r3
 800784a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	3301      	adds	r3, #1
 8007850:	2207      	movs	r2, #7
 8007852:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007854:	e00f      	b.n	8007876 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007856:	6839      	ldr	r1, [r7, #0]
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 f9dc 	bl	8007c16 <USBD_CtlError>
        err++;
 800785e:	7afb      	ldrb	r3, [r7, #11]
 8007860:	3301      	adds	r3, #1
 8007862:	72fb      	strb	r3, [r7, #11]
      break;
 8007864:	e007      	b.n	8007876 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007866:	6839      	ldr	r1, [r7, #0]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 f9d4 	bl	8007c16 <USBD_CtlError>
      err++;
 800786e:	7afb      	ldrb	r3, [r7, #11]
 8007870:	3301      	adds	r3, #1
 8007872:	72fb      	strb	r3, [r7, #11]
      break;
 8007874:	bf00      	nop
  }

  if (err != 0U)
 8007876:	7afb      	ldrb	r3, [r7, #11]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d11c      	bne.n	80078b6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800787c:	893b      	ldrh	r3, [r7, #8]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d011      	beq.n	80078a6 <USBD_GetDescriptor+0x2b6>
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	88db      	ldrh	r3, [r3, #6]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00d      	beq.n	80078a6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	88da      	ldrh	r2, [r3, #6]
 800788e:	893b      	ldrh	r3, [r7, #8]
 8007890:	4293      	cmp	r3, r2
 8007892:	bf28      	it	cs
 8007894:	4613      	movcs	r3, r2
 8007896:	b29b      	uxth	r3, r3
 8007898:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800789a:	893b      	ldrh	r3, [r7, #8]
 800789c:	461a      	mov	r2, r3
 800789e:	68f9      	ldr	r1, [r7, #12]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 fa22 	bl	8007cea <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	88db      	ldrh	r3, [r3, #6]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d104      	bne.n	80078b8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fa79 	bl	8007da6 <USBD_CtlSendStatus>
 80078b4:	e000      	b.n	80078b8 <USBD_GetDescriptor+0x2c8>
    return;
 80078b6:	bf00      	nop
    }
  }
}
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop

080078c0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	889b      	ldrh	r3, [r3, #4]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d130      	bne.n	8007934 <USBD_SetAddress+0x74>
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	88db      	ldrh	r3, [r3, #6]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d12c      	bne.n	8007934 <USBD_SetAddress+0x74>
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	885b      	ldrh	r3, [r3, #2]
 80078de:	2b7f      	cmp	r3, #127	; 0x7f
 80078e0:	d828      	bhi.n	8007934 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	885b      	ldrh	r3, [r3, #2]
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078f4:	2b03      	cmp	r3, #3
 80078f6:	d104      	bne.n	8007902 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f98b 	bl	8007c16 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007900:	e01d      	b.n	800793e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	7bfa      	ldrb	r2, [r7, #15]
 8007906:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800790a:	7bfb      	ldrb	r3, [r7, #15]
 800790c:	4619      	mov	r1, r3
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fe5e 	bl	80085d0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 fa46 	bl	8007da6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800791a:	7bfb      	ldrb	r3, [r7, #15]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d004      	beq.n	800792a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2202      	movs	r2, #2
 8007924:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007928:	e009      	b.n	800793e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2201      	movs	r2, #1
 800792e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007932:	e004      	b.n	800793e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007934:	6839      	ldr	r1, [r7, #0]
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f96d 	bl	8007c16 <USBD_CtlError>
  }
}
 800793c:	bf00      	nop
 800793e:	bf00      	nop
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
	...

08007948 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	885b      	ldrh	r3, [r3, #2]
 8007956:	b2da      	uxtb	r2, r3
 8007958:	4b41      	ldr	r3, [pc, #260]	; (8007a60 <USBD_SetConfig+0x118>)
 800795a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800795c:	4b40      	ldr	r3, [pc, #256]	; (8007a60 <USBD_SetConfig+0x118>)
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d904      	bls.n	800796e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007964:	6839      	ldr	r1, [r7, #0]
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 f955 	bl	8007c16 <USBD_CtlError>
 800796c:	e075      	b.n	8007a5a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007974:	2b02      	cmp	r3, #2
 8007976:	d002      	beq.n	800797e <USBD_SetConfig+0x36>
 8007978:	2b03      	cmp	r3, #3
 800797a:	d023      	beq.n	80079c4 <USBD_SetConfig+0x7c>
 800797c:	e062      	b.n	8007a44 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800797e:	4b38      	ldr	r3, [pc, #224]	; (8007a60 <USBD_SetConfig+0x118>)
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d01a      	beq.n	80079bc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007986:	4b36      	ldr	r3, [pc, #216]	; (8007a60 <USBD_SetConfig+0x118>)
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	461a      	mov	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2203      	movs	r2, #3
 8007994:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007998:	4b31      	ldr	r3, [pc, #196]	; (8007a60 <USBD_SetConfig+0x118>)
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	4619      	mov	r1, r3
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f7ff f9e7 	bl	8006d72 <USBD_SetClassConfig>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b02      	cmp	r3, #2
 80079a8:	d104      	bne.n	80079b4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80079aa:	6839      	ldr	r1, [r7, #0]
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 f932 	bl	8007c16 <USBD_CtlError>
            return;
 80079b2:	e052      	b.n	8007a5a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 f9f6 	bl	8007da6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80079ba:	e04e      	b.n	8007a5a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 f9f2 	bl	8007da6 <USBD_CtlSendStatus>
        break;
 80079c2:	e04a      	b.n	8007a5a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80079c4:	4b26      	ldr	r3, [pc, #152]	; (8007a60 <USBD_SetConfig+0x118>)
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d112      	bne.n	80079f2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2202      	movs	r2, #2
 80079d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80079d4:	4b22      	ldr	r3, [pc, #136]	; (8007a60 <USBD_SetConfig+0x118>)
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	461a      	mov	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80079de:	4b20      	ldr	r3, [pc, #128]	; (8007a60 <USBD_SetConfig+0x118>)
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	4619      	mov	r1, r3
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f7ff f9e3 	bl	8006db0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f9db 	bl	8007da6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80079f0:	e033      	b.n	8007a5a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80079f2:	4b1b      	ldr	r3, [pc, #108]	; (8007a60 <USBD_SetConfig+0x118>)
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	461a      	mov	r2, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d01d      	beq.n	8007a3c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	4619      	mov	r1, r3
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f7ff f9d1 	bl	8006db0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007a0e:	4b14      	ldr	r3, [pc, #80]	; (8007a60 <USBD_SetConfig+0x118>)
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	461a      	mov	r2, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007a18:	4b11      	ldr	r3, [pc, #68]	; (8007a60 <USBD_SetConfig+0x118>)
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f7ff f9a7 	bl	8006d72 <USBD_SetClassConfig>
 8007a24:	4603      	mov	r3, r0
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	d104      	bne.n	8007a34 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007a2a:	6839      	ldr	r1, [r7, #0]
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 f8f2 	bl	8007c16 <USBD_CtlError>
            return;
 8007a32:	e012      	b.n	8007a5a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 f9b6 	bl	8007da6 <USBD_CtlSendStatus>
        break;
 8007a3a:	e00e      	b.n	8007a5a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 f9b2 	bl	8007da6 <USBD_CtlSendStatus>
        break;
 8007a42:	e00a      	b.n	8007a5a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007a44:	6839      	ldr	r1, [r7, #0]
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 f8e5 	bl	8007c16 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007a4c:	4b04      	ldr	r3, [pc, #16]	; (8007a60 <USBD_SetConfig+0x118>)
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	4619      	mov	r1, r3
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f7ff f9ac 	bl	8006db0 <USBD_ClrClassConfig>
        break;
 8007a58:	bf00      	nop
    }
  }
}
 8007a5a:	3708      	adds	r7, #8
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	200002e0 	.word	0x200002e0

08007a64 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	88db      	ldrh	r3, [r3, #6]
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d004      	beq.n	8007a80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007a76:	6839      	ldr	r1, [r7, #0]
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 f8cc 	bl	8007c16 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007a7e:	e022      	b.n	8007ac6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	dc02      	bgt.n	8007a90 <USBD_GetConfig+0x2c>
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	dc03      	bgt.n	8007a96 <USBD_GetConfig+0x32>
 8007a8e:	e015      	b.n	8007abc <USBD_GetConfig+0x58>
 8007a90:	2b03      	cmp	r3, #3
 8007a92:	d00b      	beq.n	8007aac <USBD_GetConfig+0x48>
 8007a94:	e012      	b.n	8007abc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	3308      	adds	r3, #8
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 f920 	bl	8007cea <USBD_CtlSendData>
        break;
 8007aaa:	e00c      	b.n	8007ac6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	3304      	adds	r3, #4
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 f918 	bl	8007cea <USBD_CtlSendData>
        break;
 8007aba:	e004      	b.n	8007ac6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007abc:	6839      	ldr	r1, [r7, #0]
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 f8a9 	bl	8007c16 <USBD_CtlError>
        break;
 8007ac4:	bf00      	nop
}
 8007ac6:	bf00      	nop
 8007ac8:	3708      	adds	r7, #8
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b082      	sub	sp, #8
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
 8007ad6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d81e      	bhi.n	8007b22 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	88db      	ldrh	r3, [r3, #6]
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d004      	beq.n	8007af6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007aec:	6839      	ldr	r1, [r7, #0]
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 f891 	bl	8007c16 <USBD_CtlError>
        break;
 8007af4:	e01a      	b.n	8007b2c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2201      	movs	r2, #1
 8007afa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d005      	beq.n	8007b12 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	f043 0202 	orr.w	r2, r3, #2
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	330c      	adds	r3, #12
 8007b16:	2202      	movs	r2, #2
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 f8e5 	bl	8007cea <USBD_CtlSendData>
      break;
 8007b20:	e004      	b.n	8007b2c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007b22:	6839      	ldr	r1, [r7, #0]
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 f876 	bl	8007c16 <USBD_CtlError>
      break;
 8007b2a:	bf00      	nop
  }
}
 8007b2c:	bf00      	nop
 8007b2e:	3708      	adds	r7, #8
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	885b      	ldrh	r3, [r3, #2]
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d106      	bne.n	8007b54 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f929 	bl	8007da6 <USBD_CtlSendStatus>
  }
}
 8007b54:	bf00      	nop
 8007b56:	3708      	adds	r7, #8
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d80b      	bhi.n	8007b8a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	885b      	ldrh	r3, [r3, #2]
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d10c      	bne.n	8007b94 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f90f 	bl	8007da6 <USBD_CtlSendStatus>
      }
      break;
 8007b88:	e004      	b.n	8007b94 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007b8a:	6839      	ldr	r1, [r7, #0]
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 f842 	bl	8007c16 <USBD_CtlError>
      break;
 8007b92:	e000      	b.n	8007b96 <USBD_ClrFeature+0x3a>
      break;
 8007b94:	bf00      	nop
  }
}
 8007b96:	bf00      	nop
 8007b98:	3708      	adds	r7, #8
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b9e:	b480      	push	{r7}
 8007ba0:	b083      	sub	sp, #12
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	781a      	ldrb	r2, [r3, #0]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	785a      	ldrb	r2, [r3, #1]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	3302      	adds	r3, #2
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	b29a      	uxth	r2, r3
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	3303      	adds	r3, #3
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	021b      	lsls	r3, r3, #8
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	4413      	add	r3, r2
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	3304      	adds	r3, #4
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	b29a      	uxth	r2, r3
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	3305      	adds	r3, #5
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	021b      	lsls	r3, r3, #8
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	4413      	add	r3, r2
 8007bea:	b29a      	uxth	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	3306      	adds	r3, #6
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	b29a      	uxth	r2, r3
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	3307      	adds	r3, #7
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	021b      	lsls	r3, r3, #8
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	4413      	add	r3, r2
 8007c06:	b29a      	uxth	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	80da      	strh	r2, [r3, #6]

}
 8007c0c:	bf00      	nop
 8007c0e:	370c      	adds	r7, #12
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bc80      	pop	{r7}
 8007c14:	4770      	bx	lr

08007c16 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b082      	sub	sp, #8
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
 8007c1e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007c20:	2180      	movs	r1, #128	; 0x80
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 fc6a 	bl	80084fc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007c28:	2100      	movs	r1, #0
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 fc66 	bl	80084fc <USBD_LL_StallEP>
}
 8007c30:	bf00      	nop
 8007c32:	3708      	adds	r7, #8
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b086      	sub	sp, #24
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c44:	2300      	movs	r3, #0
 8007c46:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d032      	beq.n	8007cb4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f000 f834 	bl	8007cbc <USBD_GetLen>
 8007c54:	4603      	mov	r3, r0
 8007c56:	3301      	adds	r3, #1
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	005b      	lsls	r3, r3, #1
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007c62:	7dfb      	ldrb	r3, [r7, #23]
 8007c64:	1c5a      	adds	r2, r3, #1
 8007c66:	75fa      	strb	r2, [r7, #23]
 8007c68:	461a      	mov	r2, r3
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	7812      	ldrb	r2, [r2, #0]
 8007c72:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007c74:	7dfb      	ldrb	r3, [r7, #23]
 8007c76:	1c5a      	adds	r2, r3, #1
 8007c78:	75fa      	strb	r2, [r7, #23]
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	4413      	add	r3, r2
 8007c80:	2203      	movs	r2, #3
 8007c82:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007c84:	e012      	b.n	8007cac <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	1c5a      	adds	r2, r3, #1
 8007c8a:	60fa      	str	r2, [r7, #12]
 8007c8c:	7dfa      	ldrb	r2, [r7, #23]
 8007c8e:	1c51      	adds	r1, r2, #1
 8007c90:	75f9      	strb	r1, [r7, #23]
 8007c92:	4611      	mov	r1, r2
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	440a      	add	r2, r1
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007c9c:	7dfb      	ldrb	r3, [r7, #23]
 8007c9e:	1c5a      	adds	r2, r3, #1
 8007ca0:	75fa      	strb	r2, [r7, #23]
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	4413      	add	r3, r2
 8007ca8:	2200      	movs	r2, #0
 8007caa:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d1e8      	bne.n	8007c86 <USBD_GetString+0x4e>
    }
  }
}
 8007cb4:	bf00      	nop
 8007cb6:	3718      	adds	r7, #24
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b085      	sub	sp, #20
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007cc8:	e005      	b.n	8007cd6 <USBD_GetLen+0x1a>
  {
    len++;
 8007cca:	7bfb      	ldrb	r3, [r7, #15]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d1f5      	bne.n	8007cca <USBD_GetLen+0xe>
  }

  return len;
 8007cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3714      	adds	r7, #20
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bc80      	pop	{r7}
 8007ce8:	4770      	bx	lr

08007cea <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b084      	sub	sp, #16
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	60f8      	str	r0, [r7, #12]
 8007cf2:	60b9      	str	r1, [r7, #8]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007d00:	88fa      	ldrh	r2, [r7, #6]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007d06:	88fa      	ldrh	r2, [r7, #6]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d0c:	88fb      	ldrh	r3, [r7, #6]
 8007d0e:	68ba      	ldr	r2, [r7, #8]
 8007d10:	2100      	movs	r1, #0
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f000 fc7b 	bl	800860e <USBD_LL_Transmit>

  return USBD_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3710      	adds	r7, #16
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b084      	sub	sp, #16
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	60f8      	str	r0, [r7, #12]
 8007d2a:	60b9      	str	r1, [r7, #8]
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d30:	88fb      	ldrh	r3, [r7, #6]
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	2100      	movs	r1, #0
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f000 fc69 	bl	800860e <USBD_LL_Transmit>

  return USBD_OK;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b084      	sub	sp, #16
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	60f8      	str	r0, [r7, #12]
 8007d4e:	60b9      	str	r1, [r7, #8]
 8007d50:	4613      	mov	r3, r2
 8007d52:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2203      	movs	r2, #3
 8007d58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007d5c:	88fa      	ldrh	r2, [r7, #6]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007d64:	88fa      	ldrh	r2, [r7, #6]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d6c:	88fb      	ldrh	r3, [r7, #6]
 8007d6e:	68ba      	ldr	r2, [r7, #8]
 8007d70:	2100      	movs	r1, #0
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	f000 fc6e 	bl	8008654 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3710      	adds	r7, #16
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b084      	sub	sp, #16
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	60f8      	str	r0, [r7, #12]
 8007d8a:	60b9      	str	r1, [r7, #8]
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d90:	88fb      	ldrh	r3, [r7, #6]
 8007d92:	68ba      	ldr	r2, [r7, #8]
 8007d94:	2100      	movs	r1, #0
 8007d96:	68f8      	ldr	r0, [r7, #12]
 8007d98:	f000 fc5c 	bl	8008654 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b082      	sub	sp, #8
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2204      	movs	r2, #4
 8007db2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007db6:	2300      	movs	r3, #0
 8007db8:	2200      	movs	r2, #0
 8007dba:	2100      	movs	r1, #0
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 fc26 	bl	800860e <USBD_LL_Transmit>

  return USBD_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3708      	adds	r7, #8
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2205      	movs	r2, #5
 8007dd8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ddc:	2300      	movs	r3, #0
 8007dde:	2200      	movs	r2, #0
 8007de0:	2100      	movs	r1, #0
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 fc36 	bl	8008654 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3708      	adds	r7, #8
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
	...

08007df4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007df8:	2200      	movs	r2, #0
 8007dfa:	4912      	ldr	r1, [pc, #72]	; (8007e44 <MX_USB_DEVICE_Init+0x50>)
 8007dfc:	4812      	ldr	r0, [pc, #72]	; (8007e48 <MX_USB_DEVICE_Init+0x54>)
 8007dfe:	f7fe ff5e 	bl	8006cbe <USBD_Init>
 8007e02:	4603      	mov	r3, r0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d001      	beq.n	8007e0c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007e08:	f7f8 fb9d 	bl	8000546 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007e0c:	490f      	ldr	r1, [pc, #60]	; (8007e4c <MX_USB_DEVICE_Init+0x58>)
 8007e0e:	480e      	ldr	r0, [pc, #56]	; (8007e48 <MX_USB_DEVICE_Init+0x54>)
 8007e10:	f7fe ff80 	bl	8006d14 <USBD_RegisterClass>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d001      	beq.n	8007e1e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007e1a:	f7f8 fb94 	bl	8000546 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007e1e:	490c      	ldr	r1, [pc, #48]	; (8007e50 <MX_USB_DEVICE_Init+0x5c>)
 8007e20:	4809      	ldr	r0, [pc, #36]	; (8007e48 <MX_USB_DEVICE_Init+0x54>)
 8007e22:	f7fe feb1 	bl	8006b88 <USBD_CDC_RegisterInterface>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d001      	beq.n	8007e30 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007e2c:	f7f8 fb8b 	bl	8000546 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007e30:	4805      	ldr	r0, [pc, #20]	; (8007e48 <MX_USB_DEVICE_Init+0x54>)
 8007e32:	f7fe ff88 	bl	8006d46 <USBD_Start>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d001      	beq.n	8007e40 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007e3c:	f7f8 fb83 	bl	8000546 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007e40:	bf00      	nop
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	2000012c 	.word	0x2000012c
 8007e48:	200002e4 	.word	0x200002e4
 8007e4c:	20000018 	.word	0x20000018
 8007e50:	2000011c 	.word	0x2000011c

08007e54 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007e58:	2200      	movs	r2, #0
 8007e5a:	4905      	ldr	r1, [pc, #20]	; (8007e70 <CDC_Init_FS+0x1c>)
 8007e5c:	4805      	ldr	r0, [pc, #20]	; (8007e74 <CDC_Init_FS+0x20>)
 8007e5e:	f7fe fea9 	bl	8006bb4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007e62:	4905      	ldr	r1, [pc, #20]	; (8007e78 <CDC_Init_FS+0x24>)
 8007e64:	4803      	ldr	r0, [pc, #12]	; (8007e74 <CDC_Init_FS+0x20>)
 8007e66:	f7fe febe 	bl	8006be6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007e6a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	200009ac 	.word	0x200009ac
 8007e74:	200002e4 	.word	0x200002e4
 8007e78:	200005ac 	.word	0x200005ac

08007e7c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007e80:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bc80      	pop	{r7}
 8007e88:	4770      	bx	lr
	...

08007e8c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	4603      	mov	r3, r0
 8007e94:	6039      	str	r1, [r7, #0]
 8007e96:	71fb      	strb	r3, [r7, #7]
 8007e98:	4613      	mov	r3, r2
 8007e9a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007e9c:	79fb      	ldrb	r3, [r7, #7]
 8007e9e:	2b23      	cmp	r3, #35	; 0x23
 8007ea0:	d84a      	bhi.n	8007f38 <CDC_Control_FS+0xac>
 8007ea2:	a201      	add	r2, pc, #4	; (adr r2, 8007ea8 <CDC_Control_FS+0x1c>)
 8007ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea8:	08007f39 	.word	0x08007f39
 8007eac:	08007f39 	.word	0x08007f39
 8007eb0:	08007f39 	.word	0x08007f39
 8007eb4:	08007f39 	.word	0x08007f39
 8007eb8:	08007f39 	.word	0x08007f39
 8007ebc:	08007f39 	.word	0x08007f39
 8007ec0:	08007f39 	.word	0x08007f39
 8007ec4:	08007f39 	.word	0x08007f39
 8007ec8:	08007f39 	.word	0x08007f39
 8007ecc:	08007f39 	.word	0x08007f39
 8007ed0:	08007f39 	.word	0x08007f39
 8007ed4:	08007f39 	.word	0x08007f39
 8007ed8:	08007f39 	.word	0x08007f39
 8007edc:	08007f39 	.word	0x08007f39
 8007ee0:	08007f39 	.word	0x08007f39
 8007ee4:	08007f39 	.word	0x08007f39
 8007ee8:	08007f39 	.word	0x08007f39
 8007eec:	08007f39 	.word	0x08007f39
 8007ef0:	08007f39 	.word	0x08007f39
 8007ef4:	08007f39 	.word	0x08007f39
 8007ef8:	08007f39 	.word	0x08007f39
 8007efc:	08007f39 	.word	0x08007f39
 8007f00:	08007f39 	.word	0x08007f39
 8007f04:	08007f39 	.word	0x08007f39
 8007f08:	08007f39 	.word	0x08007f39
 8007f0c:	08007f39 	.word	0x08007f39
 8007f10:	08007f39 	.word	0x08007f39
 8007f14:	08007f39 	.word	0x08007f39
 8007f18:	08007f39 	.word	0x08007f39
 8007f1c:	08007f39 	.word	0x08007f39
 8007f20:	08007f39 	.word	0x08007f39
 8007f24:	08007f39 	.word	0x08007f39
 8007f28:	08007f39 	.word	0x08007f39
 8007f2c:	08007f39 	.word	0x08007f39
 8007f30:	08007f39 	.word	0x08007f39
 8007f34:	08007f39 	.word	0x08007f39
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007f38:	bf00      	nop
  }

  return (USBD_OK);
 8007f3a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bc80      	pop	{r7}
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop

08007f48 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007f52:	6879      	ldr	r1, [r7, #4]
 8007f54:	4809      	ldr	r0, [pc, #36]	; (8007f7c <CDC_Receive_FS+0x34>)
 8007f56:	f7fe fe46 	bl	8006be6 <USBD_CDC_SetRxBuffer>

  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007f5a:	4808      	ldr	r0, [pc, #32]	; (8007f7c <CDC_Receive_FS+0x34>)
 8007f5c:	f7fe fe85 	bl	8006c6a <USBD_CDC_ReceivePacket>
 8007f60:	4b07      	ldr	r3, [pc, #28]	; (8007f80 <CDC_Receive_FS+0x38>)
 8007f62:	681b      	ldr	r3, [r3, #0]

  memcpy(&input, UserRxBufferFS, 4);
 8007f64:	4a07      	ldr	r2, [pc, #28]	; (8007f84 <CDC_Receive_FS+0x3c>)
 8007f66:	6013      	str	r3, [r2, #0]

  CDC_Transmit_FS(&button_state, 1);
 8007f68:	2101      	movs	r1, #1
 8007f6a:	4807      	ldr	r0, [pc, #28]	; (8007f88 <CDC_Receive_FS+0x40>)
 8007f6c:	f000 f80e 	bl	8007f8c <CDC_Transmit_FS>

  return (USBD_OK);
 8007f70:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3708      	adds	r7, #8
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	200002e4 	.word	0x200002e4
 8007f80:	200005ac 	.word	0x200005ac
 8007f84:	200005a8 	.word	0x200005a8
 8007f88:	20000245 	.word	0x20000245

08007f8c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	460b      	mov	r3, r1
 8007f96:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007f9c:	4b0d      	ldr	r3, [pc, #52]	; (8007fd4 <CDC_Transmit_FS+0x48>)
 8007f9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fa2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d001      	beq.n	8007fb2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e00b      	b.n	8007fca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007fb2:	887b      	ldrh	r3, [r7, #2]
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	6879      	ldr	r1, [r7, #4]
 8007fb8:	4806      	ldr	r0, [pc, #24]	; (8007fd4 <CDC_Transmit_FS+0x48>)
 8007fba:	f7fe fdfb 	bl	8006bb4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007fbe:	4805      	ldr	r0, [pc, #20]	; (8007fd4 <CDC_Transmit_FS+0x48>)
 8007fc0:	f7fe fe24 	bl	8006c0c <USBD_CDC_TransmitPacket>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	200002e4 	.word	0x200002e4

08007fd8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	4603      	mov	r3, r0
 8007fe0:	6039      	str	r1, [r7, #0]
 8007fe2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	2212      	movs	r2, #18
 8007fe8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007fea:	4b03      	ldr	r3, [pc, #12]	; (8007ff8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bc80      	pop	{r7}
 8007ff4:	4770      	bx	lr
 8007ff6:	bf00      	nop
 8007ff8:	20000148 	.word	0x20000148

08007ffc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	4603      	mov	r3, r0
 8008004:	6039      	str	r1, [r7, #0]
 8008006:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	2204      	movs	r2, #4
 800800c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800800e:	4b03      	ldr	r3, [pc, #12]	; (800801c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008010:	4618      	mov	r0, r3
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	bc80      	pop	{r7}
 8008018:	4770      	bx	lr
 800801a:	bf00      	nop
 800801c:	2000015c 	.word	0x2000015c

08008020 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	4603      	mov	r3, r0
 8008028:	6039      	str	r1, [r7, #0]
 800802a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800802c:	79fb      	ldrb	r3, [r7, #7]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d105      	bne.n	800803e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008032:	683a      	ldr	r2, [r7, #0]
 8008034:	4907      	ldr	r1, [pc, #28]	; (8008054 <USBD_FS_ProductStrDescriptor+0x34>)
 8008036:	4808      	ldr	r0, [pc, #32]	; (8008058 <USBD_FS_ProductStrDescriptor+0x38>)
 8008038:	f7ff fdfe 	bl	8007c38 <USBD_GetString>
 800803c:	e004      	b.n	8008048 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800803e:	683a      	ldr	r2, [r7, #0]
 8008040:	4904      	ldr	r1, [pc, #16]	; (8008054 <USBD_FS_ProductStrDescriptor+0x34>)
 8008042:	4805      	ldr	r0, [pc, #20]	; (8008058 <USBD_FS_ProductStrDescriptor+0x38>)
 8008044:	f7ff fdf8 	bl	8007c38 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008048:	4b02      	ldr	r3, [pc, #8]	; (8008054 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800804a:	4618      	mov	r0, r3
 800804c:	3708      	adds	r7, #8
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	20000dac 	.word	0x20000dac
 8008058:	08008960 	.word	0x08008960

0800805c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	4603      	mov	r3, r0
 8008064:	6039      	str	r1, [r7, #0]
 8008066:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008068:	683a      	ldr	r2, [r7, #0]
 800806a:	4904      	ldr	r1, [pc, #16]	; (800807c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800806c:	4804      	ldr	r0, [pc, #16]	; (8008080 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800806e:	f7ff fde3 	bl	8007c38 <USBD_GetString>
  return USBD_StrDesc;
 8008072:	4b02      	ldr	r3, [pc, #8]	; (800807c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008074:	4618      	mov	r0, r3
 8008076:	3708      	adds	r7, #8
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	20000dac 	.word	0x20000dac
 8008080:	08008978 	.word	0x08008978

08008084 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	4603      	mov	r3, r0
 800808c:	6039      	str	r1, [r7, #0]
 800808e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	221a      	movs	r2, #26
 8008094:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008096:	f000 f843 	bl	8008120 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800809a:	4b02      	ldr	r3, [pc, #8]	; (80080a4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800809c:	4618      	mov	r0, r3
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	20000160 	.word	0x20000160

080080a8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	4603      	mov	r3, r0
 80080b0:	6039      	str	r1, [r7, #0]
 80080b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80080b4:	79fb      	ldrb	r3, [r7, #7]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d105      	bne.n	80080c6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80080ba:	683a      	ldr	r2, [r7, #0]
 80080bc:	4907      	ldr	r1, [pc, #28]	; (80080dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80080be:	4808      	ldr	r0, [pc, #32]	; (80080e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80080c0:	f7ff fdba 	bl	8007c38 <USBD_GetString>
 80080c4:	e004      	b.n	80080d0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80080c6:	683a      	ldr	r2, [r7, #0]
 80080c8:	4904      	ldr	r1, [pc, #16]	; (80080dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80080ca:	4805      	ldr	r0, [pc, #20]	; (80080e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80080cc:	f7ff fdb4 	bl	8007c38 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080d0:	4b02      	ldr	r3, [pc, #8]	; (80080dc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	20000dac 	.word	0x20000dac
 80080e0:	0800898c 	.word	0x0800898c

080080e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	4603      	mov	r3, r0
 80080ec:	6039      	str	r1, [r7, #0]
 80080ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80080f0:	79fb      	ldrb	r3, [r7, #7]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d105      	bne.n	8008102 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80080f6:	683a      	ldr	r2, [r7, #0]
 80080f8:	4907      	ldr	r1, [pc, #28]	; (8008118 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80080fa:	4808      	ldr	r0, [pc, #32]	; (800811c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80080fc:	f7ff fd9c 	bl	8007c38 <USBD_GetString>
 8008100:	e004      	b.n	800810c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008102:	683a      	ldr	r2, [r7, #0]
 8008104:	4904      	ldr	r1, [pc, #16]	; (8008118 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008106:	4805      	ldr	r0, [pc, #20]	; (800811c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008108:	f7ff fd96 	bl	8007c38 <USBD_GetString>
  }
  return USBD_StrDesc;
 800810c:	4b02      	ldr	r3, [pc, #8]	; (8008118 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800810e:	4618      	mov	r0, r3
 8008110:	3708      	adds	r7, #8
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	20000dac 	.word	0x20000dac
 800811c:	08008998 	.word	0x08008998

08008120 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008126:	4b0f      	ldr	r3, [pc, #60]	; (8008164 <Get_SerialNum+0x44>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800812c:	4b0e      	ldr	r3, [pc, #56]	; (8008168 <Get_SerialNum+0x48>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008132:	4b0e      	ldr	r3, [pc, #56]	; (800816c <Get_SerialNum+0x4c>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4413      	add	r3, r2
 800813e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d009      	beq.n	800815a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008146:	2208      	movs	r2, #8
 8008148:	4909      	ldr	r1, [pc, #36]	; (8008170 <Get_SerialNum+0x50>)
 800814a:	68f8      	ldr	r0, [r7, #12]
 800814c:	f000 f814 	bl	8008178 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008150:	2204      	movs	r2, #4
 8008152:	4908      	ldr	r1, [pc, #32]	; (8008174 <Get_SerialNum+0x54>)
 8008154:	68b8      	ldr	r0, [r7, #8]
 8008156:	f000 f80f 	bl	8008178 <IntToUnicode>
  }
}
 800815a:	bf00      	nop
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	1ffff7e8 	.word	0x1ffff7e8
 8008168:	1ffff7ec 	.word	0x1ffff7ec
 800816c:	1ffff7f0 	.word	0x1ffff7f0
 8008170:	20000162 	.word	0x20000162
 8008174:	20000172 	.word	0x20000172

08008178 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008178:	b480      	push	{r7}
 800817a:	b087      	sub	sp, #28
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	4613      	mov	r3, r2
 8008184:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008186:	2300      	movs	r3, #0
 8008188:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800818a:	2300      	movs	r3, #0
 800818c:	75fb      	strb	r3, [r7, #23]
 800818e:	e027      	b.n	80081e0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	0f1b      	lsrs	r3, r3, #28
 8008194:	2b09      	cmp	r3, #9
 8008196:	d80b      	bhi.n	80081b0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	0f1b      	lsrs	r3, r3, #28
 800819c:	b2da      	uxtb	r2, r3
 800819e:	7dfb      	ldrb	r3, [r7, #23]
 80081a0:	005b      	lsls	r3, r3, #1
 80081a2:	4619      	mov	r1, r3
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	440b      	add	r3, r1
 80081a8:	3230      	adds	r2, #48	; 0x30
 80081aa:	b2d2      	uxtb	r2, r2
 80081ac:	701a      	strb	r2, [r3, #0]
 80081ae:	e00a      	b.n	80081c6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	0f1b      	lsrs	r3, r3, #28
 80081b4:	b2da      	uxtb	r2, r3
 80081b6:	7dfb      	ldrb	r3, [r7, #23]
 80081b8:	005b      	lsls	r3, r3, #1
 80081ba:	4619      	mov	r1, r3
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	440b      	add	r3, r1
 80081c0:	3237      	adds	r2, #55	; 0x37
 80081c2:	b2d2      	uxtb	r2, r2
 80081c4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	011b      	lsls	r3, r3, #4
 80081ca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80081cc:	7dfb      	ldrb	r3, [r7, #23]
 80081ce:	005b      	lsls	r3, r3, #1
 80081d0:	3301      	adds	r3, #1
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	4413      	add	r3, r2
 80081d6:	2200      	movs	r2, #0
 80081d8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80081da:	7dfb      	ldrb	r3, [r7, #23]
 80081dc:	3301      	adds	r3, #1
 80081de:	75fb      	strb	r3, [r7, #23]
 80081e0:	7dfa      	ldrb	r2, [r7, #23]
 80081e2:	79fb      	ldrb	r3, [r7, #7]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d3d3      	bcc.n	8008190 <IntToUnicode+0x18>
  }
}
 80081e8:	bf00      	nop
 80081ea:	bf00      	nop
 80081ec:	371c      	adds	r7, #28
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bc80      	pop	{r7}
 80081f2:	4770      	bx	lr

080081f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a11      	ldr	r2, [pc, #68]	; (8008248 <HAL_PCD_MspInit+0x54>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d11b      	bne.n	800823e <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008206:	4b11      	ldr	r3, [pc, #68]	; (800824c <HAL_PCD_MspInit+0x58>)
 8008208:	69db      	ldr	r3, [r3, #28]
 800820a:	4a10      	ldr	r2, [pc, #64]	; (800824c <HAL_PCD_MspInit+0x58>)
 800820c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008210:	61d3      	str	r3, [r2, #28]
 8008212:	4b0e      	ldr	r3, [pc, #56]	; (800824c <HAL_PCD_MspInit+0x58>)
 8008214:	69db      	ldr	r3, [r3, #28]
 8008216:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800821a:	60fb      	str	r3, [r7, #12]
 800821c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 800821e:	2200      	movs	r2, #0
 8008220:	2100      	movs	r1, #0
 8008222:	2013      	movs	r0, #19
 8008224:	f7f8 fd53 	bl	8000cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8008228:	2013      	movs	r0, #19
 800822a:	f7f8 fd6c 	bl	8000d06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800822e:	2200      	movs	r2, #0
 8008230:	2100      	movs	r1, #0
 8008232:	2014      	movs	r0, #20
 8008234:	f7f8 fd4b 	bl	8000cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008238:	2014      	movs	r0, #20
 800823a:	f7f8 fd64 	bl	8000d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800823e:	bf00      	nop
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	40005c00 	.word	0x40005c00
 800824c:	40021000 	.word	0x40021000

08008250 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008264:	4619      	mov	r1, r3
 8008266:	4610      	mov	r0, r2
 8008268:	f7fe fdb5 	bl	8006dd6 <USBD_LL_SetupStage>
}
 800826c:	bf00      	nop
 800826e:	3708      	adds	r7, #8
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	460b      	mov	r3, r1
 800827e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8008286:	78fa      	ldrb	r2, [r7, #3]
 8008288:	6879      	ldr	r1, [r7, #4]
 800828a:	4613      	mov	r3, r2
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	4413      	add	r3, r2
 8008290:	00db      	lsls	r3, r3, #3
 8008292:	440b      	add	r3, r1
 8008294:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	78fb      	ldrb	r3, [r7, #3]
 800829c:	4619      	mov	r1, r3
 800829e:	f7fe fde7 	bl	8006e70 <USBD_LL_DataOutStage>
}
 80082a2:	bf00      	nop
 80082a4:	3708      	adds	r7, #8
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b082      	sub	sp, #8
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
 80082b2:	460b      	mov	r3, r1
 80082b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80082bc:	78fa      	ldrb	r2, [r7, #3]
 80082be:	6879      	ldr	r1, [r7, #4]
 80082c0:	4613      	mov	r3, r2
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	4413      	add	r3, r2
 80082c6:	00db      	lsls	r3, r3, #3
 80082c8:	440b      	add	r3, r1
 80082ca:	333c      	adds	r3, #60	; 0x3c
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	78fb      	ldrb	r3, [r7, #3]
 80082d0:	4619      	mov	r1, r3
 80082d2:	f7fe fe3e 	bl	8006f52 <USBD_LL_DataInStage>
}
 80082d6:	bf00      	nop
 80082d8:	3708      	adds	r7, #8
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}

080082de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b082      	sub	sp, #8
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7fe ff4e 	bl	800718e <USBD_LL_SOF>
}
 80082f2:	bf00      	nop
 80082f4:	3708      	adds	r7, #8
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b084      	sub	sp, #16
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008302:	2301      	movs	r3, #1
 8008304:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	2b02      	cmp	r3, #2
 800830c:	d001      	beq.n	8008312 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800830e:	f7f8 f91a 	bl	8000546 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008318:	7bfa      	ldrb	r2, [r7, #15]
 800831a:	4611      	mov	r1, r2
 800831c:	4618      	mov	r0, r3
 800831e:	f7fe fefe 	bl	800711e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008328:	4618      	mov	r0, r3
 800832a:	f7fe feb7 	bl	800709c <USBD_LL_Reset>
}
 800832e:	bf00      	nop
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
	...

08008338 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008346:	4618      	mov	r0, r3
 8008348:	f7fe fef8 	bl	800713c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	699b      	ldr	r3, [r3, #24]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d005      	beq.n	8008360 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008354:	4b04      	ldr	r3, [pc, #16]	; (8008368 <HAL_PCD_SuspendCallback+0x30>)
 8008356:	691b      	ldr	r3, [r3, #16]
 8008358:	4a03      	ldr	r2, [pc, #12]	; (8008368 <HAL_PCD_SuspendCallback+0x30>)
 800835a:	f043 0306 	orr.w	r3, r3, #6
 800835e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008360:	bf00      	nop
 8008362:	3708      	adds	r7, #8
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}
 8008368:	e000ed00 	.word	0xe000ed00

0800836c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800837a:	4618      	mov	r0, r3
 800837c:	f7fe fef2 	bl	8007164 <USBD_LL_Resume>
}
 8008380:	bf00      	nop
 8008382:	3708      	adds	r7, #8
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008390:	4a28      	ldr	r2, [pc, #160]	; (8008434 <USBD_LL_Init+0xac>)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a26      	ldr	r2, [pc, #152]	; (8008434 <USBD_LL_Init+0xac>)
 800839c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80083a0:	4b24      	ldr	r3, [pc, #144]	; (8008434 <USBD_LL_Init+0xac>)
 80083a2:	4a25      	ldr	r2, [pc, #148]	; (8008438 <USBD_LL_Init+0xb0>)
 80083a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80083a6:	4b23      	ldr	r3, [pc, #140]	; (8008434 <USBD_LL_Init+0xac>)
 80083a8:	2208      	movs	r2, #8
 80083aa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80083ac:	4b21      	ldr	r3, [pc, #132]	; (8008434 <USBD_LL_Init+0xac>)
 80083ae:	2202      	movs	r2, #2
 80083b0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80083b2:	4b20      	ldr	r3, [pc, #128]	; (8008434 <USBD_LL_Init+0xac>)
 80083b4:	2200      	movs	r2, #0
 80083b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80083b8:	4b1e      	ldr	r3, [pc, #120]	; (8008434 <USBD_LL_Init+0xac>)
 80083ba:	2200      	movs	r2, #0
 80083bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80083be:	4b1d      	ldr	r3, [pc, #116]	; (8008434 <USBD_LL_Init+0xac>)
 80083c0:	2200      	movs	r2, #0
 80083c2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80083c4:	481b      	ldr	r0, [pc, #108]	; (8008434 <USBD_LL_Init+0xac>)
 80083c6:	f7f8 fe6c 	bl	80010a2 <HAL_PCD_Init>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d001      	beq.n	80083d4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80083d0:	f7f8 f8b9 	bl	8000546 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80083da:	2318      	movs	r3, #24
 80083dc:	2200      	movs	r2, #0
 80083de:	2100      	movs	r1, #0
 80083e0:	f7fa fb8b 	bl	8002afa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80083ea:	2358      	movs	r3, #88	; 0x58
 80083ec:	2200      	movs	r2, #0
 80083ee:	2180      	movs	r1, #128	; 0x80
 80083f0:	f7fa fb83 	bl	8002afa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80083fa:	23c0      	movs	r3, #192	; 0xc0
 80083fc:	2200      	movs	r2, #0
 80083fe:	2181      	movs	r1, #129	; 0x81
 8008400:	f7fa fb7b 	bl	8002afa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800840a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800840e:	2200      	movs	r2, #0
 8008410:	2101      	movs	r1, #1
 8008412:	f7fa fb72 	bl	8002afa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800841c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008420:	2200      	movs	r2, #0
 8008422:	2182      	movs	r1, #130	; 0x82
 8008424:	f7fa fb69 	bl	8002afa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	3708      	adds	r7, #8
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	20000fac 	.word	0x20000fac
 8008438:	40005c00 	.word	0x40005c00

0800843c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008444:	2300      	movs	r3, #0
 8008446:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008448:	2300      	movs	r3, #0
 800844a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008452:	4618      	mov	r0, r3
 8008454:	f7f8 ff24 	bl	80012a0 <HAL_PCD_Start>
 8008458:	4603      	mov	r3, r0
 800845a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800845c:	7bfb      	ldrb	r3, [r7, #15]
 800845e:	4618      	mov	r0, r3
 8008460:	f000 f94e 	bl	8008700 <USBD_Get_USB_Status>
 8008464:	4603      	mov	r3, r0
 8008466:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008468:	7bbb      	ldrb	r3, [r7, #14]
}
 800846a:	4618      	mov	r0, r3
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b084      	sub	sp, #16
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
 800847a:	4608      	mov	r0, r1
 800847c:	4611      	mov	r1, r2
 800847e:	461a      	mov	r2, r3
 8008480:	4603      	mov	r3, r0
 8008482:	70fb      	strb	r3, [r7, #3]
 8008484:	460b      	mov	r3, r1
 8008486:	70bb      	strb	r3, [r7, #2]
 8008488:	4613      	mov	r3, r2
 800848a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800848c:	2300      	movs	r3, #0
 800848e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008490:	2300      	movs	r3, #0
 8008492:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800849a:	78bb      	ldrb	r3, [r7, #2]
 800849c:	883a      	ldrh	r2, [r7, #0]
 800849e:	78f9      	ldrb	r1, [r7, #3]
 80084a0:	f7f9 f879 	bl	8001596 <HAL_PCD_EP_Open>
 80084a4:	4603      	mov	r3, r0
 80084a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084a8:	7bfb      	ldrb	r3, [r7, #15]
 80084aa:	4618      	mov	r0, r3
 80084ac:	f000 f928 	bl	8008700 <USBD_Get_USB_Status>
 80084b0:	4603      	mov	r3, r0
 80084b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084be:	b580      	push	{r7, lr}
 80084c0:	b084      	sub	sp, #16
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
 80084c6:	460b      	mov	r3, r1
 80084c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084ca:	2300      	movs	r3, #0
 80084cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084ce:	2300      	movs	r3, #0
 80084d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084d8:	78fa      	ldrb	r2, [r7, #3]
 80084da:	4611      	mov	r1, r2
 80084dc:	4618      	mov	r0, r3
 80084de:	f7f9 f8b7 	bl	8001650 <HAL_PCD_EP_Close>
 80084e2:	4603      	mov	r3, r0
 80084e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084e6:	7bfb      	ldrb	r3, [r7, #15]
 80084e8:	4618      	mov	r0, r3
 80084ea:	f000 f909 	bl	8008700 <USBD_Get_USB_Status>
 80084ee:	4603      	mov	r3, r0
 80084f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3710      	adds	r7, #16
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	460b      	mov	r3, r1
 8008506:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008508:	2300      	movs	r3, #0
 800850a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800850c:	2300      	movs	r3, #0
 800850e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008516:	78fa      	ldrb	r2, [r7, #3]
 8008518:	4611      	mov	r1, r2
 800851a:	4618      	mov	r0, r3
 800851c:	f7f9 f95f 	bl	80017de <HAL_PCD_EP_SetStall>
 8008520:	4603      	mov	r3, r0
 8008522:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008524:	7bfb      	ldrb	r3, [r7, #15]
 8008526:	4618      	mov	r0, r3
 8008528:	f000 f8ea 	bl	8008700 <USBD_Get_USB_Status>
 800852c:	4603      	mov	r3, r0
 800852e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008530:	7bbb      	ldrb	r3, [r7, #14]
}
 8008532:	4618      	mov	r0, r3
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b084      	sub	sp, #16
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
 8008542:	460b      	mov	r3, r1
 8008544:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008546:	2300      	movs	r3, #0
 8008548:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800854a:	2300      	movs	r3, #0
 800854c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008554:	78fa      	ldrb	r2, [r7, #3]
 8008556:	4611      	mov	r1, r2
 8008558:	4618      	mov	r0, r3
 800855a:	f7f9 f9a0 	bl	800189e <HAL_PCD_EP_ClrStall>
 800855e:	4603      	mov	r3, r0
 8008560:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008562:	7bfb      	ldrb	r3, [r7, #15]
 8008564:	4618      	mov	r0, r3
 8008566:	f000 f8cb 	bl	8008700 <USBD_Get_USB_Status>
 800856a:	4603      	mov	r3, r0
 800856c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800856e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008570:	4618      	mov	r0, r3
 8008572:	3710      	adds	r7, #16
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008578:	b480      	push	{r7}
 800857a:	b085      	sub	sp, #20
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	460b      	mov	r3, r1
 8008582:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800858a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800858c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008590:	2b00      	cmp	r3, #0
 8008592:	da0c      	bge.n	80085ae <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008594:	78fb      	ldrb	r3, [r7, #3]
 8008596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800859a:	68f9      	ldr	r1, [r7, #12]
 800859c:	1c5a      	adds	r2, r3, #1
 800859e:	4613      	mov	r3, r2
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	4413      	add	r3, r2
 80085a4:	00db      	lsls	r3, r3, #3
 80085a6:	440b      	add	r3, r1
 80085a8:	3302      	adds	r3, #2
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	e00b      	b.n	80085c6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80085ae:	78fb      	ldrb	r3, [r7, #3]
 80085b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085b4:	68f9      	ldr	r1, [r7, #12]
 80085b6:	4613      	mov	r3, r2
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	4413      	add	r3, r2
 80085bc:	00db      	lsls	r3, r3, #3
 80085be:	440b      	add	r3, r1
 80085c0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80085c4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3714      	adds	r7, #20
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bc80      	pop	{r7}
 80085ce:	4770      	bx	lr

080085d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	460b      	mov	r3, r1
 80085da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085dc:	2300      	movs	r3, #0
 80085de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085e0:	2300      	movs	r3, #0
 80085e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085ea:	78fa      	ldrb	r2, [r7, #3]
 80085ec:	4611      	mov	r1, r2
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7f8 ffac 	bl	800154c <HAL_PCD_SetAddress>
 80085f4:	4603      	mov	r3, r0
 80085f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085f8:	7bfb      	ldrb	r3, [r7, #15]
 80085fa:	4618      	mov	r0, r3
 80085fc:	f000 f880 	bl	8008700 <USBD_Get_USB_Status>
 8008600:	4603      	mov	r3, r0
 8008602:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008604:	7bbb      	ldrb	r3, [r7, #14]
}
 8008606:	4618      	mov	r0, r3
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800860e:	b580      	push	{r7, lr}
 8008610:	b086      	sub	sp, #24
 8008612:	af00      	add	r7, sp, #0
 8008614:	60f8      	str	r0, [r7, #12]
 8008616:	607a      	str	r2, [r7, #4]
 8008618:	461a      	mov	r2, r3
 800861a:	460b      	mov	r3, r1
 800861c:	72fb      	strb	r3, [r7, #11]
 800861e:	4613      	mov	r3, r2
 8008620:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008622:	2300      	movs	r3, #0
 8008624:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008626:	2300      	movs	r3, #0
 8008628:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008630:	893b      	ldrh	r3, [r7, #8]
 8008632:	7af9      	ldrb	r1, [r7, #11]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	f7f9 f89b 	bl	8001770 <HAL_PCD_EP_Transmit>
 800863a:	4603      	mov	r3, r0
 800863c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800863e:	7dfb      	ldrb	r3, [r7, #23]
 8008640:	4618      	mov	r0, r3
 8008642:	f000 f85d 	bl	8008700 <USBD_Get_USB_Status>
 8008646:	4603      	mov	r3, r0
 8008648:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800864a:	7dbb      	ldrb	r3, [r7, #22]
}
 800864c:	4618      	mov	r0, r3
 800864e:	3718      	adds	r7, #24
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b086      	sub	sp, #24
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	607a      	str	r2, [r7, #4]
 800865e:	461a      	mov	r2, r3
 8008660:	460b      	mov	r3, r1
 8008662:	72fb      	strb	r3, [r7, #11]
 8008664:	4613      	mov	r3, r2
 8008666:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008668:	2300      	movs	r3, #0
 800866a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800866c:	2300      	movs	r3, #0
 800866e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008676:	893b      	ldrh	r3, [r7, #8]
 8008678:	7af9      	ldrb	r1, [r7, #11]
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	f7f9 f830 	bl	80016e0 <HAL_PCD_EP_Receive>
 8008680:	4603      	mov	r3, r0
 8008682:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008684:	7dfb      	ldrb	r3, [r7, #23]
 8008686:	4618      	mov	r0, r3
 8008688:	f000 f83a 	bl	8008700 <USBD_Get_USB_Status>
 800868c:	4603      	mov	r3, r0
 800868e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008690:	7dbb      	ldrb	r3, [r7, #22]
}
 8008692:	4618      	mov	r0, r3
 8008694:	3718      	adds	r7, #24
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800869a:	b580      	push	{r7, lr}
 800869c:	b082      	sub	sp, #8
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
 80086a2:	460b      	mov	r3, r1
 80086a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086ac:	78fa      	ldrb	r2, [r7, #3]
 80086ae:	4611      	mov	r1, r2
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7f9 f846 	bl	8001742 <HAL_PCD_EP_GetRxCount>
 80086b6:	4603      	mov	r3, r0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3708      	adds	r7, #8
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80086c8:	4b02      	ldr	r3, [pc, #8]	; (80086d4 <USBD_static_malloc+0x14>)
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	370c      	adds	r7, #12
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bc80      	pop	{r7}
 80086d2:	4770      	bx	lr
 80086d4:	2000129c 	.word	0x2000129c

080086d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]

}
 80086e0:	bf00      	nop
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bc80      	pop	{r7}
 80086e8:	4770      	bx	lr

080086ea <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086ea:	b480      	push	{r7}
 80086ec:	b083      	sub	sp, #12
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
 80086f2:	460b      	mov	r3, r1
 80086f4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80086f6:	bf00      	nop
 80086f8:	370c      	adds	r7, #12
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bc80      	pop	{r7}
 80086fe:	4770      	bx	lr

08008700 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008700:	b480      	push	{r7}
 8008702:	b085      	sub	sp, #20
 8008704:	af00      	add	r7, sp, #0
 8008706:	4603      	mov	r3, r0
 8008708:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800870a:	2300      	movs	r3, #0
 800870c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800870e:	79fb      	ldrb	r3, [r7, #7]
 8008710:	2b03      	cmp	r3, #3
 8008712:	d817      	bhi.n	8008744 <USBD_Get_USB_Status+0x44>
 8008714:	a201      	add	r2, pc, #4	; (adr r2, 800871c <USBD_Get_USB_Status+0x1c>)
 8008716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800871a:	bf00      	nop
 800871c:	0800872d 	.word	0x0800872d
 8008720:	08008733 	.word	0x08008733
 8008724:	08008739 	.word	0x08008739
 8008728:	0800873f 	.word	0x0800873f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800872c:	2300      	movs	r3, #0
 800872e:	73fb      	strb	r3, [r7, #15]
    break;
 8008730:	e00b      	b.n	800874a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008732:	2302      	movs	r3, #2
 8008734:	73fb      	strb	r3, [r7, #15]
    break;
 8008736:	e008      	b.n	800874a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008738:	2301      	movs	r3, #1
 800873a:	73fb      	strb	r3, [r7, #15]
    break;
 800873c:	e005      	b.n	800874a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800873e:	2302      	movs	r3, #2
 8008740:	73fb      	strb	r3, [r7, #15]
    break;
 8008742:	e002      	b.n	800874a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008744:	2302      	movs	r3, #2
 8008746:	73fb      	strb	r3, [r7, #15]
    break;
 8008748:	bf00      	nop
  }
  return usb_status;
 800874a:	7bfb      	ldrb	r3, [r7, #15]
}
 800874c:	4618      	mov	r0, r3
 800874e:	3714      	adds	r7, #20
 8008750:	46bd      	mov	sp, r7
 8008752:	bc80      	pop	{r7}
 8008754:	4770      	bx	lr
 8008756:	bf00      	nop

08008758 <malloc>:
 8008758:	4b02      	ldr	r3, [pc, #8]	; (8008764 <malloc+0xc>)
 800875a:	4601      	mov	r1, r0
 800875c:	6818      	ldr	r0, [r3, #0]
 800875e:	f000 b823 	b.w	80087a8 <_malloc_r>
 8008762:	bf00      	nop
 8008764:	200001c8 	.word	0x200001c8

08008768 <sbrk_aligned>:
 8008768:	b570      	push	{r4, r5, r6, lr}
 800876a:	4e0e      	ldr	r6, [pc, #56]	; (80087a4 <sbrk_aligned+0x3c>)
 800876c:	460c      	mov	r4, r1
 800876e:	6831      	ldr	r1, [r6, #0]
 8008770:	4605      	mov	r5, r0
 8008772:	b911      	cbnz	r1, 800877a <sbrk_aligned+0x12>
 8008774:	f000 f8ac 	bl	80088d0 <_sbrk_r>
 8008778:	6030      	str	r0, [r6, #0]
 800877a:	4621      	mov	r1, r4
 800877c:	4628      	mov	r0, r5
 800877e:	f000 f8a7 	bl	80088d0 <_sbrk_r>
 8008782:	1c43      	adds	r3, r0, #1
 8008784:	d00a      	beq.n	800879c <sbrk_aligned+0x34>
 8008786:	1cc4      	adds	r4, r0, #3
 8008788:	f024 0403 	bic.w	r4, r4, #3
 800878c:	42a0      	cmp	r0, r4
 800878e:	d007      	beq.n	80087a0 <sbrk_aligned+0x38>
 8008790:	1a21      	subs	r1, r4, r0
 8008792:	4628      	mov	r0, r5
 8008794:	f000 f89c 	bl	80088d0 <_sbrk_r>
 8008798:	3001      	adds	r0, #1
 800879a:	d101      	bne.n	80087a0 <sbrk_aligned+0x38>
 800879c:	f04f 34ff 	mov.w	r4, #4294967295
 80087a0:	4620      	mov	r0, r4
 80087a2:	bd70      	pop	{r4, r5, r6, pc}
 80087a4:	200014c0 	.word	0x200014c0

080087a8 <_malloc_r>:
 80087a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087ac:	1ccd      	adds	r5, r1, #3
 80087ae:	f025 0503 	bic.w	r5, r5, #3
 80087b2:	3508      	adds	r5, #8
 80087b4:	2d0c      	cmp	r5, #12
 80087b6:	bf38      	it	cc
 80087b8:	250c      	movcc	r5, #12
 80087ba:	2d00      	cmp	r5, #0
 80087bc:	4607      	mov	r7, r0
 80087be:	db01      	blt.n	80087c4 <_malloc_r+0x1c>
 80087c0:	42a9      	cmp	r1, r5
 80087c2:	d905      	bls.n	80087d0 <_malloc_r+0x28>
 80087c4:	230c      	movs	r3, #12
 80087c6:	2600      	movs	r6, #0
 80087c8:	603b      	str	r3, [r7, #0]
 80087ca:	4630      	mov	r0, r6
 80087cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80088a4 <_malloc_r+0xfc>
 80087d4:	f000 f868 	bl	80088a8 <__malloc_lock>
 80087d8:	f8d8 3000 	ldr.w	r3, [r8]
 80087dc:	461c      	mov	r4, r3
 80087de:	bb5c      	cbnz	r4, 8008838 <_malloc_r+0x90>
 80087e0:	4629      	mov	r1, r5
 80087e2:	4638      	mov	r0, r7
 80087e4:	f7ff ffc0 	bl	8008768 <sbrk_aligned>
 80087e8:	1c43      	adds	r3, r0, #1
 80087ea:	4604      	mov	r4, r0
 80087ec:	d155      	bne.n	800889a <_malloc_r+0xf2>
 80087ee:	f8d8 4000 	ldr.w	r4, [r8]
 80087f2:	4626      	mov	r6, r4
 80087f4:	2e00      	cmp	r6, #0
 80087f6:	d145      	bne.n	8008884 <_malloc_r+0xdc>
 80087f8:	2c00      	cmp	r4, #0
 80087fa:	d048      	beq.n	800888e <_malloc_r+0xe6>
 80087fc:	6823      	ldr	r3, [r4, #0]
 80087fe:	4631      	mov	r1, r6
 8008800:	4638      	mov	r0, r7
 8008802:	eb04 0903 	add.w	r9, r4, r3
 8008806:	f000 f863 	bl	80088d0 <_sbrk_r>
 800880a:	4581      	cmp	r9, r0
 800880c:	d13f      	bne.n	800888e <_malloc_r+0xe6>
 800880e:	6821      	ldr	r1, [r4, #0]
 8008810:	4638      	mov	r0, r7
 8008812:	1a6d      	subs	r5, r5, r1
 8008814:	4629      	mov	r1, r5
 8008816:	f7ff ffa7 	bl	8008768 <sbrk_aligned>
 800881a:	3001      	adds	r0, #1
 800881c:	d037      	beq.n	800888e <_malloc_r+0xe6>
 800881e:	6823      	ldr	r3, [r4, #0]
 8008820:	442b      	add	r3, r5
 8008822:	6023      	str	r3, [r4, #0]
 8008824:	f8d8 3000 	ldr.w	r3, [r8]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d038      	beq.n	800889e <_malloc_r+0xf6>
 800882c:	685a      	ldr	r2, [r3, #4]
 800882e:	42a2      	cmp	r2, r4
 8008830:	d12b      	bne.n	800888a <_malloc_r+0xe2>
 8008832:	2200      	movs	r2, #0
 8008834:	605a      	str	r2, [r3, #4]
 8008836:	e00f      	b.n	8008858 <_malloc_r+0xb0>
 8008838:	6822      	ldr	r2, [r4, #0]
 800883a:	1b52      	subs	r2, r2, r5
 800883c:	d41f      	bmi.n	800887e <_malloc_r+0xd6>
 800883e:	2a0b      	cmp	r2, #11
 8008840:	d917      	bls.n	8008872 <_malloc_r+0xca>
 8008842:	1961      	adds	r1, r4, r5
 8008844:	42a3      	cmp	r3, r4
 8008846:	6025      	str	r5, [r4, #0]
 8008848:	bf18      	it	ne
 800884a:	6059      	strne	r1, [r3, #4]
 800884c:	6863      	ldr	r3, [r4, #4]
 800884e:	bf08      	it	eq
 8008850:	f8c8 1000 	streq.w	r1, [r8]
 8008854:	5162      	str	r2, [r4, r5]
 8008856:	604b      	str	r3, [r1, #4]
 8008858:	4638      	mov	r0, r7
 800885a:	f104 060b 	add.w	r6, r4, #11
 800885e:	f000 f829 	bl	80088b4 <__malloc_unlock>
 8008862:	f026 0607 	bic.w	r6, r6, #7
 8008866:	1d23      	adds	r3, r4, #4
 8008868:	1af2      	subs	r2, r6, r3
 800886a:	d0ae      	beq.n	80087ca <_malloc_r+0x22>
 800886c:	1b9b      	subs	r3, r3, r6
 800886e:	50a3      	str	r3, [r4, r2]
 8008870:	e7ab      	b.n	80087ca <_malloc_r+0x22>
 8008872:	42a3      	cmp	r3, r4
 8008874:	6862      	ldr	r2, [r4, #4]
 8008876:	d1dd      	bne.n	8008834 <_malloc_r+0x8c>
 8008878:	f8c8 2000 	str.w	r2, [r8]
 800887c:	e7ec      	b.n	8008858 <_malloc_r+0xb0>
 800887e:	4623      	mov	r3, r4
 8008880:	6864      	ldr	r4, [r4, #4]
 8008882:	e7ac      	b.n	80087de <_malloc_r+0x36>
 8008884:	4634      	mov	r4, r6
 8008886:	6876      	ldr	r6, [r6, #4]
 8008888:	e7b4      	b.n	80087f4 <_malloc_r+0x4c>
 800888a:	4613      	mov	r3, r2
 800888c:	e7cc      	b.n	8008828 <_malloc_r+0x80>
 800888e:	230c      	movs	r3, #12
 8008890:	4638      	mov	r0, r7
 8008892:	603b      	str	r3, [r7, #0]
 8008894:	f000 f80e 	bl	80088b4 <__malloc_unlock>
 8008898:	e797      	b.n	80087ca <_malloc_r+0x22>
 800889a:	6025      	str	r5, [r4, #0]
 800889c:	e7dc      	b.n	8008858 <_malloc_r+0xb0>
 800889e:	605b      	str	r3, [r3, #4]
 80088a0:	deff      	udf	#255	; 0xff
 80088a2:	bf00      	nop
 80088a4:	200014bc 	.word	0x200014bc

080088a8 <__malloc_lock>:
 80088a8:	4801      	ldr	r0, [pc, #4]	; (80088b0 <__malloc_lock+0x8>)
 80088aa:	f000 b84b 	b.w	8008944 <__retarget_lock_acquire_recursive>
 80088ae:	bf00      	nop
 80088b0:	20001600 	.word	0x20001600

080088b4 <__malloc_unlock>:
 80088b4:	4801      	ldr	r0, [pc, #4]	; (80088bc <__malloc_unlock+0x8>)
 80088b6:	f000 b846 	b.w	8008946 <__retarget_lock_release_recursive>
 80088ba:	bf00      	nop
 80088bc:	20001600 	.word	0x20001600

080088c0 <memset>:
 80088c0:	4603      	mov	r3, r0
 80088c2:	4402      	add	r2, r0
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d100      	bne.n	80088ca <memset+0xa>
 80088c8:	4770      	bx	lr
 80088ca:	f803 1b01 	strb.w	r1, [r3], #1
 80088ce:	e7f9      	b.n	80088c4 <memset+0x4>

080088d0 <_sbrk_r>:
 80088d0:	b538      	push	{r3, r4, r5, lr}
 80088d2:	2300      	movs	r3, #0
 80088d4:	4d05      	ldr	r5, [pc, #20]	; (80088ec <_sbrk_r+0x1c>)
 80088d6:	4604      	mov	r4, r0
 80088d8:	4608      	mov	r0, r1
 80088da:	602b      	str	r3, [r5, #0]
 80088dc:	f7f7 ff70 	bl	80007c0 <_sbrk>
 80088e0:	1c43      	adds	r3, r0, #1
 80088e2:	d102      	bne.n	80088ea <_sbrk_r+0x1a>
 80088e4:	682b      	ldr	r3, [r5, #0]
 80088e6:	b103      	cbz	r3, 80088ea <_sbrk_r+0x1a>
 80088e8:	6023      	str	r3, [r4, #0]
 80088ea:	bd38      	pop	{r3, r4, r5, pc}
 80088ec:	200015fc 	.word	0x200015fc

080088f0 <__errno>:
 80088f0:	4b01      	ldr	r3, [pc, #4]	; (80088f8 <__errno+0x8>)
 80088f2:	6818      	ldr	r0, [r3, #0]
 80088f4:	4770      	bx	lr
 80088f6:	bf00      	nop
 80088f8:	200001c8 	.word	0x200001c8

080088fc <__libc_init_array>:
 80088fc:	b570      	push	{r4, r5, r6, lr}
 80088fe:	2600      	movs	r6, #0
 8008900:	4d0c      	ldr	r5, [pc, #48]	; (8008934 <__libc_init_array+0x38>)
 8008902:	4c0d      	ldr	r4, [pc, #52]	; (8008938 <__libc_init_array+0x3c>)
 8008904:	1b64      	subs	r4, r4, r5
 8008906:	10a4      	asrs	r4, r4, #2
 8008908:	42a6      	cmp	r6, r4
 800890a:	d109      	bne.n	8008920 <__libc_init_array+0x24>
 800890c:	f000 f81c 	bl	8008948 <_init>
 8008910:	2600      	movs	r6, #0
 8008912:	4d0a      	ldr	r5, [pc, #40]	; (800893c <__libc_init_array+0x40>)
 8008914:	4c0a      	ldr	r4, [pc, #40]	; (8008940 <__libc_init_array+0x44>)
 8008916:	1b64      	subs	r4, r4, r5
 8008918:	10a4      	asrs	r4, r4, #2
 800891a:	42a6      	cmp	r6, r4
 800891c:	d105      	bne.n	800892a <__libc_init_array+0x2e>
 800891e:	bd70      	pop	{r4, r5, r6, pc}
 8008920:	f855 3b04 	ldr.w	r3, [r5], #4
 8008924:	4798      	blx	r3
 8008926:	3601      	adds	r6, #1
 8008928:	e7ee      	b.n	8008908 <__libc_init_array+0xc>
 800892a:	f855 3b04 	ldr.w	r3, [r5], #4
 800892e:	4798      	blx	r3
 8008930:	3601      	adds	r6, #1
 8008932:	e7f2      	b.n	800891a <__libc_init_array+0x1e>
 8008934:	080089d4 	.word	0x080089d4
 8008938:	080089d4 	.word	0x080089d4
 800893c:	080089d4 	.word	0x080089d4
 8008940:	080089d8 	.word	0x080089d8

08008944 <__retarget_lock_acquire_recursive>:
 8008944:	4770      	bx	lr

08008946 <__retarget_lock_release_recursive>:
 8008946:	4770      	bx	lr

08008948 <_init>:
 8008948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800894a:	bf00      	nop
 800894c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800894e:	bc08      	pop	{r3}
 8008950:	469e      	mov	lr, r3
 8008952:	4770      	bx	lr

08008954 <_fini>:
 8008954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008956:	bf00      	nop
 8008958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800895a:	bc08      	pop	{r3}
 800895c:	469e      	mov	lr, r3
 800895e:	4770      	bx	lr
